!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ADD	include/map_msgs/PointCloud2Update.h	/^    enum { ADD = 0u };$/;"	e	enum:map_msgs::PointCloud2Update_::__anon48
ARCHITECTURE_ID	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	298;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	301;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	304;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	307;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	310;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	313;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	316;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	320;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	291;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	294;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	297;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	300;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	303;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	306;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	309;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	313;"	d	file:
ASCIIReader	include/pcl/io/ascii_io.h	/^  class PCL_EXPORTS ASCIIReader : public FileReader$/;"	c	namespace:pcl
ASSERT_NORMAL_EQ	include/pcl/pcl_tests.h	229;"	d
ASSERT_NORMAL_NEAR	include/pcl/pcl_tests.h	243;"	d
ASSERT_RGBA_EQ	include/pcl/pcl_tests.h	267;"	d
ASSERT_RGB_EQ	include/pcl/pcl_tests.h	255;"	d
ASSERT_XYZ_EQ	include/pcl/pcl_tests.h	205;"	d
ASSERT_XYZ_NEAR	include/pcl/pcl_tests.h	217;"	d
ATTRIBUTE_ALIGNED128	include/tf/LinearMath/Scalar.h	109;"	d
ATTRIBUTE_ALIGNED128	include/tf/LinearMath/Scalar.h	137;"	d
ATTRIBUTE_ALIGNED128	include/tf/LinearMath/Scalar.h	44;"	d
ATTRIBUTE_ALIGNED128	include/tf/LinearMath/Scalar.h	55;"	d
ATTRIBUTE_ALIGNED128	include/tf/LinearMath/Scalar.h	87;"	d
ATTRIBUTE_ALIGNED16	include/tf/LinearMath/Scalar.h	107;"	d
ATTRIBUTE_ALIGNED16	include/tf/LinearMath/Scalar.h	135;"	d
ATTRIBUTE_ALIGNED16	include/tf/LinearMath/Scalar.h	42;"	d
ATTRIBUTE_ALIGNED16	include/tf/LinearMath/Scalar.h	53;"	d
ATTRIBUTE_ALIGNED16	include/tf/LinearMath/Scalar.h	85;"	d
ATTRIBUTE_ALIGNED64	include/tf/LinearMath/Scalar.h	108;"	d
ATTRIBUTE_ALIGNED64	include/tf/LinearMath/Scalar.h	136;"	d
ATTRIBUTE_ALIGNED64	include/tf/LinearMath/Scalar.h	43;"	d
ATTRIBUTE_ALIGNED64	include/tf/LinearMath/Scalar.h	54;"	d
ATTRIBUTE_ALIGNED64	include/tf/LinearMath/Scalar.h	86;"	d
AccumulatorCurvature	include/pcl/common/impl/accumulators.hpp	/^      AccumulatorCurvature () : curvature (0) { }$/;"	f	struct:pcl::detail::AccumulatorCurvature
AccumulatorCurvature	include/pcl/common/impl/accumulators.hpp	/^    struct AccumulatorCurvature$/;"	s	namespace:pcl::detail
AccumulatorIntensity	include/pcl/common/impl/accumulators.hpp	/^      AccumulatorIntensity () : intensity (0) { }$/;"	f	struct:pcl::detail::AccumulatorIntensity
AccumulatorIntensity	include/pcl/common/impl/accumulators.hpp	/^    struct AccumulatorIntensity$/;"	s	namespace:pcl::detail
AccumulatorLabel	include/pcl/common/impl/accumulators.hpp	/^      AccumulatorLabel () { }$/;"	f	struct:pcl::detail::AccumulatorLabel
AccumulatorLabel	include/pcl/common/impl/accumulators.hpp	/^    struct AccumulatorLabel$/;"	s	namespace:pcl::detail
AccumulatorNormal	include/pcl/common/impl/accumulators.hpp	/^      AccumulatorNormal () : normal (Eigen::Vector4f::Zero ()) { }$/;"	f	struct:pcl::detail::AccumulatorNormal
AccumulatorNormal	include/pcl/common/impl/accumulators.hpp	/^    struct AccumulatorNormal$/;"	s	namespace:pcl::detail
AccumulatorRGBA	include/pcl/common/impl/accumulators.hpp	/^      AccumulatorRGBA () : r (0), g (0), b (0), a (0) { }$/;"	f	struct:pcl::detail::AccumulatorRGBA
AccumulatorRGBA	include/pcl/common/impl/accumulators.hpp	/^    struct AccumulatorRGBA$/;"	s	namespace:pcl::detail
AccumulatorXYZ	include/pcl/common/impl/accumulators.hpp	/^      AccumulatorXYZ () : xyz (Eigen::Vector3f::Zero ()) { }$/;"	f	struct:pcl::detail::AccumulatorXYZ
AccumulatorXYZ	include/pcl/common/impl/accumulators.hpp	/^    struct AccumulatorXYZ$/;"	s	namespace:pcl::detail
Accumulators	include/pcl/common/impl/accumulators.hpp	/^    struct Accumulators$/;"	s	namespace:pcl::detail
ActualDepthImageCallbackFunction	include/pcl/io/openni_camera/openni_device.h	/^      typedef boost::function<void(boost::shared_ptr<DepthImage>) > ActualDepthImageCallbackFunction;$/;"	t	class:openni_wrapper::OpenNIDevice
ActualIRImageCallbackFunction	include/pcl/io/openni_camera/openni_device.h	/^      typedef boost::function<void(boost::shared_ptr<IRImage>) > ActualIRImageCallbackFunction;$/;"	t	class:openni_wrapper::OpenNIDevice
ActualImageCallbackFunction	include/pcl/io/openni_camera/openni_device.h	/^      typedef boost::function<void(boost::shared_ptr<Image>) > ActualImageCallbackFunction;$/;"	t	class:openni_wrapper::OpenNIDevice
AddPoint	include/pcl/common/impl/accumulators.hpp	/^      AddPoint (const PointT& point) : p (point) { }$/;"	f	struct:pcl::detail::AddPoint
AddPoint	include/pcl/common/impl/accumulators.hpp	/^    struct AddPoint$/;"	s	namespace:pcl::detail
Array3fMap	include/pcl/impl/point_types.hpp	/^  typedef Eigen::Map<Eigen::Array3f> Array3fMap;$/;"	t	namespace:pcl
Array3fMapConst	include/pcl/impl/point_types.hpp	/^  typedef const Eigen::Map<const Eigen::Array3f> Array3fMapConst;$/;"	t	namespace:pcl
Array4fMap	include/pcl/impl/point_types.hpp	/^  typedef Eigen::Map<Eigen::Array4f, Eigen::Aligned> Array4fMap;$/;"	t	namespace:pcl
Array4fMapConst	include/pcl/impl/point_types.hpp	/^  typedef const Eigen::Map<const Eigen::Array4f, Eigen::Aligned> Array4fMapConst;$/;"	t	namespace:pcl
AverageBuffer	include/pcl/io/buffers.h	/^    class AverageBuffer : public Buffer<T>$/;"	c	namespace:pcl::io
AverageBuffer	include/pcl/io/impl/buffers.hpp	/^pcl::io::AverageBuffer<T>::AverageBuffer (size_t size,$/;"	f	class:pcl::io::AverageBuffer
Axis	include/pcl/impl/point_types.hpp	/^    inline Axis ()$/;"	f	struct:pcl::Axis
Axis	include/pcl/impl/point_types.hpp	/^    inline Axis (const _Axis &p)$/;"	f	struct:pcl::Axis
Axis	include/pcl/impl/point_types.hpp	/^    inline Axis (float n_x, float n_y, float n_z)$/;"	f	struct:pcl::Axis
Axis	include/pcl/impl/point_types.hpp	/^  struct EIGEN_ALIGN16 Axis : public _Axis$/;"	s	namespace:pcl
B	include/pcl/common/norms.h	/^  enum NormType {L1, L2_SQR, L2, LINF, JM, B, SUBLINEAR, CS, DIV, PF, K, KL, HIK};$/;"	e	enum:pcl::NormType
BAYER_GRBG	include/pcl/io/image.h	/^          BAYER_GRBG,$/;"	e	enum:pcl::io::Image::__anon15
BAYER_GRBG	include/pcl/io/openni_camera/openni_image.h	/^      BAYER_GRBG,$/;"	e	enum:openni_wrapper::Image::__anon9
BIVARIATE_POLYNOMIAL_H	include/pcl/common/bivariate_polynomial.h	40;"	d
BIVARIATE_POLYNOMIAL_HPP	include/pcl/common/impl/bivariate_polynomial.hpp	40;"	d
BLOCK_0_TO_31	include/pcl/io/hdl_grabber.h	/^        BLOCK_0_TO_31 = 0xeeff, BLOCK_32_TO_63 = 0xddff$/;"	e	enum:pcl::HDLGrabber::HDLBlock
BLOCK_32_TO_63	include/pcl/io/hdl_grabber.h	/^        BLOCK_0_TO_31 = 0xeeff, BLOCK_32_TO_63 = 0xddff$/;"	e	enum:pcl::HDLGrabber::HDLBlock
BOOST_PARAMETER_MAX_ARITY	include/pcl/io/boost.h	81;"	d
BORDER_CONSTANT	include/pcl/common/io.h	/^    BORDER_CONSTANT = 0, BORDER_REPLICATE = 1,$/;"	e	enum:pcl::__anon46
BORDER_DEFAULT	include/pcl/common/io.h	/^    BORDER_DEFAULT = BORDER_REFLECT_101$/;"	e	enum:pcl::__anon46
BORDER_REFLECT	include/pcl/common/io.h	/^    BORDER_REFLECT = 2, BORDER_WRAP = 3,$/;"	e	enum:pcl::__anon46
BORDER_REFLECT_101	include/pcl/common/io.h	/^    BORDER_REFLECT_101 = 4, BORDER_TRANSPARENT = 5,$/;"	e	enum:pcl::__anon46
BORDER_REPLICATE	include/pcl/common/io.h	/^    BORDER_CONSTANT = 0, BORDER_REPLICATE = 1,$/;"	e	enum:pcl::__anon46
BORDER_TRAIT__OBSTACLE_BORDER	include/pcl/point_types.h	/^    BORDER_TRAIT__OBSTACLE_BORDER, BORDER_TRAIT__SHADOW_BORDER, BORDER_TRAIT__VEIL_POINT,$/;"	e	enum:pcl::BorderTrait
BORDER_TRAIT__OBSTACLE_BORDER_BOTTOM	include/pcl/point_types.h	/^    BORDER_TRAIT__OBSTACLE_BORDER_BOTTOM, BORDER_TRAIT__OBSTACLE_BORDER_LEFT, BORDER_TRAIT__VEIL_POINT_TOP,$/;"	e	enum:pcl::BorderTrait
BORDER_TRAIT__OBSTACLE_BORDER_LEFT	include/pcl/point_types.h	/^    BORDER_TRAIT__OBSTACLE_BORDER_BOTTOM, BORDER_TRAIT__OBSTACLE_BORDER_LEFT, BORDER_TRAIT__VEIL_POINT_TOP,$/;"	e	enum:pcl::BorderTrait
BORDER_TRAIT__OBSTACLE_BORDER_RIGHT	include/pcl/point_types.h	/^    BORDER_TRAIT__SHADOW_BORDER_LEFT, BORDER_TRAIT__OBSTACLE_BORDER_TOP, BORDER_TRAIT__OBSTACLE_BORDER_RIGHT,$/;"	e	enum:pcl::BorderTrait
BORDER_TRAIT__OBSTACLE_BORDER_TOP	include/pcl/point_types.h	/^    BORDER_TRAIT__SHADOW_BORDER_LEFT, BORDER_TRAIT__OBSTACLE_BORDER_TOP, BORDER_TRAIT__OBSTACLE_BORDER_RIGHT,$/;"	e	enum:pcl::BorderTrait
BORDER_TRAIT__SHADOW_BORDER	include/pcl/point_types.h	/^    BORDER_TRAIT__OBSTACLE_BORDER, BORDER_TRAIT__SHADOW_BORDER, BORDER_TRAIT__VEIL_POINT,$/;"	e	enum:pcl::BorderTrait
BORDER_TRAIT__SHADOW_BORDER_BOTTOM	include/pcl/point_types.h	/^    BORDER_TRAIT__SHADOW_BORDER_TOP, BORDER_TRAIT__SHADOW_BORDER_RIGHT, BORDER_TRAIT__SHADOW_BORDER_BOTTOM,$/;"	e	enum:pcl::BorderTrait
BORDER_TRAIT__SHADOW_BORDER_LEFT	include/pcl/point_types.h	/^    BORDER_TRAIT__SHADOW_BORDER_LEFT, BORDER_TRAIT__OBSTACLE_BORDER_TOP, BORDER_TRAIT__OBSTACLE_BORDER_RIGHT,$/;"	e	enum:pcl::BorderTrait
BORDER_TRAIT__SHADOW_BORDER_RIGHT	include/pcl/point_types.h	/^    BORDER_TRAIT__SHADOW_BORDER_TOP, BORDER_TRAIT__SHADOW_BORDER_RIGHT, BORDER_TRAIT__SHADOW_BORDER_BOTTOM,$/;"	e	enum:pcl::BorderTrait
BORDER_TRAIT__SHADOW_BORDER_TOP	include/pcl/point_types.h	/^    BORDER_TRAIT__SHADOW_BORDER_TOP, BORDER_TRAIT__SHADOW_BORDER_RIGHT, BORDER_TRAIT__SHADOW_BORDER_BOTTOM,$/;"	e	enum:pcl::BorderTrait
BORDER_TRAIT__VEIL_POINT	include/pcl/point_types.h	/^    BORDER_TRAIT__OBSTACLE_BORDER, BORDER_TRAIT__SHADOW_BORDER, BORDER_TRAIT__VEIL_POINT,$/;"	e	enum:pcl::BorderTrait
BORDER_TRAIT__VEIL_POINT_BOTTOM	include/pcl/point_types.h	/^    BORDER_TRAIT__VEIL_POINT_RIGHT, BORDER_TRAIT__VEIL_POINT_BOTTOM, BORDER_TRAIT__VEIL_POINT_LEFT$/;"	e	enum:pcl::BorderTrait
BORDER_TRAIT__VEIL_POINT_LEFT	include/pcl/point_types.h	/^    BORDER_TRAIT__VEIL_POINT_RIGHT, BORDER_TRAIT__VEIL_POINT_BOTTOM, BORDER_TRAIT__VEIL_POINT_LEFT$/;"	e	enum:pcl::BorderTrait
BORDER_TRAIT__VEIL_POINT_RIGHT	include/pcl/point_types.h	/^    BORDER_TRAIT__VEIL_POINT_RIGHT, BORDER_TRAIT__VEIL_POINT_BOTTOM, BORDER_TRAIT__VEIL_POINT_LEFT$/;"	e	enum:pcl::BorderTrait
BORDER_TRAIT__VEIL_POINT_TOP	include/pcl/point_types.h	/^    BORDER_TRAIT__OBSTACLE_BORDER_BOTTOM, BORDER_TRAIT__OBSTACLE_BORDER_LEFT, BORDER_TRAIT__VEIL_POINT_TOP,$/;"	e	enum:pcl::BorderTrait
BORDER_TRANSPARENT	include/pcl/common/io.h	/^    BORDER_REFLECT_101 = 4, BORDER_TRANSPARENT = 5,$/;"	e	enum:pcl::__anon46
BORDER_WRAP	include/pcl/common/io.h	/^    BORDER_REFLECT = 2, BORDER_WRAP = 3,$/;"	e	enum:pcl::__anon46
BRISKSignature512	include/pcl/impl/point_types.hpp	/^  struct BRISKSignature512$/;"	s	namespace:pcl
BUILD_RelWithDebInfo	include/pcl/pcl_config.h	3;"	d
B_Norm	include/pcl/common/impl/norms.hpp	/^B_Norm (FloatVectorT a, FloatVectorT b, int dim)$/;"	f	namespace:pcl
BadArgumentException	include/pcl/exceptions.h	/^    BadArgumentException (const std::string& error_description,$/;"	f	class:pcl::BadArgumentException
BadArgumentException	include/pcl/exceptions.h	/^  class BadArgumentException : public PCLException$/;"	c	namespace:pcl
Base	include/pcl/common/pca.h	/^      typedef pcl::PCLBase <PointT> Base;$/;"	t	class:pcl::PCA
BaseClass	include/pcl/range_image/bearing_angle_image.h	/^      typedef pcl::PointCloud<PointXYZRGBA> BaseClass;$/;"	t	class:pcl::BearingAngleImage
BaseClass	include/pcl/range_image/range_image.h	/^      typedef pcl::PointCloud<PointWithRange> BaseClass;$/;"	t	class:pcl::RangeImage
BaseClass	include/pcl/range_image/range_image_planar.h	/^      typedef RangeImage BaseClass;$/;"	t	class:pcl::RangeImagePlanar
BaseClass	include/pcl/range_image/range_image_spherical.h	/^      typedef RangeImage BaseClass;$/;"	t	class:pcl::RangeImageSpherical
BearingAngleImage	include/pcl/range_image/bearing_angle_image.h	/^  class PCL_EXPORTS BearingAngleImage : public pcl::PointCloud<PointXYZRGBA>$/;"	c	namespace:pcl
Bilinear	include/pcl/io/openni_camera/openni_image_bayer_grbg.h	/^        Bilinear = 0,$/;"	e	enum:openni_wrapper::ImageBayerGRBG::__anon10
BivariatePolynomial	include/pcl/common/bivariate_polynomial.h	/^  typedef BivariatePolynomialT<float>  BivariatePolynomial;$/;"	t	namespace:pcl
BivariatePolynomialT	include/pcl/common/bivariate_polynomial.h	/^  class BivariatePolynomialT $/;"	c	namespace:pcl
BivariatePolynomialT	include/pcl/common/impl/bivariate_polynomial.hpp	/^pcl::BivariatePolynomialT<real>::BivariatePolynomialT (const BivariatePolynomialT& other) :$/;"	f	class:pcl::BivariatePolynomialT
BivariatePolynomialT	include/pcl/common/impl/bivariate_polynomial.hpp	/^pcl::BivariatePolynomialT<real>::BivariatePolynomialT (int new_degree) :$/;"	f	class:pcl::BivariatePolynomialT
BivariatePolynomiald	include/pcl/common/bivariate_polynomial.h	/^  typedef BivariatePolynomialT<double> BivariatePolynomiald;$/;"	t	namespace:pcl
BorderDescription	include/pcl/impl/point_types.hpp	/^  struct BorderDescription$/;"	s	namespace:pcl
BorderTrait	include/pcl/point_types.h	/^  enum BorderTrait$/;"	g	namespace:pcl
BorderTraits	include/pcl/point_types.h	/^  typedef std::bitset<32> BorderTraits;$/;"	t	namespace:pcl
Boundary	include/pcl/impl/point_types.hpp	/^  struct Boundary$/;"	s	namespace:pcl
Buffer	include/pcl/io/buffers.h	/^    class Buffer$/;"	c	namespace:pcl::io
Buffer	include/pcl/io/impl/buffers.hpp	/^pcl::io::Buffer<T>::Buffer (size_t size)$/;"	f	class:pcl::io::Buffer
CAMERA_FRAME	include/pcl/range_image/range_image.h	/^        CAMERA_FRAME = 0,$/;"	e	enum:pcl::RangeImage::CoordinateFrame
CHECK_OVERFLOW_OP	include/pcl/common/fft/_kiss_fft_guts.h	58;"	d
CHECK_OVERFLOW_OP	include/pcl/common/fft/_kiss_fft_guts.h	97;"	d
CLIP_CHAR	include/pcl/io/impl/lzf_image_io.hpp	44;"	d
CMAKE_BINARY_DIR	build/Makefile	/^CMAKE_BINARY_DIR = \/home\/zach\/noros_ws\/navigation_no_ros\/pkg\/costmap_2d.new\/build$/;"	m
CMAKE_COMMAND	build/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_EDIT_COMMAND	build/Makefile	/^CMAKE_EDIT_COMMAND = \/usr\/bin\/ccmake$/;"	m
CMAKE_SOURCE_DIR	build/Makefile	/^CMAKE_SOURCE_DIR = \/home\/zach\/noros_ws\/navigation_no_ros\/pkg\/costmap_2d.new$/;"	m
CMD_GET_VERSION	include/pcl/io/dinast_grabber.h	/^      enum { CMD_READ_START=0xC7, CMD_READ_STOP=0xC8, CMD_GET_VERSION=0xDC, CMD_SEND_DATA=0xDE };$/;"	e	enum:pcl::DinastGrabber::__anon11
CMD_READ_START	include/pcl/io/dinast_grabber.h	/^      enum { CMD_READ_START=0xC7, CMD_READ_STOP=0xC8, CMD_GET_VERSION=0xDC, CMD_SEND_DATA=0xDE };$/;"	e	enum:pcl::DinastGrabber::__anon11
CMD_READ_STOP	include/pcl/io/dinast_grabber.h	/^      enum { CMD_READ_START=0xC7, CMD_READ_STOP=0xC8, CMD_GET_VERSION=0xDC, CMD_SEND_DATA=0xDE };$/;"	e	enum:pcl::DinastGrabber::__anon11
CMD_SEND_DATA	include/pcl/io/dinast_grabber.h	/^      enum { CMD_READ_START=0xC7, CMD_READ_STOP=0xC8, CMD_GET_VERSION=0xDC, CMD_SEND_DATA=0xDE };$/;"	e	enum:pcl::DinastGrabber::__anon11
COLORS_MONO	include/pcl/io/point_cloud_image_extractors.h	/^          COLORS_MONO,$/;"	e	enum:pcl::io::PointCloudImageExtractorFromLabelField::ColorMode
COLORS_RGB_GLASBEY	include/pcl/io/point_cloud_image_extractors.h	/^          COLORS_RGB_GLASBEY,$/;"	e	enum:pcl::io::PointCloudImageExtractorFromLabelField::ColorMode
COLORS_RGB_RANDOM	include/pcl/io/point_cloud_image_extractors.h	/^          COLORS_RGB_RANDOM,$/;"	e	enum:pcl::io::PointCloudImageExtractorFromLabelField::ColorMode
COLOR_HEIGHT	include/pcl/io/depth_sense/depth_sense_grabber_impl.h	/^        static const int COLOR_HEIGHT = 480;$/;"	m	struct:pcl::io::depth_sense::DepthSenseGrabberImpl
COLOR_SIZE	include/pcl/io/depth_sense/depth_sense_grabber_impl.h	/^        static const int COLOR_SIZE = COLOR_WIDTH * COLOR_HEIGHT;$/;"	m	struct:pcl::io::depth_sense::DepthSenseGrabberImpl
COLOR_WIDTH	include/pcl/io/depth_sense/depth_sense_grabber_impl.h	/^        static const int COLOR_WIDTH = 640;$/;"	m	struct:pcl::io::depth_sense::DepthSenseGrabberImpl
COMPILER_ID	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	107;"	d	file:
COMPILER_ID	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	112;"	d	file:
COMPILER_ID	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	119;"	d	file:
COMPILER_ID	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	122;"	d	file:
COMPILER_ID	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	125;"	d	file:
COMPILER_ID	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	133;"	d	file:
COMPILER_ID	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	13;"	d	file:
COMPILER_ID	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	152;"	d	file:
COMPILER_ID	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	160;"	d	file:
COMPILER_ID	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	165;"	d	file:
COMPILER_ID	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	170;"	d	file:
COMPILER_ID	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	177;"	d	file:
COMPILER_ID	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	194;"	d	file:
COMPILER_ID	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	197;"	d	file:
COMPILER_ID	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	200;"	d	file:
COMPILER_ID	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	24;"	d	file:
COMPILER_ID	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	32;"	d	file:
COMPILER_ID	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	38;"	d	file:
COMPILER_ID	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	44;"	d	file:
COMPILER_ID	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	50;"	d	file:
COMPILER_ID	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	56;"	d	file:
COMPILER_ID	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	70;"	d	file:
COMPILER_ID	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	77;"	d	file:
COMPILER_ID	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	85;"	d	file:
COMPILER_ID	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	88;"	d	file:
COMPILER_ID	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	90;"	d	file:
COMPILER_ID	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	99;"	d	file:
COMPILER_ID	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	104;"	d	file:
COMPILER_ID	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	112;"	d	file:
COMPILER_ID	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	117;"	d	file:
COMPILER_ID	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	124;"	d	file:
COMPILER_ID	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	127;"	d	file:
COMPILER_ID	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	12;"	d	file:
COMPILER_ID	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	135;"	d	file:
COMPILER_ID	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	154;"	d	file:
COMPILER_ID	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	162;"	d	file:
COMPILER_ID	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	167;"	d	file:
COMPILER_ID	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	170;"	d	file:
COMPILER_ID	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	187;"	d	file:
COMPILER_ID	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	18;"	d	file:
COMPILER_ID	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	190;"	d	file:
COMPILER_ID	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	193;"	d	file:
COMPILER_ID	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	29;"	d	file:
COMPILER_ID	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	37;"	d	file:
COMPILER_ID	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	43;"	d	file:
COMPILER_ID	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	49;"	d	file:
COMPILER_ID	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	55;"	d	file:
COMPILER_ID	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	61;"	d	file:
COMPILER_ID	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	75;"	d	file:
COMPILER_ID	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	82;"	d	file:
COMPILER_ID	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	90;"	d	file:
COMPILER_ID	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	93;"	d	file:
COMPILER_ID	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	95;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	100;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	108;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	114;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	126;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	135;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	154;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	15;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	172;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	180;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	185;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	25;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	33;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	39;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	46;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	52;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	59;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	64;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	72;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	79;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	93;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	105;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	113;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	119;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	128;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	137;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	14;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	156;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	173;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	178;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	20;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	30;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	38;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	44;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	51;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	57;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	64;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	69;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	77;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	84;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	98;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	101;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	109;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	115;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	127;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	136;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	155;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	16;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	173;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	181;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	186;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	26;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	34;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	40;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	47;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	53;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	60;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	65;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	73;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	80;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	94;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	106;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	114;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	120;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	129;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	138;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	157;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	15;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	174;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	179;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	21;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	31;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	39;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	45;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	52;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	58;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	65;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	70;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	78;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	85;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	99;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	103;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	116;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	129;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	140;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	143;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	156;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	174;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	17;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	182;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	187;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	28;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	35;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	41;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	61;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	66;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	74;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	81;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	95;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	100;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	108;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	121;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	131;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	142;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	145;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	158;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	175;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	180;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	22;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	33;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	40;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	46;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	66;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	71;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	79;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	86;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	147;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	20;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	149;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	25;"	d	file:
COSTMAP_2D_ARRAY_PARSER_H	include/costmap_2d/array_parser.h	2;"	d
COSTMAP_2D_COSTMAP_2D_H_	include/costmap_2d/costmap_2d.h	2;"	d
COSTMAP_2D_COSTMAP_2D_ROS_H_	include/costmap_2d/costmap_2d_ros.h	2;"	d
COSTMAP_2D_COSTMAP_LAYER_H_	include/costmap_2d/costmap_layer.h	2;"	d
COSTMAP_2D_COSTMAP_MATH_H_	include/costmap_2d/costmap_math.h	2;"	d
COSTMAP_2D_COST_VALUES_H_	include/costmap_2d/cost_values.h	2;"	d
COSTMAP_2D_FOOTPRINT_H	include/costmap_2d/footprint.h	2;"	d
COSTMAP_2D_INFLATION_LAYER_H_	include/costmap_2d/inflation_layer.h	2;"	d
COSTMAP_2D_LAYERED_COSTMAP_H_	include/costmap_2d/layered_costmap.h	2;"	d
COSTMAP_2D_LAYER_H_	include/costmap_2d/layer.h	2;"	d
COSTMAP_2D_OBSERVATION_BUFFER_H_	include/costmap_2d/observation_buffer.h	2;"	d
COSTMAP_2D_OBSERVATION_H_	include/costmap_2d/observation.h	2;"	d
COSTMAP_2D_OBSTACLE_LAYER_H_	include/costmap_2d/obstacle_layer.h	2;"	d
COSTMAP_2D_STATIC_LAYER_H_	include/costmap_2d/static_layer.h	2;"	d
COSTMAP_2D_TESTING_HELPER_H	include/costmap_2d/testing_helper.h	2;"	d
COSTMAP_SETTINGS_HPP	include/costmap_2d/costmap_settings.h	2;"	d
CPPFSignature	include/pcl/impl/point_types.hpp	/^  struct CPPFSignature$/;"	s	namespace:pcl
CS	include/pcl/common/norms.h	/^  enum NormType {L1, L2_SQR, L2, LINF, JM, B, SUBLINEAR, CS, DIV, PF, K, KL, HIK};$/;"	e	enum:pcl::NormType
CS_Norm	include/pcl/common/impl/norms.hpp	/^CS_Norm (FloatVectorT a, FloatVectorT b, int dim)$/;"	f	namespace:pcl
C_ADD	include/pcl/common/fft/_kiss_fft_guts.h	100;"	d
C_ADDTO	include/pcl/common/fft/_kiss_fft_guts.h	112;"	d
C_FIXDIV	include/pcl/common/fft/_kiss_fft_guts.h	76;"	d
C_FIXDIV	include/pcl/common/fft/_kiss_fft_guts.h	90;"	d
C_MUL	include/pcl/common/fft/_kiss_fft_guts.h	69;"	d
C_MUL	include/pcl/common/fft/_kiss_fft_guts.h	87;"	d
C_MULBYSCALAR	include/pcl/common/fft/_kiss_fft_guts.h	80;"	d
C_MULBYSCALAR	include/pcl/common/fft/_kiss_fft_guts.h	91;"	d
C_SUB	include/pcl/common/fft/_kiss_fft_guts.h	106;"	d
C_SUBFROM	include/pcl/common/fft/_kiss_fft_guts.h	119;"	d
CallbackFunction	include/pcl/common/synchronizer.h	/^    typedef boost::function<void(T1, T2, unsigned long, unsigned long) > CallbackFunction;$/;"	t	class:pcl::Synchronizer
CallbackHandle	include/pcl/io/openni2/openni2_device.h	/^          typedef unsigned CallbackHandle;$/;"	t	class:pcl::io::openni2::OpenNI2Device
CallbackHandle	include/pcl/io/openni_camera/openni_device.h	/^      typedef unsigned CallbackHandle;$/;"	t	class:openni_wrapper::OpenNIDevice
CameraParameters	include/pcl/io/lzf_image_io.h	/^    struct CameraParameters$/;"	s	namespace:pcl::io
CameraParameters	include/pcl/io/openni2_grabber.h	/^          CameraParameters (double fx, double fy, double cx, double cy)$/;"	f	struct:pcl::io::OpenNI2Grabber::CameraParameters
CameraParameters	include/pcl/io/openni2_grabber.h	/^          CameraParameters (double initValue)$/;"	f	struct:pcl::io::OpenNI2Grabber::CameraParameters
CameraParameters	include/pcl/io/openni2_grabber.h	/^        struct CameraParameters$/;"	s	class:pcl::io::OpenNI2Grabber
CapturedDevice	include/pcl/io/depth_sense/depth_sense_device_manager.h	/^          struct CapturedDevice$/;"	s	class:pcl::io::depth_sense::DepthSenseDeviceManager
CellData	include/costmap_2d/inflation_layer.h	/^  CellData(double d, double i, unsigned int x, unsigned int y, unsigned int sx, unsigned int sy) :$/;"	f	class:costmap_2d::CellData
CellData	include/costmap_2d/inflation_layer.h	/^class CellData$/;"	c	namespace:costmap_2d
CentroidPoint	include/pcl/common/centroid.h	/^      CentroidPoint ()$/;"	f	class:pcl::CentroidPoint
CentroidPoint	include/pcl/common/centroid.h	/^  class CentroidPoint$/;"	c	namespace:pcl
Clock	include/pcl/io/image.h	/^        typedef boost::chrono::high_resolution_clock Clock;$/;"	t	class:pcl::io::Image
Clock	include/pcl/io/image_depth.h	/^        typedef boost::chrono::high_resolution_clock Clock;$/;"	t	class:pcl::io::DepthImage
Clock	include/pcl/io/image_ir.h	/^        typedef boost::chrono::high_resolution_clock Clock;$/;"	t	class:pcl::io::IRImage
CloudGenerator	include/pcl/common/generate.h	/^    class CloudGenerator$/;"	c	namespace:pcl::common
CloudGenerator	include/pcl/common/generate.h	/^    class CloudGenerator<pcl::PointXY, GeneratorT>$/;"	c	namespace:pcl::common
CloudGenerator	include/pcl/common/impl/generate.hpp	/^pcl::common::CloudGenerator<PointT, GeneratorT>::CloudGenerator ()$/;"	f	class:pcl::common::CloudGenerator
CloudGenerator	include/pcl/common/impl/generate.hpp	/^pcl::common::CloudGenerator<PointT, GeneratorT>::CloudGenerator (const GeneratorParameters& params)$/;"	f	class:pcl::common::CloudGenerator
CloudGenerator	include/pcl/common/impl/generate.hpp	/^pcl::common::CloudGenerator<PointT, GeneratorT>::CloudGenerator (const GeneratorParameters& x_params,$/;"	f	class:pcl::common::CloudGenerator
CloudGenerator	include/pcl/common/impl/generate.hpp	/^pcl::common::CloudGenerator<pcl::PointXY, GeneratorT>::CloudGenerator ()$/;"	f	class:pcl::common::CloudGenerator
CloudGenerator	include/pcl/common/impl/generate.hpp	/^pcl::common::CloudGenerator<pcl::PointXY, GeneratorT>::CloudGenerator (const GeneratorParameters& params)$/;"	f	class:pcl::common::CloudGenerator
CloudGenerator	include/pcl/common/impl/generate.hpp	/^pcl::common::CloudGenerator<pcl::PointXY, GeneratorT>::CloudGenerator (const GeneratorParameters& x_params,$/;"	f	class:pcl::common::CloudGenerator
CloudIterator	include/pcl/cloud_iterator.h	/^  class CloudIterator$/;"	c	namespace:pcl
CloudIterator	include/pcl/impl/cloud_iterator.hpp	/^pcl::CloudIterator<PointT>::CloudIterator ($/;"	f	class:pcl::CloudIterator
CloudIterator	include/pcl/impl/cloud_iterator.hpp	/^pcl::CloudIterator<PointT>::CloudIterator (PointCloud<PointT>& cloud)$/;"	f	class:pcl::CloudIterator
CloudVectorType	include/pcl/point_cloud.h	/^      typedef std::vector<PointCloud<PointT>, Eigen::aligned_allocator<PointCloud<PointT> > > CloudVectorType;$/;"	t	class:pcl::PointCloud
ColorMode	include/pcl/io/point_cloud_image_extractors.h	/^        enum ColorMode$/;"	g	class:pcl::io::PointCloudImageExtractorFromLabelField
ComputeFailedException	include/pcl/exceptions.h	/^    ComputeFailedException (const std::string& error_description,$/;"	f	class:pcl::ComputeFailedException
ComputeFailedException	include/pcl/exceptions.h	/^  class ComputeFailedException : public PCLException$/;"	c	namespace:pcl
ConstCloudIterator	include/pcl/cloud_iterator.h	/^  class ConstCloudIterator$/;"	c	namespace:pcl
ConstCloudIterator	include/pcl/impl/cloud_iterator.hpp	/^pcl::ConstCloudIterator<PointT>::ConstCloudIterator ($/;"	f	class:pcl::ConstCloudIterator
ConstCloudIterator	include/pcl/impl/cloud_iterator.hpp	/^pcl::ConstCloudIterator<PointT>::ConstCloudIterator (const PointCloud<PointT>& cloud)$/;"	f	class:pcl::ConstCloudIterator
ConstIteratorIdx	include/pcl/impl/cloud_iterator.hpp	/^      ConstIteratorIdx (const PointCloud<PointT>& cloud,$/;"	f	class:pcl::ConstCloudIterator::ConstIteratorIdx
ConstIteratorIdx	include/pcl/impl/cloud_iterator.hpp	/^  class ConstCloudIterator<PointT>::ConstIteratorIdx : public ConstCloudIterator<PointT>::Iterator$/;"	c	class:pcl::ConstCloudIterator
ConstPtr	include/map_msgs/GetMapROIRequest.h	/^  typedef boost::shared_ptr< ::map_msgs::GetMapROIRequest_<ContainerAllocator> const> ConstPtr;$/;"	t	struct:map_msgs::GetMapROIRequest_
ConstPtr	include/map_msgs/GetMapROIResponse.h	/^  typedef boost::shared_ptr< ::map_msgs::GetMapROIResponse_<ContainerAllocator> const> ConstPtr;$/;"	t	struct:map_msgs::GetMapROIResponse_
ConstPtr	include/map_msgs/GetPointMapROIRequest.h	/^  typedef boost::shared_ptr< ::map_msgs::GetPointMapROIRequest_<ContainerAllocator> const> ConstPtr;$/;"	t	struct:map_msgs::GetPointMapROIRequest_
ConstPtr	include/map_msgs/GetPointMapROIResponse.h	/^  typedef boost::shared_ptr< ::map_msgs::GetPointMapROIResponse_<ContainerAllocator> const> ConstPtr;$/;"	t	struct:map_msgs::GetPointMapROIResponse_
ConstPtr	include/map_msgs/GetPointMapRequest.h	/^  typedef boost::shared_ptr< ::map_msgs::GetPointMapRequest_<ContainerAllocator> const> ConstPtr;$/;"	t	struct:map_msgs::GetPointMapRequest_
ConstPtr	include/map_msgs/GetPointMapResponse.h	/^  typedef boost::shared_ptr< ::map_msgs::GetPointMapResponse_<ContainerAllocator> const> ConstPtr;$/;"	t	struct:map_msgs::GetPointMapResponse_
ConstPtr	include/map_msgs/OccupancyGridUpdate.h	/^  typedef boost::shared_ptr< ::map_msgs::OccupancyGridUpdate_<ContainerAllocator> const> ConstPtr;$/;"	t	struct:map_msgs::OccupancyGridUpdate_
ConstPtr	include/map_msgs/PointCloud2Update.h	/^  typedef boost::shared_ptr< ::map_msgs::PointCloud2Update_<ContainerAllocator> const> ConstPtr;$/;"	t	struct:map_msgs::PointCloud2Update_
ConstPtr	include/map_msgs/ProjectedMap.h	/^  typedef boost::shared_ptr< ::map_msgs::ProjectedMap_<ContainerAllocator> const> ConstPtr;$/;"	t	struct:map_msgs::ProjectedMap_
ConstPtr	include/map_msgs/ProjectedMapInfo.h	/^  typedef boost::shared_ptr< ::map_msgs::ProjectedMapInfo_<ContainerAllocator> const> ConstPtr;$/;"	t	struct:map_msgs::ProjectedMapInfo_
ConstPtr	include/map_msgs/ProjectedMapsInfoRequest.h	/^  typedef boost::shared_ptr< ::map_msgs::ProjectedMapsInfoRequest_<ContainerAllocator> const> ConstPtr;$/;"	t	struct:map_msgs::ProjectedMapsInfoRequest_
ConstPtr	include/map_msgs/ProjectedMapsInfoResponse.h	/^  typedef boost::shared_ptr< ::map_msgs::ProjectedMapsInfoResponse_<ContainerAllocator> const> ConstPtr;$/;"	t	struct:map_msgs::ProjectedMapsInfoResponse_
ConstPtr	include/map_msgs/SaveMapRequest.h	/^  typedef boost::shared_ptr< ::map_msgs::SaveMapRequest_<ContainerAllocator> const> ConstPtr;$/;"	t	struct:map_msgs::SaveMapRequest_
ConstPtr	include/map_msgs/SaveMapResponse.h	/^  typedef boost::shared_ptr< ::map_msgs::SaveMapResponse_<ContainerAllocator> const> ConstPtr;$/;"	t	struct:map_msgs::SaveMapResponse_
ConstPtr	include/map_msgs/SetMapProjectionsRequest.h	/^  typedef boost::shared_ptr< ::map_msgs::SetMapProjectionsRequest_<ContainerAllocator> const> ConstPtr;$/;"	t	struct:map_msgs::SetMapProjectionsRequest_
ConstPtr	include/map_msgs/SetMapProjectionsResponse.h	/^  typedef boost::shared_ptr< ::map_msgs::SetMapProjectionsResponse_<ContainerAllocator> const> ConstPtr;$/;"	t	struct:map_msgs::SetMapProjectionsResponse_
ConstPtr	include/pcl/ModelCoefficients.h	/^    typedef boost::shared_ptr< ::pcl::ModelCoefficients  const> ConstPtr;$/;"	t	struct:pcl::ModelCoefficients
ConstPtr	include/pcl/PCLHeader.h	/^    typedef boost::shared_ptr<PCLHeader const> ConstPtr;$/;"	t	struct:pcl::PCLHeader
ConstPtr	include/pcl/PCLImage.h	/^    typedef boost::shared_ptr< ::pcl::PCLImage  const> ConstPtr;$/;"	t	struct:pcl::PCLImage
ConstPtr	include/pcl/PCLPointCloud2.h	/^    typedef boost::shared_ptr< ::pcl::PCLPointCloud2  const> ConstPtr;$/;"	t	struct:pcl::PCLPointCloud2
ConstPtr	include/pcl/PCLPointField.h	/^    typedef boost::shared_ptr< ::pcl::PCLPointField const> ConstPtr;$/;"	t	struct:pcl::PCLPointField
ConstPtr	include/pcl/PointIndices.h	/^      typedef boost::shared_ptr< ::pcl::PointIndices const> ConstPtr;$/;"	t	struct:pcl::PointIndices
ConstPtr	include/pcl/PolygonMesh.h	/^    typedef boost::shared_ptr< ::pcl::PolygonMesh const> ConstPtr;$/;"	t	struct:pcl::PolygonMesh
ConstPtr	include/pcl/TextureMesh.h	/^      typedef boost::shared_ptr<pcl::TextureMesh const> ConstPtr;$/;"	t	struct:pcl::TextureMesh
ConstPtr	include/pcl/Vertices.h	/^    typedef boost::shared_ptr<Vertices const> ConstPtr;$/;"	t	struct:pcl::Vertices
ConstPtr	include/pcl/io/davidsdk_grabber.h	/^      typedef boost::shared_ptr<const DavidSDKGrabber> ConstPtr;$/;"	t	class:pcl::DavidSDKGrabber
ConstPtr	include/pcl/io/ensenso_grabber.h	/^      typedef boost::shared_ptr<const EnsensoGrabber> ConstPtr;$/;"	t	class:pcl::EnsensoGrabber
ConstPtr	include/pcl/io/image.h	/^        typedef boost::shared_ptr<const Image> ConstPtr;$/;"	t	class:pcl::io::Image
ConstPtr	include/pcl/io/image_depth.h	/^        typedef boost::shared_ptr<const DepthImage> ConstPtr;$/;"	t	class:pcl::io::DepthImage
ConstPtr	include/pcl/io/image_ir.h	/^        typedef boost::shared_ptr<const IRImage> ConstPtr;$/;"	t	class:pcl::io::IRImage
ConstPtr	include/pcl/io/openni2_grabber.h	/^        typedef boost::shared_ptr<const OpenNI2Grabber> ConstPtr;$/;"	t	class:pcl::io::OpenNI2Grabber
ConstPtr	include/pcl/io/openni_camera/openni_depth_image.h	/^      typedef boost::shared_ptr<const DepthImage> ConstPtr;$/;"	t	class:openni_wrapper::DepthImage
ConstPtr	include/pcl/io/openni_camera/openni_image.h	/^    typedef boost::shared_ptr<const Image> ConstPtr;$/;"	t	class:openni_wrapper::Image
ConstPtr	include/pcl/io/openni_camera/openni_ir_image.h	/^  typedef boost::shared_ptr<const IRImage> ConstPtr;$/;"	t	class:openni_wrapper::IRImage
ConstPtr	include/pcl/io/openni_grabber.h	/^      typedef boost::shared_ptr<const OpenNIGrabber> ConstPtr;$/;"	t	class:pcl::OpenNIGrabber
ConstPtr	include/pcl/io/point_cloud_image_extractors.h	/^        typedef boost::shared_ptr<const PointCloudImageExtractor<PointT> > ConstPtr;$/;"	t	class:pcl::io::PointCloudImageExtractor
ConstPtr	include/pcl/io/point_cloud_image_extractors.h	/^        typedef boost::shared_ptr<const PointCloudImageExtractorFromCurvatureField<PointT> > ConstPtr;$/;"	t	class:pcl::io::PointCloudImageExtractorFromCurvatureField
ConstPtr	include/pcl/io/point_cloud_image_extractors.h	/^        typedef boost::shared_ptr<const PointCloudImageExtractorFromIntensityField<PointT> > ConstPtr;$/;"	t	class:pcl::io::PointCloudImageExtractorFromIntensityField
ConstPtr	include/pcl/io/point_cloud_image_extractors.h	/^        typedef boost::shared_ptr<const PointCloudImageExtractorFromLabelField<PointT> > ConstPtr;$/;"	t	class:pcl::io::PointCloudImageExtractorFromLabelField
ConstPtr	include/pcl/io/point_cloud_image_extractors.h	/^        typedef boost::shared_ptr<const PointCloudImageExtractorFromNormalField<PointT> > ConstPtr;$/;"	t	class:pcl::io::PointCloudImageExtractorFromNormalField
ConstPtr	include/pcl/io/point_cloud_image_extractors.h	/^        typedef boost::shared_ptr<const PointCloudImageExtractorFromRGBField<PointT> > ConstPtr;$/;"	t	class:pcl::io::PointCloudImageExtractorFromRGBField
ConstPtr	include/pcl/io/point_cloud_image_extractors.h	/^        typedef boost::shared_ptr<const PointCloudImageExtractorFromZField<PointT> > ConstPtr;$/;"	t	class:pcl::io::PointCloudImageExtractorFromZField
ConstPtr	include/pcl/io/point_cloud_image_extractors.h	/^        typedef boost::shared_ptr<const PointCloudImageExtractorWithScaling<PointT> > ConstPtr;$/;"	t	class:pcl::io::PointCloudImageExtractorWithScaling
ConstPtr	include/pcl/point_cloud.h	/^      typedef boost::shared_ptr<const PointCloud<PointT> > ConstPtr;$/;"	t	class:pcl::PointCloud
ConstPtr	include/pcl/point_representation.h	/^      typedef boost::shared_ptr<const CustomPointRepresentation<PointDefault> > ConstPtr;$/;"	t	class:pcl::CustomPointRepresentation
ConstPtr	include/pcl/point_representation.h	/^      typedef boost::shared_ptr<const DefaultPointRepresentation<PointDefault> > ConstPtr;$/;"	t	class:pcl::DefaultPointRepresentation
ConstPtr	include/pcl/point_representation.h	/^      typedef boost::shared_ptr<const PointRepresentation<PointT> > ConstPtr;$/;"	t	class:pcl::PointRepresentation
ConstPtr	include/pcl/point_representation.h	/^      typedef typename boost::shared_ptr<const DefaultFeatureRepresentation<PointDefault> > ConstPtr;$/;"	t	class:pcl::DefaultFeatureRepresentation
ConstPtr	include/pcl/range_image/range_image.h	/^      typedef boost::shared_ptr<const RangeImage> ConstPtr;$/;"	t	class:pcl::RangeImage
ConstPtr	include/pcl/range_image/range_image_planar.h	/^      typedef boost::shared_ptr<const RangeImagePlanar> ConstPtr;$/;"	t	class:pcl::RangeImagePlanar
ConstPtr	include/pcl/range_image/range_image_spherical.h	/^      typedef boost::shared_ptr<const RangeImageSpherical> ConstPtr;$/;"	t	class:pcl::RangeImageSpherical
CoordinateFrame	include/pcl/range_image/range_image.h	/^      enum CoordinateFrame$/;"	g	class:pcl::RangeImage
CopyIfFieldExists	include/pcl/point_traits.h	/^    CopyIfFieldExists (const PointInT &pt,$/;"	f	struct:pcl::CopyIfFieldExists
CopyIfFieldExists	include/pcl/point_traits.h	/^  struct CopyIfFieldExists$/;"	s	namespace:pcl
CopyPointHelper	include/pcl/common/impl/copy_point.hpp	/^    struct CopyPointHelper { };$/;"	s	namespace:pcl::detail
CopyPointHelper	include/pcl/common/impl/copy_point.hpp	/^    struct CopyPointHelper<PointInT, PointOutT, typename boost::enable_if<boost::is_same<PointInT, PointOutT> >::type>$/;"	s	namespace:pcl::detail
CopyPointHelper	include/pcl/common/impl/copy_point.hpp	/^    struct CopyPointHelper<PointInT, PointOutT,$/;"	s	namespace:pcl::detail
Correspondence	include/pcl/correspondence.h	/^    inline Correspondence () : index_query (0), index_match (-1), $/;"	f	struct:pcl::Correspondence
Correspondence	include/pcl/correspondence.h	/^    inline Correspondence (int _index_query, int _index_match, float _distance) : $/;"	f	struct:pcl::Correspondence
Correspondence	include/pcl/correspondence.h	/^  struct Correspondence$/;"	s	namespace:pcl
Correspondences	include/pcl/correspondence.h	/^  typedef std::vector< pcl::Correspondence, Eigen::aligned_allocator<pcl::Correspondence> > Correspondences;$/;"	t	namespace:pcl
CorrespondencesConstPtr	include/pcl/correspondence.h	/^  typedef boost::shared_ptr<const Correspondences > CorrespondencesConstPtr;$/;"	t	namespace:pcl
CorrespondencesPtr	include/pcl/correspondence.h	/^  typedef boost::shared_ptr<Correspondences> CorrespondencesPtr;$/;"	t	namespace:pcl
Costmap2D	include/costmap_2d/costmap_2d.h	/^class Costmap2D$/;"	c	namespace:costmap_2d
Costmap2D	src/costmap_2d.cpp	/^Costmap2D::Costmap2D() :$/;"	f	class:costmap_2d::Costmap2D
Costmap2D	src/costmap_2d.cpp	/^Costmap2D::Costmap2D(const Costmap2D& map) :$/;"	f	class:costmap_2d::Costmap2D
Costmap2D	src/costmap_2d.cpp	/^Costmap2D::Costmap2D(unsigned int cells_size_x, unsigned int cells_size_y, double resolution,$/;"	f	class:costmap_2d::Costmap2D
Costmap2DROS	include/costmap_2d/costmap_2d_ros.h	/^class Costmap2DROS$/;"	c	namespace:costmap_2d
Costmap2DROS	src/costmap_2d_ros.cpp	/^Costmap2DROS::Costmap2DROS(std::string name, bool isGlobalCostmap) :$/;"	f	class:costmap_2d::Costmap2DROS
CostmapLayer	include/costmap_2d/costmap_layer.h	/^  CostmapLayer() : has_extra_bounds_(false),$/;"	f	class:costmap_2d::CostmapLayer
CostmapLayer	include/costmap_2d/costmap_layer.h	/^class CostmapLayer : public Layer, public Costmap2D$/;"	c	namespace:costmap_2d
CustomPointRepresentation	include/pcl/point_representation.h	/^      CustomPointRepresentation (const int max_dim = 3, const int start_dim = 0)$/;"	f	class:pcl::CustomPointRepresentation
CustomPointRepresentation	include/pcl/point_representation.h	/^  class CustomPointRepresentation : public PointRepresentation <PointDefault>$/;"	c	namespace:pcl
DEC	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	324;"	d	file:
DEC	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	317;"	d	file:
DEG2RAD	include/pcl/pcl_macros.h	137;"	d
DELETE	include/map_msgs/PointCloud2Update.h	/^     enum { DELETE = 1u };$/;"	e	enum:map_msgs::PointCloud2Update_::__anon49
DIV	include/pcl/common/norms.h	/^  enum NormType {L1, L2_SQR, L2, LINF, JM, B, SUBLINEAR, CS, DIV, PF, K, KL, HIK};$/;"	e	enum:pcl::NormType
DIVSCALAR	include/pcl/common/fft/_kiss_fft_guts.h	73;"	d
DO_EVERY	include/pcl/common/time.h	230;"	d
DO_EVERY_TS	include/pcl/common/time.h	214;"	d
DataType	include/map_msgs/GetMapROI.h	/^struct DataType< ::map_msgs::GetMapROI > {$/;"	s	namespace:ros::service_traits
DataType	include/map_msgs/GetMapROI.h	/^struct DataType< ::map_msgs::GetMapROIRequest>$/;"	s	namespace:ros::service_traits
DataType	include/map_msgs/GetMapROI.h	/^struct DataType< ::map_msgs::GetMapROIResponse>$/;"	s	namespace:ros::service_traits
DataType	include/map_msgs/GetMapROIRequest.h	/^struct DataType< ::map_msgs::GetMapROIRequest_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
DataType	include/map_msgs/GetMapROIResponse.h	/^struct DataType< ::map_msgs::GetMapROIResponse_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
DataType	include/map_msgs/GetPointMap.h	/^struct DataType< ::map_msgs::GetPointMap > {$/;"	s	namespace:ros::service_traits
DataType	include/map_msgs/GetPointMap.h	/^struct DataType< ::map_msgs::GetPointMapRequest>$/;"	s	namespace:ros::service_traits
DataType	include/map_msgs/GetPointMap.h	/^struct DataType< ::map_msgs::GetPointMapResponse>$/;"	s	namespace:ros::service_traits
DataType	include/map_msgs/GetPointMapROI.h	/^struct DataType< ::map_msgs::GetPointMapROI > {$/;"	s	namespace:ros::service_traits
DataType	include/map_msgs/GetPointMapROI.h	/^struct DataType< ::map_msgs::GetPointMapROIRequest>$/;"	s	namespace:ros::service_traits
DataType	include/map_msgs/GetPointMapROI.h	/^struct DataType< ::map_msgs::GetPointMapROIResponse>$/;"	s	namespace:ros::service_traits
DataType	include/map_msgs/GetPointMapROIRequest.h	/^struct DataType< ::map_msgs::GetPointMapROIRequest_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
DataType	include/map_msgs/GetPointMapROIResponse.h	/^struct DataType< ::map_msgs::GetPointMapROIResponse_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
DataType	include/map_msgs/GetPointMapRequest.h	/^struct DataType< ::map_msgs::GetPointMapRequest_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
DataType	include/map_msgs/GetPointMapResponse.h	/^struct DataType< ::map_msgs::GetPointMapResponse_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
DataType	include/map_msgs/OccupancyGridUpdate.h	/^struct DataType< ::map_msgs::OccupancyGridUpdate_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
DataType	include/map_msgs/PointCloud2Update.h	/^struct DataType< ::map_msgs::PointCloud2Update_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
DataType	include/map_msgs/ProjectedMap.h	/^struct DataType< ::map_msgs::ProjectedMap_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
DataType	include/map_msgs/ProjectedMapInfo.h	/^struct DataType< ::map_msgs::ProjectedMapInfo_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
DataType	include/map_msgs/ProjectedMapsInfo.h	/^struct DataType< ::map_msgs::ProjectedMapsInfo > {$/;"	s	namespace:ros::service_traits
DataType	include/map_msgs/ProjectedMapsInfo.h	/^struct DataType< ::map_msgs::ProjectedMapsInfoRequest>$/;"	s	namespace:ros::service_traits
DataType	include/map_msgs/ProjectedMapsInfo.h	/^struct DataType< ::map_msgs::ProjectedMapsInfoResponse>$/;"	s	namespace:ros::service_traits
DataType	include/map_msgs/ProjectedMapsInfoRequest.h	/^struct DataType< ::map_msgs::ProjectedMapsInfoRequest_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
DataType	include/map_msgs/ProjectedMapsInfoResponse.h	/^struct DataType< ::map_msgs::ProjectedMapsInfoResponse_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
DataType	include/map_msgs/SaveMap.h	/^struct DataType< ::map_msgs::SaveMap > {$/;"	s	namespace:ros::service_traits
DataType	include/map_msgs/SaveMap.h	/^struct DataType< ::map_msgs::SaveMapRequest>$/;"	s	namespace:ros::service_traits
DataType	include/map_msgs/SaveMap.h	/^struct DataType< ::map_msgs::SaveMapResponse>$/;"	s	namespace:ros::service_traits
DataType	include/map_msgs/SaveMapRequest.h	/^struct DataType< ::map_msgs::SaveMapRequest_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
DataType	include/map_msgs/SaveMapResponse.h	/^struct DataType< ::map_msgs::SaveMapResponse_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
DataType	include/map_msgs/SetMapProjections.h	/^struct DataType< ::map_msgs::SetMapProjections > {$/;"	s	namespace:ros::service_traits
DataType	include/map_msgs/SetMapProjections.h	/^struct DataType< ::map_msgs::SetMapProjectionsRequest>$/;"	s	namespace:ros::service_traits
DataType	include/map_msgs/SetMapProjections.h	/^struct DataType< ::map_msgs::SetMapProjectionsResponse>$/;"	s	namespace:ros::service_traits
DataType	include/map_msgs/SetMapProjectionsRequest.h	/^struct DataType< ::map_msgs::SetMapProjectionsRequest_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
DataType	include/map_msgs/SetMapProjectionsResponse.h	/^struct DataType< ::map_msgs::SetMapProjectionsResponse_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
DavidSDKGrabber	include/pcl/io/davidsdk_grabber.h	/^  class PCL_EXPORTS DavidSDKGrabber : public Grabber$/;"	c	namespace:pcl
DeBayer	include/pcl/io/debayer.h	/^    class PCL_EXPORTS DeBayer$/;"	c	namespace:pcl::io
DebayeringMethod	include/pcl/io/openni_camera/openni_image_bayer_grbg.h	/^      } DebayeringMethod;$/;"	t	class:openni_wrapper::ImageBayerGRBG	typeref:enum:openni_wrapper::ImageBayerGRBG::__anon10
DefaultConstIterator	include/pcl/impl/cloud_iterator.hpp	/^      DefaultConstIterator (const PointCloud<PointT>& cloud)$/;"	f	class:pcl::ConstCloudIterator::DefaultConstIterator
DefaultConstIterator	include/pcl/impl/cloud_iterator.hpp	/^  class ConstCloudIterator<PointT>::DefaultConstIterator : public ConstCloudIterator<PointT>::Iterator$/;"	c	class:pcl::ConstCloudIterator
DefaultFeatureRepresentation	include/pcl/point_representation.h	/^      DefaultFeatureRepresentation ()$/;"	f	class:pcl::DefaultFeatureRepresentation
DefaultFeatureRepresentation	include/pcl/point_representation.h	/^  class DefaultFeatureRepresentation : public PointRepresentation <PointDefault>$/;"	c	namespace:pcl
DefaultIterator	include/pcl/impl/cloud_iterator.hpp	/^      DefaultIterator (PointCloud<PointT>& cloud)$/;"	f	class:pcl::DefaultIterator
DefaultIterator	include/pcl/impl/cloud_iterator.hpp	/^  class DefaultIterator : public CloudIterator<PointT>::Iterator$/;"	c	namespace:pcl
DefaultPointRepresentation	include/pcl/point_representation.h	/^      DefaultPointRepresentation ()$/;"	f	class:pcl::DefaultPointRepresentation
DefaultPointRepresentation	include/pcl/point_representation.h	/^  class DefaultPointRepresentation : public PointRepresentation <PointDefault>$/;"	c	namespace:pcl
DefaultPointRepresentation	include/pcl/point_representation.h	/^  class DefaultPointRepresentation <FPFHSignature33> : public DefaultFeatureRepresentation <FPFHSignature33>$/;"	c	namespace:pcl
DefaultPointRepresentation	include/pcl/point_representation.h	/^  class DefaultPointRepresentation <Narf36> : public PointRepresentation <Narf36>$/;"	c	namespace:pcl
DefaultPointRepresentation	include/pcl/point_representation.h	/^  class DefaultPointRepresentation <PFHRGBSignature250> : public DefaultFeatureRepresentation <PFHRGBSignature250>$/;"	c	namespace:pcl
DefaultPointRepresentation	include/pcl/point_representation.h	/^  class DefaultPointRepresentation <PFHSignature125> : public DefaultFeatureRepresentation <PFHSignature125>$/;"	c	namespace:pcl
DefaultPointRepresentation	include/pcl/point_representation.h	/^  class DefaultPointRepresentation <PPFSignature> : public DefaultFeatureRepresentation <PPFSignature>$/;"	c	namespace:pcl
DefaultPointRepresentation	include/pcl/point_representation.h	/^  class DefaultPointRepresentation <PointNormal> : public  PointRepresentation <PointNormal>$/;"	c	namespace:pcl
DefaultPointRepresentation	include/pcl/point_representation.h	/^  class DefaultPointRepresentation <PointXYZ> : public  PointRepresentation <PointXYZ>$/;"	c	namespace:pcl
DefaultPointRepresentation	include/pcl/point_representation.h	/^  class DefaultPointRepresentation <PointXYZI> : public  PointRepresentation <PointXYZI>$/;"	c	namespace:pcl
DefaultPointRepresentation	include/pcl/point_representation.h	/^  class DefaultPointRepresentation <VFHSignature308> : public DefaultFeatureRepresentation <VFHSignature308>$/;"	c	namespace:pcl
DefaultPointRepresentation	include/pcl/point_representation.h	/^  class DefaultPointRepresentation<NormalBasedSignature12> : public DefaultFeatureRepresentation <NormalBasedSignature12>$/;"	c	namespace:pcl
DefaultPointRepresentation	include/pcl/point_representation.h	/^  class DefaultPointRepresentation<SHOT1344> : public PointRepresentation<SHOT1344>$/;"	c	namespace:pcl
DefaultPointRepresentation	include/pcl/point_representation.h	/^  class DefaultPointRepresentation<SHOT352> : public PointRepresentation<SHOT352>$/;"	c	namespace:pcl
DefaultPointRepresentation	include/pcl/point_representation.h	/^  class DefaultPointRepresentation<ShapeContext1980> : public PointRepresentation<ShapeContext1980>$/;"	c	namespace:pcl
DefaultPointRepresentation	include/pcl/point_representation.h	/^  class DefaultPointRepresentation<UniqueShapeContext1960> : public PointRepresentation<UniqueShapeContext1960>$/;"	c	namespace:pcl
Definition	include/map_msgs/GetMapROIRequest.h	/^struct Definition< ::map_msgs::GetMapROIRequest_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
Definition	include/map_msgs/GetMapROIResponse.h	/^struct Definition< ::map_msgs::GetMapROIResponse_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
Definition	include/map_msgs/GetPointMapROIRequest.h	/^struct Definition< ::map_msgs::GetPointMapROIRequest_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
Definition	include/map_msgs/GetPointMapROIResponse.h	/^struct Definition< ::map_msgs::GetPointMapROIResponse_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
Definition	include/map_msgs/GetPointMapRequest.h	/^struct Definition< ::map_msgs::GetPointMapRequest_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
Definition	include/map_msgs/GetPointMapResponse.h	/^struct Definition< ::map_msgs::GetPointMapResponse_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
Definition	include/map_msgs/OccupancyGridUpdate.h	/^struct Definition< ::map_msgs::OccupancyGridUpdate_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
Definition	include/map_msgs/PointCloud2Update.h	/^struct Definition< ::map_msgs::PointCloud2Update_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
Definition	include/map_msgs/ProjectedMap.h	/^struct Definition< ::map_msgs::ProjectedMap_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
Definition	include/map_msgs/ProjectedMapInfo.h	/^struct Definition< ::map_msgs::ProjectedMapInfo_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
Definition	include/map_msgs/ProjectedMapsInfoRequest.h	/^struct Definition< ::map_msgs::ProjectedMapsInfoRequest_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
Definition	include/map_msgs/ProjectedMapsInfoResponse.h	/^struct Definition< ::map_msgs::ProjectedMapsInfoResponse_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
Definition	include/map_msgs/SaveMapRequest.h	/^struct Definition< ::map_msgs::SaveMapRequest_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
Definition	include/map_msgs/SaveMapResponse.h	/^struct Definition< ::map_msgs::SaveMapResponse_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
Definition	include/map_msgs/SetMapProjectionsRequest.h	/^struct Definition< ::map_msgs::SetMapProjectionsRequest_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
Definition	include/map_msgs/SetMapProjectionsResponse.h	/^struct Definition< ::map_msgs::SetMapProjectionsResponse_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
DepthImage	include/pcl/io/image_depth.h	/^    class PCL_EXPORTS DepthImage$/;"	c	namespace:pcl::io
DepthImage	include/pcl/io/openni2/openni2_device.h	/^      typedef pcl::io::DepthImage DepthImage;$/;"	t	namespace:pcl::io::openni2
DepthImage	include/pcl/io/openni2_grabber.h	/^        typedef pcl::io::DepthImage DepthImage;$/;"	t	class:pcl::io::OpenNI2Grabber
DepthImage	include/pcl/io/openni_camera/openni_depth_image.h	/^  DepthImage::DepthImage (boost::shared_ptr<xn::DepthMetaData> depth_meta_data, float baseline, float focal_length, XnUInt64 shadow_value, XnUInt64 no_sample_value) throw ()$/;"	f	class:openni_wrapper::DepthImage
DepthImage	include/pcl/io/openni_camera/openni_depth_image.h	/^  class PCL_EXPORTS DepthImage$/;"	c	namespace:openni_wrapper
DepthImageCallbackFunction	include/pcl/io/openni2/openni2_device.h	/^          typedef boost::function<void(boost::shared_ptr<DepthImage>, void* cookie) > DepthImageCallbackFunction;$/;"	t	class:pcl::io::openni2::OpenNI2Device
DepthImageCallbackFunction	include/pcl/io/openni_camera/openni_device.h	/^      typedef boost::function<void(boost::shared_ptr<DepthImage>, void* cookie) > DepthImageCallbackFunction;$/;"	t	class:openni_wrapper::OpenNIDevice
DepthMode	include/pcl/io/openni_camera/openni_device.h	/^      } DepthMode;$/;"	t	class:openni_wrapper::OpenNIDevice	typeref:enum:openni_wrapper::OpenNIDevice::__anon8
DepthSenseDeviceManager	include/pcl/io/depth_sense/depth_sense_device_manager.h	/^      class PCL_EXPORTS DepthSenseDeviceManager : boost::noncopyable$/;"	c	namespace:pcl::io::depth_sense
DepthSenseGrabber	include/pcl/io/depth_sense_grabber.h	/^  class PCL_EXPORTS DepthSenseGrabber : public Grabber$/;"	c	namespace:pcl
DepthSenseGrabberImpl	include/pcl/io/depth_sense/depth_sense_grabber_impl.h	/^      struct DepthSenseGrabberImpl$/;"	s	namespace:pcl::io::depth_sense
DepthSense_Average	include/pcl/io/depth_sense_grabber.h	/^        DepthSense_Average = 2,$/;"	e	enum:pcl::DepthSenseGrabber::TemporalFilteringType
DepthSense_Median	include/pcl/io/depth_sense_grabber.h	/^        DepthSense_Median = 1,$/;"	e	enum:pcl::DepthSenseGrabber::TemporalFilteringType
DepthSense_None	include/pcl/io/depth_sense_grabber.h	/^        DepthSense_None = 0,$/;"	e	enum:pcl::DepthSenseGrabber::TemporalFilteringType
DepthSense_QVGA_30Hz	include/pcl/io/depth_sense_grabber.h	/^        DepthSense_QVGA_30Hz = 0,$/;"	e	enum:pcl::DepthSenseGrabber::Mode
DeviceContext	include/pcl/io/openni_camera/openni_driver.h	/^    struct PCL_EXPORTS DeviceContext$/;"	s	class:openni_wrapper::OpenNIDriver
DeviceInfo	include/pcl/io/real_sense/real_sense_device_manager.h	/^          struct DeviceInfo$/;"	s	class:pcl::io::real_sense::RealSenseDeviceManager
DeviceKinect	include/pcl/io/openni_camera/openni_device_kinect.h	/^  class DeviceKinect : public OpenNIDevice$/;"	c	namespace:openni_wrapper
DeviceONI	include/pcl/io/openni_camera/openni_device_oni.h	/^  class DeviceONI : public OpenNIDevice$/;"	c	namespace:openni_wrapper
DevicePrimesense	include/pcl/io/openni_camera/openni_device_primesense.h	/^class DevicePrimesense : public OpenNIDevice$/;"	c	namespace:openni_wrapper
DeviceXtionPro	include/pcl/io/openni_camera/openni_device_xtion.h	/^  class DeviceXtionPro : public OpenNIDevice$/;"	c	namespace:openni_wrapper
DinastGrabber	include/pcl/io/dinast_grabber.h	/^  class PCL_EXPORTS DinastGrabber: public Grabber$/;"	c	namespace:pcl
DistributionType	include/pcl/common/random.h	/^        typedef typename normal_distribution<T>::type DistributionType;$/;"	t	class:pcl::common::NormalGenerator
DistributionType	include/pcl/common/random.h	/^        typedef typename uniform_distribution<T>::type DistributionType;$/;"	t	class:pcl::common::UniformGenerator
Div_Norm	include/pcl/common/impl/norms.hpp	/^Div_Norm (FloatVectorT a, FloatVectorT b, int dim)$/;"	f	namespace:pcl
EIGEN_ALIGN16	include/pcl/impl/point_types.hpp	/^  } EIGEN_ALIGN16;$/;"	m	namespace:pcl	typeref:struct:pcl::_PointXYZHSV
EQUALS	build/Makefile	/^EQUALS = =$/;"	m
ERASE_ARRAY	include/pcl/pcl_macros.h	227;"	d
ERASE_STRUCT	include/pcl/pcl_macros.h	223;"	d
ESFSignature640	include/pcl/impl/point_types.hpp	/^  struct ESFSignature640$/;"	s	namespace:pcl
EXPECT_EQ_VECTORS	include/pcl/pcl_tests.h	/^    void EXPECT_EQ_VECTORS (const V1& v1, const V2& v2)$/;"	f	namespace:pcl::test
EXPECT_NEAR_VECTORS	include/pcl/pcl_tests.h	/^    void EXPECT_NEAR_VECTORS (const V1& v1, const V2& v2, const Scalar& epsilon)$/;"	f	namespace:pcl::test
EXPECT_NORMAL_EQ	include/pcl/pcl_tests.h	223;"	d
EXPECT_NORMAL_NEAR	include/pcl/pcl_tests.h	236;"	d
EXPECT_RGBA_EQ	include/pcl/pcl_tests.h	261;"	d
EXPECT_RGB_EQ	include/pcl/pcl_tests.h	249;"	d
EXPECT_XYZ_EQ	include/pcl/pcl_tests.h	199;"	d
EXPECT_XYZ_NEAR	include/pcl/pcl_tests.h	211;"	d
EdgeAware	include/pcl/io/openni_camera/openni_image_bayer_grbg.h	/^        EdgeAware,$/;"	e	enum:openni_wrapper::ImageBayerGRBG::__anon10
EdgeAwareWeighted	include/pcl/io/openni_camera/openni_image_bayer_grbg.h	/^        EdgeAwareWeighted$/;"	e	enum:openni_wrapper::ImageBayerGRBG::__anon10
Encoding	include/pcl/io/image.h	/^        } Encoding;$/;"	t	class:pcl::io::Image	typeref:enum:pcl::io::Image::__anon15
Encoding	include/pcl/io/openni_camera/openni_image.h	/^    } Encoding;$/;"	t	class:openni_wrapper::Image	typeref:enum:openni_wrapper::Image::__anon9
EngineType	include/pcl/common/random.h	/^        typedef boost::mt19937 EngineType;$/;"	t	class:pcl::common::NormalGenerator
EngineType	include/pcl/common/random.h	/^        typedef boost::mt19937 EngineType;$/;"	t	class:pcl::common::UniformGenerator
EnsensoGrabber	include/pcl/io/ensenso_grabber.h	/^  class PCL_EXPORTS EnsensoGrabber : public Grabber$/;"	c	namespace:pcl
EventFrequency	include/pcl/common/time.h	/^      EventFrequency (size_t window_size = 30)$/;"	f	class:pcl::EventFrequency
EventFrequency	include/pcl/common/time.h	/^  class EventFrequency$/;"	c	namespace:pcl
FIXED	include/pcl/pcl_macros.h	219;"	d
FLAG	include/pcl/common/pca.h	/^      enum FLAG $/;"	g	class:pcl::PCA
FLOAT32	include/pcl/PCLPointField.h	/^                           FLOAT32 = 7,$/;"	e	enum:pcl::PCLPointField::PointFieldTypes
FLOAT64	include/pcl/PCLPointField.h	/^                           FLOAT64 = 8 };$/;"	e	enum:pcl::PCLPointField::PointFieldTypes
FPFHSignature33	include/pcl/impl/point_types.hpp	/^  struct FPFHSignature33$/;"	s	namespace:pcl
FRACBITS	include/pcl/common/fft/_kiss_fft_guts.h	46;"	d
FRACBITS	include/pcl/common/fft/_kiss_fft_guts.h	50;"	d
FRAMERATE	include/pcl/io/depth_sense/depth_sense_grabber_impl.h	/^        static const int FRAMERATE = 30;$/;"	m	struct:pcl::io::depth_sense::DepthSenseGrabberImpl
FREEBSD_MALLOC_ALIGNED	include/pcl/pcl_macros.h	371;"	d
FREEBSD_MALLOC_ALIGNED	include/pcl/pcl_macros.h	373;"	d
FREE_SPACE	include/costmap_2d/cost_values.h	/^static const unsigned char FREE_SPACE = 0;$/;"	m	namespace:costmap_2d
FeatureHistogram	include/pcl/common/feature_histogram.h	/^  class PCL_EXPORTS FeatureHistogram$/;"	c	namespace:pcl
FieldAdder	include/pcl/conversions.h	/^      FieldAdder (std::vector<pcl::PCLPointField>& fields) : fields_ (fields) {};$/;"	f	struct:pcl::detail::FieldAdder
FieldAdder	include/pcl/conversions.h	/^    struct FieldAdder$/;"	s	namespace:pcl::detail
FieldList	include/pcl/point_representation.h	/^      typedef typename pcl::traits::fieldList<PointDefault>::type FieldList;$/;"	t	class:pcl::DefaultFeatureRepresentation
FieldMapper	include/pcl/conversions.h	/^      FieldMapper (const std::vector<pcl::PCLPointField>& fields,$/;"	f	struct:pcl::detail::FieldMapper
FieldMapper	include/pcl/conversions.h	/^    struct FieldMapper$/;"	s	namespace:pcl::detail
FieldMapping	include/pcl/point_cloud.h	/^    struct FieldMapping$/;"	s	namespace:pcl::detail
FieldMatches	include/pcl/point_traits.h	/^  struct FieldMatches$/;"	s	namespace:pcl
FieldMatches	include/pcl/point_types.h	/^  struct FieldMatches<PointT, fields::rgb>$/;"	s	namespace:pcl
FieldMatches	include/pcl/point_types.h	/^  struct FieldMatches<PointT, fields::rgba>$/;"	s	namespace:pcl
FileGrabber	include/pcl/io/file_grabber.h	/^  class PCL_EXPORTS FileGrabber$/;"	c	namespace:pcl
FileReader	include/pcl/io/file_io.h	/^      FileReader() {}$/;"	f	class:pcl::FileReader
FileReader	include/pcl/io/file_io.h	/^  class PCL_EXPORTS FileReader$/;"	c	namespace:pcl
FileWriter	include/pcl/io/file_io.h	/^      FileWriter () {}$/;"	f	class:pcl::FileWriter
FileWriter	include/pcl/io/file_io.h	/^  class PCL_EXPORTS FileWriter$/;"	c	namespace:pcl
FotonicGrabber	include/pcl/io/fotonic_grabber.h	/^  class PCL_EXPORTS FotonicGrabber : public Grabber$/;"	c	namespace:pcl
Fotonic_Default_Mode	include/pcl/io/fotonic_grabber.h	/^        Fotonic_Default_Mode = 0, \/\/ This can depend on the device. For now all devices (PSDK, Xtion, Kinect) its VGA@30Hz$/;"	e	enum:pcl::FotonicGrabber::__anon16
FrameWrapper	include/pcl/io/image_metadata_wrapper.h	/^    class FrameWrapper$/;"	c	namespace:pcl::io
GFPFHSignature16	include/pcl/impl/point_types.hpp	/^  struct GFPFHSignature16$/;"	s	namespace:pcl
GLIBC_MALLOC_ALIGNED	include/pcl/pcl_macros.h	365;"	d
GLIBC_MALLOC_ALIGNED	include/pcl/pcl_macros.h	367;"	d
GRSDSignature21	include/pcl/impl/point_types.hpp	/^  struct GRSDSignature21$/;"	s	namespace:pcl
GaussianKernel	include/pcl/common/gaussian.h	/^      GaussianKernel () {}$/;"	f	class:pcl::GaussianKernel
GaussianKernel	include/pcl/common/gaussian.h	/^  class PCL_EXPORTS GaussianKernel$/;"	c	namespace:pcl
GeneratorParameters	include/pcl/common/generate.h	/^      typedef typename GeneratorT::Parameters GeneratorParameters;$/;"	t	class:pcl::common::CloudGenerator
GetMapROI	include/map_msgs/GetMapROI.h	/^struct GetMapROI$/;"	s	namespace:map_msgs
GetMapROIRequest	include/map_msgs/GetMapROIRequest.h	/^typedef ::map_msgs::GetMapROIRequest_<std::allocator<void> > GetMapROIRequest;$/;"	t	namespace:map_msgs
GetMapROIRequestConstPtr	include/map_msgs/GetMapROIRequest.h	/^typedef boost::shared_ptr< ::map_msgs::GetMapROIRequest const> GetMapROIRequestConstPtr;$/;"	t	namespace:map_msgs
GetMapROIRequestPtr	include/map_msgs/GetMapROIRequest.h	/^typedef boost::shared_ptr< ::map_msgs::GetMapROIRequest > GetMapROIRequestPtr;$/;"	t	namespace:map_msgs
GetMapROIRequest_	include/map_msgs/GetMapROIRequest.h	/^  GetMapROIRequest_()$/;"	f	struct:map_msgs::GetMapROIRequest_
GetMapROIRequest_	include/map_msgs/GetMapROIRequest.h	/^  GetMapROIRequest_(const ContainerAllocator& _alloc)$/;"	f	struct:map_msgs::GetMapROIRequest_
GetMapROIRequest_	include/map_msgs/GetMapROIRequest.h	/^struct GetMapROIRequest_$/;"	s	namespace:map_msgs
GetMapROIResponse	include/map_msgs/GetMapROIResponse.h	/^typedef ::map_msgs::GetMapROIResponse_<std::allocator<void> > GetMapROIResponse;$/;"	t	namespace:map_msgs
GetMapROIResponseConstPtr	include/map_msgs/GetMapROIResponse.h	/^typedef boost::shared_ptr< ::map_msgs::GetMapROIResponse const> GetMapROIResponseConstPtr;$/;"	t	namespace:map_msgs
GetMapROIResponsePtr	include/map_msgs/GetMapROIResponse.h	/^typedef boost::shared_ptr< ::map_msgs::GetMapROIResponse > GetMapROIResponsePtr;$/;"	t	namespace:map_msgs
GetMapROIResponse_	include/map_msgs/GetMapROIResponse.h	/^  GetMapROIResponse_()$/;"	f	struct:map_msgs::GetMapROIResponse_
GetMapROIResponse_	include/map_msgs/GetMapROIResponse.h	/^  GetMapROIResponse_(const ContainerAllocator& _alloc)$/;"	f	struct:map_msgs::GetMapROIResponse_
GetMapROIResponse_	include/map_msgs/GetMapROIResponse.h	/^struct GetMapROIResponse_$/;"	s	namespace:map_msgs
GetPoint	include/pcl/common/impl/accumulators.hpp	/^      GetPoint (PointT& point, size_t num) : p (point), n (num) { }$/;"	f	struct:pcl::detail::GetPoint
GetPoint	include/pcl/common/impl/accumulators.hpp	/^    struct GetPoint$/;"	s	namespace:pcl::detail
GetPointMap	include/map_msgs/GetPointMap.h	/^struct GetPointMap$/;"	s	namespace:map_msgs
GetPointMapROI	include/map_msgs/GetPointMapROI.h	/^struct GetPointMapROI$/;"	s	namespace:map_msgs
GetPointMapROIRequest	include/map_msgs/GetPointMapROIRequest.h	/^typedef ::map_msgs::GetPointMapROIRequest_<std::allocator<void> > GetPointMapROIRequest;$/;"	t	namespace:map_msgs
GetPointMapROIRequestConstPtr	include/map_msgs/GetPointMapROIRequest.h	/^typedef boost::shared_ptr< ::map_msgs::GetPointMapROIRequest const> GetPointMapROIRequestConstPtr;$/;"	t	namespace:map_msgs
GetPointMapROIRequestPtr	include/map_msgs/GetPointMapROIRequest.h	/^typedef boost::shared_ptr< ::map_msgs::GetPointMapROIRequest > GetPointMapROIRequestPtr;$/;"	t	namespace:map_msgs
GetPointMapROIRequest_	include/map_msgs/GetPointMapROIRequest.h	/^  GetPointMapROIRequest_()$/;"	f	struct:map_msgs::GetPointMapROIRequest_
GetPointMapROIRequest_	include/map_msgs/GetPointMapROIRequest.h	/^  GetPointMapROIRequest_(const ContainerAllocator& _alloc)$/;"	f	struct:map_msgs::GetPointMapROIRequest_
GetPointMapROIRequest_	include/map_msgs/GetPointMapROIRequest.h	/^struct GetPointMapROIRequest_$/;"	s	namespace:map_msgs
GetPointMapROIResponse	include/map_msgs/GetPointMapROIResponse.h	/^typedef ::map_msgs::GetPointMapROIResponse_<std::allocator<void> > GetPointMapROIResponse;$/;"	t	namespace:map_msgs
GetPointMapROIResponseConstPtr	include/map_msgs/GetPointMapROIResponse.h	/^typedef boost::shared_ptr< ::map_msgs::GetPointMapROIResponse const> GetPointMapROIResponseConstPtr;$/;"	t	namespace:map_msgs
GetPointMapROIResponsePtr	include/map_msgs/GetPointMapROIResponse.h	/^typedef boost::shared_ptr< ::map_msgs::GetPointMapROIResponse > GetPointMapROIResponsePtr;$/;"	t	namespace:map_msgs
GetPointMapROIResponse_	include/map_msgs/GetPointMapROIResponse.h	/^  GetPointMapROIResponse_()$/;"	f	struct:map_msgs::GetPointMapROIResponse_
GetPointMapROIResponse_	include/map_msgs/GetPointMapROIResponse.h	/^  GetPointMapROIResponse_(const ContainerAllocator& _alloc)$/;"	f	struct:map_msgs::GetPointMapROIResponse_
GetPointMapROIResponse_	include/map_msgs/GetPointMapROIResponse.h	/^struct GetPointMapROIResponse_$/;"	s	namespace:map_msgs
GetPointMapRequest	include/map_msgs/GetPointMapRequest.h	/^typedef ::map_msgs::GetPointMapRequest_<std::allocator<void> > GetPointMapRequest;$/;"	t	namespace:map_msgs
GetPointMapRequestConstPtr	include/map_msgs/GetPointMapRequest.h	/^typedef boost::shared_ptr< ::map_msgs::GetPointMapRequest const> GetPointMapRequestConstPtr;$/;"	t	namespace:map_msgs
GetPointMapRequestPtr	include/map_msgs/GetPointMapRequest.h	/^typedef boost::shared_ptr< ::map_msgs::GetPointMapRequest > GetPointMapRequestPtr;$/;"	t	namespace:map_msgs
GetPointMapRequest_	include/map_msgs/GetPointMapRequest.h	/^  GetPointMapRequest_()$/;"	f	struct:map_msgs::GetPointMapRequest_
GetPointMapRequest_	include/map_msgs/GetPointMapRequest.h	/^  GetPointMapRequest_(const ContainerAllocator& _alloc)$/;"	f	struct:map_msgs::GetPointMapRequest_
GetPointMapRequest_	include/map_msgs/GetPointMapRequest.h	/^struct GetPointMapRequest_$/;"	s	namespace:map_msgs
GetPointMapResponse	include/map_msgs/GetPointMapResponse.h	/^typedef ::map_msgs::GetPointMapResponse_<std::allocator<void> > GetPointMapResponse;$/;"	t	namespace:map_msgs
GetPointMapResponseConstPtr	include/map_msgs/GetPointMapResponse.h	/^typedef boost::shared_ptr< ::map_msgs::GetPointMapResponse const> GetPointMapResponseConstPtr;$/;"	t	namespace:map_msgs
GetPointMapResponsePtr	include/map_msgs/GetPointMapResponse.h	/^typedef boost::shared_ptr< ::map_msgs::GetPointMapResponse > GetPointMapResponsePtr;$/;"	t	namespace:map_msgs
GetPointMapResponse_	include/map_msgs/GetPointMapResponse.h	/^  GetPointMapResponse_()$/;"	f	struct:map_msgs::GetPointMapResponse_
GetPointMapResponse_	include/map_msgs/GetPointMapResponse.h	/^  GetPointMapResponse_(const ContainerAllocator& _alloc)$/;"	f	struct:map_msgs::GetPointMapResponse_
GetPointMapResponse_	include/map_msgs/GetPointMapResponse.h	/^struct GetPointMapResponse_$/;"	s	namespace:map_msgs
GlasbeyLUT	include/pcl/common/colors.h	/^  class PCL_EXPORTS GlasbeyLUT$/;"	c	namespace:pcl
Grabber	include/pcl/io/grabber.h	/^      Grabber () : signals_ (), connections_ (), shared_connections_ () {}$/;"	f	class:pcl::Grabber
Grabber	include/pcl/io/grabber.h	/^  class PCL_EXPORTS Grabber$/;"	c	namespace:pcl
HALF_OF	include/pcl/common/fft/_kiss_fft_guts.h	130;"	d
HALF_OF	include/pcl/common/fft/_kiss_fft_guts.h	134;"	d
HALF_OF	include/pcl/common/fft/_kiss_fft_guts.h	138;"	d
HAVE_MM_MALLOC	include/pcl/pcl_config.h	35;"	d
HAVE_OPENNI	include/pcl/pcl_config.h	17;"	d
HAVE_OPENNI	include/pcl/pcl_config.h	52;"	d
HAVE_OPENNI2	include/pcl/pcl_config.h	19;"	d
HAVE_OPENNI2	include/pcl/pcl_config.h	56;"	d
HAVE_PNG	include/pcl/pcl_config.h	43;"	d
HAVE_POSIX_MEMALIGN	include/pcl/pcl_config.h	34;"	d
HAVE_QHULL	include/pcl/pcl_config.h	21;"	d
HAVE_QHULL	include/pcl/pcl_config.h	60;"	d
HAVE_QHULL_2011	include/pcl/pcl_config.h	23;"	d
HAVE_SSE2_EXTENSIONS	include/pcl/pcl_config.h	40;"	d
HAVE_SSE3_EXTENSIONS	include/pcl/pcl_config.h	39;"	d
HAVE_SSE4_1_EXTENSIONS	include/pcl/pcl_config.h	37;"	d
HAVE_SSE4_2_EXTENSIONS	include/pcl/pcl_config.h	36;"	d
HAVE_SSE_EXTENSIONS	include/pcl/pcl_config.h	41;"	d
HAVE_SSSE3_EXTENSIONS	include/pcl/pcl_config.h	38;"	d
HDLBlock	include/pcl/io/hdl_grabber.h	/^      enum HDLBlock$/;"	g	class:pcl::HDLGrabber
HDLDataPacket	include/pcl/io/hdl_grabber.h	/^      struct HDLDataPacket$/;"	s	class:pcl::HDLGrabber
HDLFiringData	include/pcl/io/hdl_grabber.h	/^      struct HDLFiringData$/;"	s	class:pcl::HDLGrabber
HDLGrabber	include/pcl/io/hdl_grabber.h	/^  class PCL_EXPORTS HDLGrabber : public Grabber$/;"	c	namespace:pcl
HDLLaserCorrection	include/pcl/io/hdl_grabber.h	/^      struct HDLLaserCorrection$/;"	s	class:pcl::HDLGrabber
HDLLaserReturn	include/pcl/io/hdl_grabber.h	/^      typedef struct HDLLaserReturn$/;"	s	class:pcl::HDLGrabber
HDLLaserReturn	include/pcl/io/hdl_grabber.h	/^      } HDLLaserReturn;$/;"	t	class:pcl::HDLGrabber	typeref:struct:pcl::HDLGrabber::HDLLaserReturn
HDL_DATA_PORT	include/pcl/io/hdl_grabber.h	/^      static const int HDL_DATA_PORT = 2368;$/;"	m	class:pcl::HDLGrabber
HDL_FIRING_PER_PKT	include/pcl/io/hdl_grabber.h	/^      static const int HDL_FIRING_PER_PKT = 12;$/;"	m	class:pcl::HDLGrabber
HDL_Grabber_toRadians	include/pcl/io/hdl_grabber.h	51;"	d
HDL_LASER_PER_FIRING	include/pcl/io/hdl_grabber.h	/^      static const int HDL_LASER_PER_FIRING = 32;$/;"	m	class:pcl::HDLGrabber
HDL_MAX_NUM_LASERS	include/pcl/io/hdl_grabber.h	/^      static const int HDL_MAX_NUM_LASERS = 64;$/;"	m	class:pcl::HDLGrabber
HDL_NUM_ROT_ANGLES	include/pcl/io/hdl_grabber.h	/^      static const int HDL_NUM_ROT_ANGLES = 36001;$/;"	m	class:pcl::HDLGrabber
HEIGHT	include/pcl/io/depth_sense/depth_sense_grabber_impl.h	/^        static const int HEIGHT = 240;$/;"	m	struct:pcl::io::depth_sense::DepthSenseGrabberImpl
HEX	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	335;"	d	file:
HEX	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	328;"	d	file:
HIK	include/pcl/common/norms.h	/^  enum NormType {L1, L2_SQR, L2, LINF, JM, B, SUBLINEAR, CS, DIV, PF, K, KL, HIK};$/;"	e	enum:pcl::NormType
HIK_Norm	include/pcl/common/impl/norms.hpp	/^HIK_Norm(FloatVectorT a, FloatVectorT b, int dim)$/;"	f	namespace:pcl
HasHeader	include/map_msgs/GetMapROIRequest.h	/^struct HasHeader< ::map_msgs::GetMapROIRequest_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
HasHeader	include/map_msgs/GetMapROIRequest.h	/^struct HasHeader< ::map_msgs::GetMapROIRequest_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
HasHeader	include/map_msgs/GetMapROIResponse.h	/^struct HasHeader< ::map_msgs::GetMapROIResponse_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
HasHeader	include/map_msgs/GetMapROIResponse.h	/^struct HasHeader< ::map_msgs::GetMapROIResponse_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
HasHeader	include/map_msgs/GetPointMapROIRequest.h	/^struct HasHeader< ::map_msgs::GetPointMapROIRequest_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
HasHeader	include/map_msgs/GetPointMapROIRequest.h	/^struct HasHeader< ::map_msgs::GetPointMapROIRequest_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
HasHeader	include/map_msgs/GetPointMapROIResponse.h	/^struct HasHeader< ::map_msgs::GetPointMapROIResponse_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
HasHeader	include/map_msgs/GetPointMapROIResponse.h	/^struct HasHeader< ::map_msgs::GetPointMapROIResponse_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
HasHeader	include/map_msgs/GetPointMapRequest.h	/^struct HasHeader< ::map_msgs::GetPointMapRequest_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
HasHeader	include/map_msgs/GetPointMapRequest.h	/^struct HasHeader< ::map_msgs::GetPointMapRequest_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
HasHeader	include/map_msgs/GetPointMapResponse.h	/^struct HasHeader< ::map_msgs::GetPointMapResponse_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
HasHeader	include/map_msgs/GetPointMapResponse.h	/^struct HasHeader< ::map_msgs::GetPointMapResponse_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
HasHeader	include/map_msgs/OccupancyGridUpdate.h	/^struct HasHeader< ::map_msgs::OccupancyGridUpdate_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
HasHeader	include/map_msgs/OccupancyGridUpdate.h	/^struct HasHeader< ::map_msgs::OccupancyGridUpdate_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
HasHeader	include/map_msgs/PointCloud2Update.h	/^struct HasHeader< ::map_msgs::PointCloud2Update_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
HasHeader	include/map_msgs/PointCloud2Update.h	/^struct HasHeader< ::map_msgs::PointCloud2Update_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
HasHeader	include/map_msgs/ProjectedMap.h	/^struct HasHeader< ::map_msgs::ProjectedMap_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
HasHeader	include/map_msgs/ProjectedMap.h	/^struct HasHeader< ::map_msgs::ProjectedMap_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
HasHeader	include/map_msgs/ProjectedMapInfo.h	/^struct HasHeader< ::map_msgs::ProjectedMapInfo_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
HasHeader	include/map_msgs/ProjectedMapInfo.h	/^struct HasHeader< ::map_msgs::ProjectedMapInfo_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
HasHeader	include/map_msgs/ProjectedMapsInfoRequest.h	/^struct HasHeader< ::map_msgs::ProjectedMapsInfoRequest_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
HasHeader	include/map_msgs/ProjectedMapsInfoRequest.h	/^struct HasHeader< ::map_msgs::ProjectedMapsInfoRequest_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
HasHeader	include/map_msgs/ProjectedMapsInfoResponse.h	/^struct HasHeader< ::map_msgs::ProjectedMapsInfoResponse_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
HasHeader	include/map_msgs/ProjectedMapsInfoResponse.h	/^struct HasHeader< ::map_msgs::ProjectedMapsInfoResponse_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
HasHeader	include/map_msgs/SaveMapRequest.h	/^struct HasHeader< ::map_msgs::SaveMapRequest_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
HasHeader	include/map_msgs/SaveMapRequest.h	/^struct HasHeader< ::map_msgs::SaveMapRequest_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
HasHeader	include/map_msgs/SaveMapResponse.h	/^struct HasHeader< ::map_msgs::SaveMapResponse_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
HasHeader	include/map_msgs/SaveMapResponse.h	/^struct HasHeader< ::map_msgs::SaveMapResponse_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
HasHeader	include/map_msgs/SetMapProjectionsRequest.h	/^struct HasHeader< ::map_msgs::SetMapProjectionsRequest_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
HasHeader	include/map_msgs/SetMapProjectionsRequest.h	/^struct HasHeader< ::map_msgs::SetMapProjectionsRequest_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
HasHeader	include/map_msgs/SetMapProjectionsResponse.h	/^struct HasHeader< ::map_msgs::SetMapProjectionsResponse_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
HasHeader	include/map_msgs/SetMapProjectionsResponse.h	/^struct HasHeader< ::map_msgs::SetMapProjectionsResponse_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
HeaderConstPtr	include/pcl/PCLHeader.h	/^  typedef boost::shared_ptr<PCLHeader const> HeaderConstPtr;$/;"	t	namespace:pcl
HeaderPtr	include/pcl/PCLHeader.h	/^  typedef boost::shared_ptr<PCLHeader> HeaderPtr;$/;"	t	namespace:pcl
Helper	include/pcl/point_representation.h	/^      struct Helper$/;"	s	struct:pcl::DefaultFeatureRepresentation::NdCopyPointFunctor
Helper	include/pcl/point_representation.h	/^      struct Helper<Key, FieldT[NrDims], NrDims>$/;"	s	struct:pcl::DefaultFeatureRepresentation::NdCopyPointFunctor
Histogram	include/pcl/impl/point_types.hpp	/^  struct Histogram$/;"	s	namespace:pcl
ID_VOID_MAIN	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	9;"	d	file:
IFSReader	include/pcl/io/ifs_io.h	/^      IFSReader () {}$/;"	f	class:pcl::IFSReader
IFSReader	include/pcl/io/ifs_io.h	/^  class PCL_EXPORTS IFSReader$/;"	c	namespace:pcl
IFSWriter	include/pcl/io/ifs_io.h	/^      IFSWriter() {}$/;"	f	class:pcl::IFSWriter
IFSWriter	include/pcl/io/ifs_io.h	/^  class PCL_EXPORTS IFSWriter$/;"	c	namespace:pcl
IFS_V1_0	include/pcl/io/ifs_io.h	/^        IFS_V1_0 = 0,$/;"	e	enum:pcl::IFSReader::__anon12
IFS_V1_1	include/pcl/io/ifs_io.h	/^        IFS_V1_1 = 1$/;"	e	enum:pcl::IFSReader::__anon12
INSCRIBED_INFLATED_OBSTACLE	include/costmap_2d/cost_values.h	/^static const unsigned char INSCRIBED_INFLATED_OBSTACLE = 253;$/;"	m	namespace:costmap_2d
INT16	include/pcl/PCLPointField.h	/^                           INT16 = 3,$/;"	e	enum:pcl::PCLPointField::PointFieldTypes
INT32	include/pcl/PCLPointField.h	/^                           INT32 = 5,$/;"	e	enum:pcl::PCLPointField::PointFieldTypes
INT8	include/pcl/PCLPointField.h	/^    enum PointFieldTypes { INT8 = 1,$/;"	e	enum:pcl::PCLPointField::PointFieldTypes
IOException	include/pcl/exceptions.h	/^      IOException (const std::string& error_description,$/;"	f	class:pcl::IOException
IOException	include/pcl/exceptions.h	/^  class IOException : public PCLException$/;"	c	namespace:pcl
IOException	include/pcl/io/io_exception.h	/^    class IOException : public std::exception$/;"	c	namespace:pcl::io
IRImage	include/pcl/io/image_ir.h	/^    class PCL_EXPORTS IRImage$/;"	c	namespace:pcl::io
IRImage	include/pcl/io/openni2/openni2_device.h	/^      typedef pcl::io::IRImage IRImage;$/;"	t	namespace:pcl::io::openni2
IRImage	include/pcl/io/openni2_grabber.h	/^        typedef pcl::io::IRImage IRImage;$/;"	t	class:pcl::io::OpenNI2Grabber
IRImage	include/pcl/io/openni_camera/openni_ir_image.h	/^IRImage::IRImage (boost::shared_ptr<xn::IRMetaData> ir_meta_data) throw ()$/;"	f	class:openni_wrapper::IRImage
IRImage	include/pcl/io/openni_camera/openni_ir_image.h	/^class PCL_EXPORTS IRImage$/;"	c	namespace:openni_wrapper
IRImageCallbackFunction	include/pcl/io/openni2/openni2_device.h	/^          typedef boost::function<void(boost::shared_ptr<IRImage>, void* cookie) > IRImageCallbackFunction;$/;"	t	class:pcl::io::openni2::OpenNI2Device
IRImageCallbackFunction	include/pcl/io/openni_camera/openni_device.h	/^      typedef boost::function<void(boost::shared_ptr<IRImage>, void* cookie) > IRImageCallbackFunction;$/;"	t	class:openni_wrapper::OpenNIDevice
Image	include/pcl/io/image.h	/^        Image (FrameWrapper::Ptr image_metadata)$/;"	f	class:pcl::io::Image
Image	include/pcl/io/image.h	/^        Image (FrameWrapper::Ptr image_metadata, Timestamp time)$/;"	f	class:pcl::io::Image
Image	include/pcl/io/image.h	/^    class PCL_EXPORTS Image$/;"	c	namespace:pcl::io
Image	include/pcl/io/openni2/openni2_device.h	/^      typedef pcl::io::Image Image;$/;"	t	namespace:pcl::io::openni2
Image	include/pcl/io/openni2_grabber.h	/^        typedef pcl::io::Image Image;$/;"	t	class:pcl::io::OpenNI2Grabber
Image	include/pcl/io/openni_camera/openni_image.h	/^  Image::Image (boost::shared_ptr<xn::ImageMetaData> image_meta_data) throw ()$/;"	f	class:openni_wrapper::Image
Image	include/pcl/io/openni_camera/openni_image.h	/^  class PCL_EXPORTS Image$/;"	c	namespace:openni_wrapper
ImageBayerGRBG	include/pcl/io/openni_camera/openni_image_bayer_grbg.h	/^  class PCL_EXPORTS ImageBayerGRBG : public Image$/;"	c	namespace:openni_wrapper
ImageCallbackFunction	include/pcl/io/openni2/openni2_device.h	/^          typedef boost::function<void(boost::shared_ptr<Image>, void* cookie) > ImageCallbackFunction;$/;"	t	class:pcl::io::openni2::OpenNI2Device
ImageCallbackFunction	include/pcl/io/openni_camera/openni_device.h	/^      typedef boost::function<void(boost::shared_ptr<Image>, void* cookie) > ImageCallbackFunction;$/;"	t	class:openni_wrapper::OpenNIDevice
ImageGrabber	include/pcl/io/image_grabber.h	/^  ImageGrabber<PointT>::ImageGrabber (const std::string& depth_dir, $/;"	f	class:pcl::ImageGrabber
ImageGrabber	include/pcl/io/image_grabber.h	/^  ImageGrabber<PointT>::ImageGrabber (const std::string& dir, $/;"	f	class:pcl::ImageGrabber
ImageGrabber	include/pcl/io/image_grabber.h	/^  ImageGrabber<PointT>::ImageGrabber (const std::vector<std::string>& depth_image_files, $/;"	f	class:pcl::ImageGrabber
ImageGrabber	include/pcl/io/image_grabber.h	/^  template <typename PointT> class ImageGrabber : public ImageGrabberBase, public FileGrabber<PointT>$/;"	c	namespace:pcl
ImageGrabberBase	include/pcl/io/image_grabber.h	/^    ImageGrabberBase (const ImageGrabberBase &src) : Grabber (), impl_ ()$/;"	f	class:pcl::ImageGrabberBase
ImageGrabberBase	include/pcl/io/image_grabber.h	/^  class PCL_EXPORTS ImageGrabberBase : public Grabber$/;"	c	namespace:pcl
ImageRGB24	include/pcl/io/image_rgb24.h	/^    class PCL_EXPORTS ImageRGB24 : public pcl::io::Image$/;"	c	namespace:pcl::io
ImageRGB24	include/pcl/io/openni_camera/openni_image_rgb24.h	/^  class PCL_EXPORTS ImageRGB24 : public Image$/;"	c	namespace:openni_wrapper
ImageYUV422	include/pcl/io/image_yuv422.h	/^    class PCL_EXPORTS ImageYUV422 : public pcl::io::Image$/;"	c	namespace:pcl::io
ImageYUV422	include/pcl/io/openni_camera/openni_image_yuv_422.h	/^  class PCL_EXPORTS ImageYUV422 : public Image$/;"	c	namespace:openni_wrapper
IncrementFunctor	include/pcl/point_representation.h	/^        IncrementFunctor (int &n) : n_ (n)$/;"	f	struct:pcl::DefaultFeatureRepresentation::IncrementFunctor
IncrementFunctor	include/pcl/point_representation.h	/^      struct IncrementFunctor$/;"	s	class:pcl::DefaultFeatureRepresentation
IndicesConstPtr	include/pcl/pcl_base.h	/^  typedef boost::shared_ptr <const std::vector<int> > IndicesConstPtr;$/;"	t	namespace:pcl
IndicesPtr	include/pcl/pcl_base.h	/^  typedef boost::shared_ptr <std::vector<int> > IndicesPtr;$/;"	t	namespace:pcl
InflationLayer	include/costmap_2d/inflation_layer.h	/^class InflationLayer : public Layer$/;"	c	namespace:costmap_2d
InflationLayer	src/inflation_layer.cpp	/^InflationLayer::InflationLayer()$/;"	f	class:costmap_2d::InflationLayer
InitFailedException	include/pcl/exceptions.h	/^      InitFailedException (const std::string& error_description = "",$/;"	f	class:pcl::InitFailedException
InitFailedException	include/pcl/exceptions.h	/^  class InitFailedException : public PCLException$/;"	c	namespace:pcl
Intensity	include/pcl/impl/point_types.hpp	/^    inline Intensity ()$/;"	f	struct:pcl::Intensity
Intensity	include/pcl/impl/point_types.hpp	/^    inline Intensity (const _Intensity &p)$/;"	f	struct:pcl::Intensity
Intensity	include/pcl/impl/point_types.hpp	/^  struct Intensity: public _Intensity$/;"	s	namespace:pcl
Intensity32u	include/pcl/impl/point_types.hpp	/^    inline Intensity32u ()$/;"	f	struct:pcl::Intensity32u
Intensity32u	include/pcl/impl/point_types.hpp	/^    inline Intensity32u (const _Intensity32u &p)$/;"	f	struct:pcl::Intensity32u
Intensity32u	include/pcl/impl/point_types.hpp	/^  struct Intensity32u: public _Intensity32u$/;"	s	namespace:pcl
Intensity8u	include/pcl/impl/point_types.hpp	/^    inline Intensity8u ()$/;"	f	struct:pcl::Intensity8u
Intensity8u	include/pcl/impl/point_types.hpp	/^    inline Intensity8u (const _Intensity8u &p)$/;"	f	struct:pcl::Intensity8u
Intensity8u	include/pcl/impl/point_types.hpp	/^  struct Intensity8u: public _Intensity8u$/;"	s	namespace:pcl
IntensityFieldAccessor	include/pcl/common/impl/intensity.hpp	/^    struct IntensityFieldAccessor<pcl::InterestPoint>$/;"	s	namespace:pcl::common
IntensityFieldAccessor	include/pcl/common/impl/intensity.hpp	/^    struct IntensityFieldAccessor<pcl::PointNormal>$/;"	s	namespace:pcl::common
IntensityFieldAccessor	include/pcl/common/impl/intensity.hpp	/^    struct IntensityFieldAccessor<pcl::PointSurfel>$/;"	s	namespace:pcl::common
IntensityFieldAccessor	include/pcl/common/impl/intensity.hpp	/^    struct IntensityFieldAccessor<pcl::PointWithRange>$/;"	s	namespace:pcl::common
IntensityFieldAccessor	include/pcl/common/impl/intensity.hpp	/^    struct IntensityFieldAccessor<pcl::PointWithScale>$/;"	s	namespace:pcl::common
IntensityFieldAccessor	include/pcl/common/impl/intensity.hpp	/^    struct IntensityFieldAccessor<pcl::PointWithViewpoint>$/;"	s	namespace:pcl::common
IntensityFieldAccessor	include/pcl/common/impl/intensity.hpp	/^    struct IntensityFieldAccessor<pcl::PointXYZ>$/;"	s	namespace:pcl::common
IntensityFieldAccessor	include/pcl/common/impl/intensity.hpp	/^    struct IntensityFieldAccessor<pcl::PointXYZHSV>$/;"	s	namespace:pcl::common
IntensityFieldAccessor	include/pcl/common/impl/intensity.hpp	/^    struct IntensityFieldAccessor<pcl::PointXYZL>$/;"	s	namespace:pcl::common
IntensityFieldAccessor	include/pcl/common/impl/intensity.hpp	/^    struct IntensityFieldAccessor<pcl::PointXYZLNormal>$/;"	s	namespace:pcl::common
IntensityFieldAccessor	include/pcl/common/impl/intensity.hpp	/^    struct IntensityFieldAccessor<pcl::PointXYZRGB>$/;"	s	namespace:pcl::common
IntensityFieldAccessor	include/pcl/common/impl/intensity.hpp	/^    struct IntensityFieldAccessor<pcl::PointXYZRGBA>$/;"	s	namespace:pcl::common
IntensityFieldAccessor	include/pcl/common/impl/intensity.hpp	/^    struct IntensityFieldAccessor<pcl::PointXYZRGBL>$/;"	s	namespace:pcl::common
IntensityFieldAccessor	include/pcl/common/impl/intensity.hpp	/^    struct IntensityFieldAccessor<pcl::PointXYZRGBNormal>$/;"	s	namespace:pcl::common
IntensityFieldAccessor	include/pcl/common/intensity.h	/^    struct IntensityFieldAccessor$/;"	s	namespace:pcl::common
IntensityGradient	include/pcl/impl/point_types.hpp	/^  struct IntensityGradient$/;"	s	namespace:pcl
InterestPoint	include/pcl/impl/point_types.hpp	/^  struct EIGEN_ALIGN16 InterestPoint$/;"	s	namespace:pcl
InterpolationType	include/pcl/common/io.h	/^  } InterpolationType;$/;"	t	namespace:pcl	typeref:enum:pcl::__anon46
InvalidConversionException	include/pcl/exceptions.h	/^      InvalidConversionException (const std::string& error_description,$/;"	f	class:pcl::InvalidConversionException
InvalidConversionException	include/pcl/exceptions.h	/^  class InvalidConversionException : public PCLException$/;"	c	namespace:pcl
InvalidSACModelTypeException	include/pcl/exceptions.h	/^      InvalidSACModelTypeException (const std::string& error_description,$/;"	f	class:pcl::InvalidSACModelTypeException
InvalidSACModelTypeException	include/pcl/exceptions.h	/^  class InvalidSACModelTypeException : public PCLException$/;"	c	namespace:pcl
IsBetter	include/pcl/common/poses_from_matches.h	/^        struct IsBetter $/;"	s	struct:pcl::PosesFromMatches::PoseEstimate
IsCompatible	include/pcl/common/impl/accumulators.hpp	/^      struct IsCompatible : boost::mpl::apply<typename AccumulatorT::IsCompatible, PointT> { };$/;"	s	struct:pcl::detail::Accumulators
IsCompatible	include/pcl/common/impl/accumulators.hpp	/^      typedef pcl::traits::has_color<boost::mpl::_1> IsCompatible;$/;"	t	struct:pcl::detail::AccumulatorRGBA
IsCompatible	include/pcl/common/impl/accumulators.hpp	/^      typedef pcl::traits::has_curvature<boost::mpl::_1> IsCompatible;$/;"	t	struct:pcl::detail::AccumulatorCurvature
IsCompatible	include/pcl/common/impl/accumulators.hpp	/^      typedef pcl::traits::has_intensity<boost::mpl::_1> IsCompatible;$/;"	t	struct:pcl::detail::AccumulatorIntensity
IsCompatible	include/pcl/common/impl/accumulators.hpp	/^      typedef pcl::traits::has_label<boost::mpl::_1> IsCompatible;$/;"	t	struct:pcl::detail::AccumulatorLabel
IsCompatible	include/pcl/common/impl/accumulators.hpp	/^      typedef pcl::traits::has_normal<boost::mpl::_1> IsCompatible;$/;"	t	struct:pcl::detail::AccumulatorNormal
IsCompatible	include/pcl/common/impl/accumulators.hpp	/^      typedef pcl::traits::has_xyz<boost::mpl::_1> IsCompatible;$/;"	t	struct:pcl::detail::AccumulatorXYZ
IsFixedSize	include/map_msgs/GetMapROIRequest.h	/^struct IsFixedSize< ::map_msgs::GetMapROIRequest_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
IsFixedSize	include/map_msgs/GetMapROIRequest.h	/^struct IsFixedSize< ::map_msgs::GetMapROIRequest_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
IsFixedSize	include/map_msgs/GetMapROIResponse.h	/^struct IsFixedSize< ::map_msgs::GetMapROIResponse_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
IsFixedSize	include/map_msgs/GetMapROIResponse.h	/^struct IsFixedSize< ::map_msgs::GetMapROIResponse_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
IsFixedSize	include/map_msgs/GetPointMapROIRequest.h	/^struct IsFixedSize< ::map_msgs::GetPointMapROIRequest_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
IsFixedSize	include/map_msgs/GetPointMapROIRequest.h	/^struct IsFixedSize< ::map_msgs::GetPointMapROIRequest_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
IsFixedSize	include/map_msgs/GetPointMapROIResponse.h	/^struct IsFixedSize< ::map_msgs::GetPointMapROIResponse_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
IsFixedSize	include/map_msgs/GetPointMapROIResponse.h	/^struct IsFixedSize< ::map_msgs::GetPointMapROIResponse_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
IsFixedSize	include/map_msgs/GetPointMapRequest.h	/^struct IsFixedSize< ::map_msgs::GetPointMapRequest_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
IsFixedSize	include/map_msgs/GetPointMapRequest.h	/^struct IsFixedSize< ::map_msgs::GetPointMapRequest_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
IsFixedSize	include/map_msgs/GetPointMapResponse.h	/^struct IsFixedSize< ::map_msgs::GetPointMapResponse_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
IsFixedSize	include/map_msgs/GetPointMapResponse.h	/^struct IsFixedSize< ::map_msgs::GetPointMapResponse_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
IsFixedSize	include/map_msgs/OccupancyGridUpdate.h	/^struct IsFixedSize< ::map_msgs::OccupancyGridUpdate_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
IsFixedSize	include/map_msgs/OccupancyGridUpdate.h	/^struct IsFixedSize< ::map_msgs::OccupancyGridUpdate_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
IsFixedSize	include/map_msgs/PointCloud2Update.h	/^struct IsFixedSize< ::map_msgs::PointCloud2Update_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
IsFixedSize	include/map_msgs/PointCloud2Update.h	/^struct IsFixedSize< ::map_msgs::PointCloud2Update_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
IsFixedSize	include/map_msgs/ProjectedMap.h	/^struct IsFixedSize< ::map_msgs::ProjectedMap_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
IsFixedSize	include/map_msgs/ProjectedMap.h	/^struct IsFixedSize< ::map_msgs::ProjectedMap_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
IsFixedSize	include/map_msgs/ProjectedMapInfo.h	/^struct IsFixedSize< ::map_msgs::ProjectedMapInfo_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
IsFixedSize	include/map_msgs/ProjectedMapInfo.h	/^struct IsFixedSize< ::map_msgs::ProjectedMapInfo_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
IsFixedSize	include/map_msgs/ProjectedMapsInfoRequest.h	/^struct IsFixedSize< ::map_msgs::ProjectedMapsInfoRequest_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
IsFixedSize	include/map_msgs/ProjectedMapsInfoRequest.h	/^struct IsFixedSize< ::map_msgs::ProjectedMapsInfoRequest_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
IsFixedSize	include/map_msgs/ProjectedMapsInfoResponse.h	/^struct IsFixedSize< ::map_msgs::ProjectedMapsInfoResponse_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
IsFixedSize	include/map_msgs/ProjectedMapsInfoResponse.h	/^struct IsFixedSize< ::map_msgs::ProjectedMapsInfoResponse_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
IsFixedSize	include/map_msgs/SaveMapRequest.h	/^struct IsFixedSize< ::map_msgs::SaveMapRequest_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
IsFixedSize	include/map_msgs/SaveMapRequest.h	/^struct IsFixedSize< ::map_msgs::SaveMapRequest_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
IsFixedSize	include/map_msgs/SaveMapResponse.h	/^struct IsFixedSize< ::map_msgs::SaveMapResponse_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
IsFixedSize	include/map_msgs/SaveMapResponse.h	/^struct IsFixedSize< ::map_msgs::SaveMapResponse_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
IsFixedSize	include/map_msgs/SetMapProjectionsRequest.h	/^struct IsFixedSize< ::map_msgs::SetMapProjectionsRequest_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
IsFixedSize	include/map_msgs/SetMapProjectionsRequest.h	/^struct IsFixedSize< ::map_msgs::SetMapProjectionsRequest_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
IsFixedSize	include/map_msgs/SetMapProjectionsResponse.h	/^struct IsFixedSize< ::map_msgs::SetMapProjectionsResponse_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
IsFixedSize	include/map_msgs/SetMapProjectionsResponse.h	/^struct IsFixedSize< ::map_msgs::SetMapProjectionsResponse_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
IsMessage	include/map_msgs/GetMapROIRequest.h	/^struct IsMessage< ::map_msgs::GetMapROIRequest_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
IsMessage	include/map_msgs/GetMapROIRequest.h	/^struct IsMessage< ::map_msgs::GetMapROIRequest_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
IsMessage	include/map_msgs/GetMapROIResponse.h	/^struct IsMessage< ::map_msgs::GetMapROIResponse_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
IsMessage	include/map_msgs/GetMapROIResponse.h	/^struct IsMessage< ::map_msgs::GetMapROIResponse_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
IsMessage	include/map_msgs/GetPointMapROIRequest.h	/^struct IsMessage< ::map_msgs::GetPointMapROIRequest_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
IsMessage	include/map_msgs/GetPointMapROIRequest.h	/^struct IsMessage< ::map_msgs::GetPointMapROIRequest_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
IsMessage	include/map_msgs/GetPointMapROIResponse.h	/^struct IsMessage< ::map_msgs::GetPointMapROIResponse_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
IsMessage	include/map_msgs/GetPointMapROIResponse.h	/^struct IsMessage< ::map_msgs::GetPointMapROIResponse_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
IsMessage	include/map_msgs/GetPointMapRequest.h	/^struct IsMessage< ::map_msgs::GetPointMapRequest_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
IsMessage	include/map_msgs/GetPointMapRequest.h	/^struct IsMessage< ::map_msgs::GetPointMapRequest_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
IsMessage	include/map_msgs/GetPointMapResponse.h	/^struct IsMessage< ::map_msgs::GetPointMapResponse_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
IsMessage	include/map_msgs/GetPointMapResponse.h	/^struct IsMessage< ::map_msgs::GetPointMapResponse_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
IsMessage	include/map_msgs/OccupancyGridUpdate.h	/^struct IsMessage< ::map_msgs::OccupancyGridUpdate_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
IsMessage	include/map_msgs/OccupancyGridUpdate.h	/^struct IsMessage< ::map_msgs::OccupancyGridUpdate_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
IsMessage	include/map_msgs/PointCloud2Update.h	/^struct IsMessage< ::map_msgs::PointCloud2Update_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
IsMessage	include/map_msgs/PointCloud2Update.h	/^struct IsMessage< ::map_msgs::PointCloud2Update_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
IsMessage	include/map_msgs/ProjectedMap.h	/^struct IsMessage< ::map_msgs::ProjectedMap_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
IsMessage	include/map_msgs/ProjectedMap.h	/^struct IsMessage< ::map_msgs::ProjectedMap_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
IsMessage	include/map_msgs/ProjectedMapInfo.h	/^struct IsMessage< ::map_msgs::ProjectedMapInfo_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
IsMessage	include/map_msgs/ProjectedMapInfo.h	/^struct IsMessage< ::map_msgs::ProjectedMapInfo_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
IsMessage	include/map_msgs/ProjectedMapsInfoRequest.h	/^struct IsMessage< ::map_msgs::ProjectedMapsInfoRequest_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
IsMessage	include/map_msgs/ProjectedMapsInfoRequest.h	/^struct IsMessage< ::map_msgs::ProjectedMapsInfoRequest_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
IsMessage	include/map_msgs/ProjectedMapsInfoResponse.h	/^struct IsMessage< ::map_msgs::ProjectedMapsInfoResponse_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
IsMessage	include/map_msgs/ProjectedMapsInfoResponse.h	/^struct IsMessage< ::map_msgs::ProjectedMapsInfoResponse_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
IsMessage	include/map_msgs/SaveMapRequest.h	/^struct IsMessage< ::map_msgs::SaveMapRequest_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
IsMessage	include/map_msgs/SaveMapRequest.h	/^struct IsMessage< ::map_msgs::SaveMapRequest_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
IsMessage	include/map_msgs/SaveMapResponse.h	/^struct IsMessage< ::map_msgs::SaveMapResponse_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
IsMessage	include/map_msgs/SaveMapResponse.h	/^struct IsMessage< ::map_msgs::SaveMapResponse_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
IsMessage	include/map_msgs/SetMapProjectionsRequest.h	/^struct IsMessage< ::map_msgs::SetMapProjectionsRequest_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
IsMessage	include/map_msgs/SetMapProjectionsRequest.h	/^struct IsMessage< ::map_msgs::SetMapProjectionsRequest_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
IsMessage	include/map_msgs/SetMapProjectionsResponse.h	/^struct IsMessage< ::map_msgs::SetMapProjectionsResponse_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
IsMessage	include/map_msgs/SetMapProjectionsResponse.h	/^struct IsMessage< ::map_msgs::SetMapProjectionsResponse_<ContainerAllocator> const>$/;"	s	namespace:ros::message_traits
IsNotDenseException	include/pcl/exceptions.h	/^      IsNotDenseException (const std::string& error_description,$/;"	f	class:pcl::IsNotDenseException
IsNotDenseException	include/pcl/exceptions.h	/^  class IsNotDenseException : public PCLException$/;"	c	namespace:pcl
Iterator	include/pcl/cloud_iterator.h	/^      class Iterator$/;"	c	class:pcl::CloudIterator
Iterator	include/pcl/cloud_iterator.h	/^      class Iterator$/;"	c	class:pcl::ConstCloudIterator
IteratorIdx	include/pcl/impl/cloud_iterator.hpp	/^      IteratorIdx (PointCloud<PointT>& cloud, const PointIndices& indices)$/;"	f	class:pcl::IteratorIdx
IteratorIdx	include/pcl/impl/cloud_iterator.hpp	/^      IteratorIdx (PointCloud<PointT>& cloud, const std::vector<int>& indices)$/;"	f	class:pcl::IteratorIdx
IteratorIdx	include/pcl/impl/cloud_iterator.hpp	/^  class IteratorIdx : public CloudIterator<PointT>::Iterator$/;"	c	namespace:pcl
JM	include/pcl/common/norms.h	/^  enum NormType {L1, L2_SQR, L2, LINF, JM, B, SUBLINEAR, CS, DIV, PF, K, KL, HIK};$/;"	e	enum:pcl::NormType
JM_Norm	include/pcl/common/impl/norms.hpp	/^JM_Norm (FloatVectorT a, FloatVectorT b, int dim)$/;"	f	namespace:pcl
K	include/pcl/common/norms.h	/^  enum NormType {L1, L2_SQR, L2, LINF, JM, B, SUBLINEAR, CS, DIV, PF, K, KL, HIK};$/;"	e	enum:pcl::NormType
KISS_FFT_COS	include/pcl/common/fft/_kiss_fft_guts.h	128;"	d
KISS_FFT_COS	include/pcl/common/fft/_kiss_fft_guts.h	132;"	d
KISS_FFT_COS	include/pcl/common/fft/_kiss_fft_guts.h	136;"	d
KISS_FFT_FREE	include/pcl/common/fft/kiss_fft.h	36;"	d
KISS_FFT_FREE	include/pcl/common/fft/kiss_fft.h	39;"	d
KISS_FFT_H	include/pcl/common/fft/kiss_fft.h	2;"	d
KISS_FFT_MALLOC	include/pcl/common/fft/kiss_fft.h	35;"	d
KISS_FFT_MALLOC	include/pcl/common/fft/kiss_fft.h	38;"	d
KISS_FFT_SIN	include/pcl/common/fft/_kiss_fft_guts.h	129;"	d
KISS_FFT_SIN	include/pcl/common/fft/_kiss_fft_guts.h	133;"	d
KISS_FFT_SIN	include/pcl/common/fft/_kiss_fft_guts.h	137;"	d
KISS_FFT_TMP_ALLOC	include/pcl/common/fft/_kiss_fft_guts.h	159;"	d
KISS_FFT_TMP_ALLOC	include/pcl/common/fft/_kiss_fft_guts.h	162;"	d
KISS_FFT_TMP_FREE	include/pcl/common/fft/_kiss_fft_guts.h	160;"	d
KISS_FFT_TMP_FREE	include/pcl/common/fft/_kiss_fft_guts.h	163;"	d
KISS_FTR_H	include/pcl/common/fft/kiss_fftr.h	2;"	d
KL	include/pcl/common/norms.h	/^  enum NormType {L1, L2_SQR, L2, LINF, JM, B, SUBLINEAR, CS, DIV, PF, K, KL, HIK};$/;"	e	enum:pcl::NormType
KL_Norm	include/pcl/common/impl/norms.hpp	/^KL_Norm (FloatVectorT a, FloatVectorT b, int dim)$/;"	f	namespace:pcl
K_Norm	include/pcl/common/impl/norms.hpp	/^K_Norm (FloatVectorT a, FloatVectorT b, int dim, float P1, float P2)$/;"	f	namespace:pcl
KernelWidthTooSmallException	include/pcl/exceptions.h	/^    KernelWidthTooSmallException (const std::string& error_description,$/;"	f	class:pcl::KernelWidthTooSmallException
KernelWidthTooSmallException	include/pcl/exceptions.h	/^  class KernelWidthTooSmallException : public PCLException$/;"	c	namespace:pcl
L1	include/pcl/common/norms.h	/^  enum NormType {L1, L2_SQR, L2, LINF, JM, B, SUBLINEAR, CS, DIV, PF, K, KL, HIK};$/;"	e	enum:pcl::NormType
L1_Norm	include/pcl/common/impl/norms.hpp	/^L1_Norm (FloatVectorT a, FloatVectorT b, int dim)$/;"	f	namespace:pcl
L2	include/pcl/common/norms.h	/^  enum NormType {L1, L2_SQR, L2, LINF, JM, B, SUBLINEAR, CS, DIV, PF, K, KL, HIK};$/;"	e	enum:pcl::NormType
L2_Norm	include/pcl/common/impl/norms.hpp	/^L2_Norm (FloatVectorT a, FloatVectorT b, int dim)$/;"	f	namespace:pcl
L2_Norm_SQR	include/pcl/common/impl/norms.hpp	/^L2_Norm_SQR (FloatVectorT a, FloatVectorT b, int dim)$/;"	f	namespace:pcl
L2_SQR	include/pcl/common/norms.h	/^  enum NormType {L1, L2_SQR, L2, LINF, JM, B, SUBLINEAR, CS, DIV, PF, K, KL, HIK};$/;"	e	enum:pcl::NormType
LASER_FRAME	include/pcl/range_image/range_image.h	/^        LASER_FRAME  = 1$/;"	e	enum:pcl::RangeImage::CoordinateFrame
LETHAL_OBSTACLE	include/costmap_2d/cost_values.h	/^static const unsigned char LETHAL_OBSTACLE = 254;$/;"	m	namespace:costmap_2d
LINF	include/pcl/common/norms.h	/^  enum NormType {L1, L2_SQR, L2, LINF, JM, B, SUBLINEAR, CS, DIV, PF, K, KL, HIK};$/;"	e	enum:pcl::NormType
LZFBayer8ImageReader	include/pcl/io/lzf_image_io.h	/^        LZFBayer8ImageReader () : LZFRGB24ImageReader () {}$/;"	f	class:pcl::io::LZFBayer8ImageReader
LZFBayer8ImageReader	include/pcl/io/lzf_image_io.h	/^    class PCL_EXPORTS LZFBayer8ImageReader : public LZFRGB24ImageReader$/;"	c	namespace:pcl::io
LZFBayer8ImageWriter	include/pcl/io/lzf_image_io.h	/^        LZFBayer8ImageWriter () : LZFRGB24ImageWriter () {}$/;"	f	class:pcl::io::LZFBayer8ImageWriter
LZFBayer8ImageWriter	include/pcl/io/lzf_image_io.h	/^    class PCL_EXPORTS LZFBayer8ImageWriter : public LZFRGB24ImageWriter$/;"	c	namespace:pcl::io
LZFDepth16ImageReader	include/pcl/io/lzf_image_io.h	/^        LZFDepth16ImageReader () $/;"	f	class:pcl::io::LZFDepth16ImageReader
LZFDepth16ImageReader	include/pcl/io/lzf_image_io.h	/^    class PCL_EXPORTS LZFDepth16ImageReader : public LZFImageReader$/;"	c	namespace:pcl::io
LZFDepth16ImageWriter	include/pcl/io/lzf_image_io.h	/^        LZFDepth16ImageWriter () $/;"	f	class:pcl::io::LZFDepth16ImageWriter
LZFDepth16ImageWriter	include/pcl/io/lzf_image_io.h	/^    class PCL_EXPORTS LZFDepth16ImageWriter : public LZFImageWriter$/;"	c	namespace:pcl::io
LZFImageReader	include/pcl/io/lzf_image_io.h	/^    class PCL_EXPORTS LZFImageReader$/;"	c	namespace:pcl::io
LZFImageWriter	include/pcl/io/lzf_image_io.h	/^        LZFImageWriter () {}$/;"	f	class:pcl::io::LZFImageWriter
LZFImageWriter	include/pcl/io/lzf_image_io.h	/^    class PCL_EXPORTS LZFImageWriter$/;"	c	namespace:pcl::io
LZFRGB24ImageReader	include/pcl/io/lzf_image_io.h	/^        LZFRGB24ImageReader () : LZFImageReader () {}$/;"	f	class:pcl::io::LZFRGB24ImageReader
LZFRGB24ImageReader	include/pcl/io/lzf_image_io.h	/^    class PCL_EXPORTS LZFRGB24ImageReader : public LZFImageReader$/;"	c	namespace:pcl::io
LZFRGB24ImageWriter	include/pcl/io/lzf_image_io.h	/^        LZFRGB24ImageWriter () : LZFImageWriter () {}$/;"	f	class:pcl::io::LZFRGB24ImageWriter
LZFRGB24ImageWriter	include/pcl/io/lzf_image_io.h	/^    class PCL_EXPORTS LZFRGB24ImageWriter : public LZFImageWriter$/;"	c	namespace:pcl::io
LZFYUV422ImageReader	include/pcl/io/lzf_image_io.h	/^        LZFYUV422ImageReader () : LZFRGB24ImageReader () {}$/;"	f	class:pcl::io::LZFYUV422ImageReader
LZFYUV422ImageReader	include/pcl/io/lzf_image_io.h	/^    class PCL_EXPORTS LZFYUV422ImageReader : public LZFRGB24ImageReader$/;"	c	namespace:pcl::io
LZFYUV422ImageWriter	include/pcl/io/lzf_image_io.h	/^        LZFYUV422ImageWriter () : LZFRGB24ImageWriter () {}$/;"	f	class:pcl::io::LZFYUV422ImageWriter
LZFYUV422ImageWriter	include/pcl/io/lzf_image_io.h	/^    class PCL_EXPORTS LZFYUV422ImageWriter : public LZFRGB24ImageWriter$/;"	c	namespace:pcl::io
L_ALWAYS	include/pcl/console/print.h	/^      L_ALWAYS,$/;"	e	enum:pcl::console::VERBOSITY_LEVEL
L_DEBUG	include/pcl/console/print.h	/^      L_DEBUG,$/;"	e	enum:pcl::console::VERBOSITY_LEVEL
L_ERROR	include/pcl/console/print.h	/^      L_ERROR,$/;"	e	enum:pcl::console::VERBOSITY_LEVEL
L_INFO	include/pcl/console/print.h	/^      L_INFO,$/;"	e	enum:pcl::console::VERBOSITY_LEVEL
L_VERBOSE	include/pcl/console/print.h	/^      L_VERBOSE$/;"	e	enum:pcl::console::VERBOSITY_LEVEL
L_WARN	include/pcl/console/print.h	/^      L_WARN,$/;"	e	enum:pcl::console::VERBOSITY_LEVEL
Label	include/pcl/impl/point_types.hpp	/^  struct Label$/;"	s	namespace:pcl
Layer	include/costmap_2d/layer.h	/^class Layer$/;"	c	namespace:costmap_2d
Layer	src/layer.cpp	/^Layer::Layer()$/;"	f	class:costmap_2d::Layer
LayeredCostmap	include/costmap_2d/layered_costmap.h	/^class LayeredCostmap$/;"	c	namespace:costmap_2d
LayeredCostmap	src/layered_costmap.cpp	/^LayeredCostmap::LayeredCostmap(std::string global_frame, bool rolling_window, bool track_unknown) :$/;"	f	class:costmap_2d::LayeredCostmap
Linf_Norm	include/pcl/common/impl/norms.hpp	/^Linf_Norm (FloatVectorT a, FloatVectorT b, int dim)$/;"	f	namespace:pcl
MALLOC_ALIGNED	include/pcl/pcl_macros.h	377;"	d
MAP_IDX	include/costmap_2d/map_loader.h	12;"	d
MAP_LOADER_HPP	include/costmap_2d/map_loader.h	2;"	d
MAP_MSGS_MESSAGE_GETMAPROIREQUEST_H	include/map_msgs/GetMapROIRequest.h	6;"	d
MAP_MSGS_MESSAGE_GETMAPROIRESPONSE_H	include/map_msgs/GetMapROIResponse.h	6;"	d
MAP_MSGS_MESSAGE_GETMAPROI_H	include/map_msgs/GetMapROI.h	6;"	d
MAP_MSGS_MESSAGE_GETPOINTMAPREQUEST_H	include/map_msgs/GetPointMapRequest.h	6;"	d
MAP_MSGS_MESSAGE_GETPOINTMAPRESPONSE_H	include/map_msgs/GetPointMapResponse.h	6;"	d
MAP_MSGS_MESSAGE_GETPOINTMAPROIREQUEST_H	include/map_msgs/GetPointMapROIRequest.h	6;"	d
MAP_MSGS_MESSAGE_GETPOINTMAPROIRESPONSE_H	include/map_msgs/GetPointMapROIResponse.h	6;"	d
MAP_MSGS_MESSAGE_GETPOINTMAPROI_H	include/map_msgs/GetPointMapROI.h	6;"	d
MAP_MSGS_MESSAGE_GETPOINTMAP_H	include/map_msgs/GetPointMap.h	6;"	d
MAP_MSGS_MESSAGE_OCCUPANCYGRIDUPDATE_H	include/map_msgs/OccupancyGridUpdate.h	6;"	d
MAP_MSGS_MESSAGE_POINTCLOUD2UPDATE_H	include/map_msgs/PointCloud2Update.h	6;"	d
MAP_MSGS_MESSAGE_PROJECTEDMAPINFO_H	include/map_msgs/ProjectedMapInfo.h	6;"	d
MAP_MSGS_MESSAGE_PROJECTEDMAPSINFOREQUEST_H	include/map_msgs/ProjectedMapsInfoRequest.h	6;"	d
MAP_MSGS_MESSAGE_PROJECTEDMAPSINFORESPONSE_H	include/map_msgs/ProjectedMapsInfoResponse.h	6;"	d
MAP_MSGS_MESSAGE_PROJECTEDMAPSINFO_H	include/map_msgs/ProjectedMapsInfo.h	6;"	d
MAP_MSGS_MESSAGE_PROJECTEDMAP_H	include/map_msgs/ProjectedMap.h	6;"	d
MAP_MSGS_MESSAGE_SAVEMAPREQUEST_H	include/map_msgs/SaveMapRequest.h	6;"	d
MAP_MSGS_MESSAGE_SAVEMAPRESPONSE_H	include/map_msgs/SaveMapResponse.h	6;"	d
MAP_MSGS_MESSAGE_SAVEMAP_H	include/map_msgs/SaveMap.h	6;"	d
MAP_MSGS_MESSAGE_SETMAPPROJECTIONSREQUEST_H	include/map_msgs/SetMapProjectionsRequest.h	6;"	d
MAP_MSGS_MESSAGE_SETMAPPROJECTIONSRESPONSE_H	include/map_msgs/SetMapProjectionsResponse.h	6;"	d
MAP_MSGS_MESSAGE_SETMAPPROJECTIONS_H	include/map_msgs/SetMapProjections.h	6;"	d
MAXFACTORS	include/pcl/common/fft/_kiss_fft_guts.h	22;"	d
MAX_KERNEL_WIDTH	include/pcl/common/gaussian.h	/^      static const unsigned MAX_KERNEL_WIDTH = 71;$/;"	m	class:pcl::GaussianKernel
MAX_LENGTH	include/pcl/io/robot_eye_grabber.h	/^      enum { MAX_LENGTH = 65535 };$/;"	e	enum:pcl::RobotEyeGrabber::__anon4
MD5Sum	include/map_msgs/GetMapROI.h	/^struct MD5Sum< ::map_msgs::GetMapROI > {$/;"	s	namespace:ros::service_traits
MD5Sum	include/map_msgs/GetMapROI.h	/^struct MD5Sum< ::map_msgs::GetMapROIRequest>$/;"	s	namespace:ros::service_traits
MD5Sum	include/map_msgs/GetMapROI.h	/^struct MD5Sum< ::map_msgs::GetMapROIResponse>$/;"	s	namespace:ros::service_traits
MD5Sum	include/map_msgs/GetMapROIRequest.h	/^struct MD5Sum< ::map_msgs::GetMapROIRequest_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
MD5Sum	include/map_msgs/GetMapROIResponse.h	/^struct MD5Sum< ::map_msgs::GetMapROIResponse_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
MD5Sum	include/map_msgs/GetPointMap.h	/^struct MD5Sum< ::map_msgs::GetPointMap > {$/;"	s	namespace:ros::service_traits
MD5Sum	include/map_msgs/GetPointMap.h	/^struct MD5Sum< ::map_msgs::GetPointMapRequest>$/;"	s	namespace:ros::service_traits
MD5Sum	include/map_msgs/GetPointMap.h	/^struct MD5Sum< ::map_msgs::GetPointMapResponse>$/;"	s	namespace:ros::service_traits
MD5Sum	include/map_msgs/GetPointMapROI.h	/^struct MD5Sum< ::map_msgs::GetPointMapROI > {$/;"	s	namespace:ros::service_traits
MD5Sum	include/map_msgs/GetPointMapROI.h	/^struct MD5Sum< ::map_msgs::GetPointMapROIRequest>$/;"	s	namespace:ros::service_traits
MD5Sum	include/map_msgs/GetPointMapROI.h	/^struct MD5Sum< ::map_msgs::GetPointMapROIResponse>$/;"	s	namespace:ros::service_traits
MD5Sum	include/map_msgs/GetPointMapROIRequest.h	/^struct MD5Sum< ::map_msgs::GetPointMapROIRequest_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
MD5Sum	include/map_msgs/GetPointMapROIResponse.h	/^struct MD5Sum< ::map_msgs::GetPointMapROIResponse_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
MD5Sum	include/map_msgs/GetPointMapRequest.h	/^struct MD5Sum< ::map_msgs::GetPointMapRequest_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
MD5Sum	include/map_msgs/GetPointMapResponse.h	/^struct MD5Sum< ::map_msgs::GetPointMapResponse_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
MD5Sum	include/map_msgs/OccupancyGridUpdate.h	/^struct MD5Sum< ::map_msgs::OccupancyGridUpdate_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
MD5Sum	include/map_msgs/PointCloud2Update.h	/^struct MD5Sum< ::map_msgs::PointCloud2Update_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
MD5Sum	include/map_msgs/ProjectedMap.h	/^struct MD5Sum< ::map_msgs::ProjectedMap_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
MD5Sum	include/map_msgs/ProjectedMapInfo.h	/^struct MD5Sum< ::map_msgs::ProjectedMapInfo_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
MD5Sum	include/map_msgs/ProjectedMapsInfo.h	/^struct MD5Sum< ::map_msgs::ProjectedMapsInfo > {$/;"	s	namespace:ros::service_traits
MD5Sum	include/map_msgs/ProjectedMapsInfo.h	/^struct MD5Sum< ::map_msgs::ProjectedMapsInfoRequest>$/;"	s	namespace:ros::service_traits
MD5Sum	include/map_msgs/ProjectedMapsInfo.h	/^struct MD5Sum< ::map_msgs::ProjectedMapsInfoResponse>$/;"	s	namespace:ros::service_traits
MD5Sum	include/map_msgs/ProjectedMapsInfoRequest.h	/^struct MD5Sum< ::map_msgs::ProjectedMapsInfoRequest_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
MD5Sum	include/map_msgs/ProjectedMapsInfoResponse.h	/^struct MD5Sum< ::map_msgs::ProjectedMapsInfoResponse_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
MD5Sum	include/map_msgs/SaveMap.h	/^struct MD5Sum< ::map_msgs::SaveMap > {$/;"	s	namespace:ros::service_traits
MD5Sum	include/map_msgs/SaveMap.h	/^struct MD5Sum< ::map_msgs::SaveMapRequest>$/;"	s	namespace:ros::service_traits
MD5Sum	include/map_msgs/SaveMap.h	/^struct MD5Sum< ::map_msgs::SaveMapResponse>$/;"	s	namespace:ros::service_traits
MD5Sum	include/map_msgs/SaveMapRequest.h	/^struct MD5Sum< ::map_msgs::SaveMapRequest_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
MD5Sum	include/map_msgs/SaveMapResponse.h	/^struct MD5Sum< ::map_msgs::SaveMapResponse_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
MD5Sum	include/map_msgs/SetMapProjections.h	/^struct MD5Sum< ::map_msgs::SetMapProjections > {$/;"	s	namespace:ros::service_traits
MD5Sum	include/map_msgs/SetMapProjections.h	/^struct MD5Sum< ::map_msgs::SetMapProjectionsRequest>$/;"	s	namespace:ros::service_traits
MD5Sum	include/map_msgs/SetMapProjections.h	/^struct MD5Sum< ::map_msgs::SetMapProjectionsResponse>$/;"	s	namespace:ros::service_traits
MD5Sum	include/map_msgs/SetMapProjectionsRequest.h	/^struct MD5Sum< ::map_msgs::SetMapProjectionsRequest_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
MD5Sum	include/map_msgs/SetMapProjectionsResponse.h	/^struct MD5Sum< ::map_msgs::SetMapProjectionsResponse_<ContainerAllocator> >$/;"	s	namespace:ros::message_traits
MEASURE_FUNCTION_TIME	include/pcl/common/time.h	200;"	d
MTLReader	include/pcl/io/obj_io.h	/^  class PCL_EXPORTS MTLReader$/;"	c	namespace:pcl
M_PI	include/pcl/pcl_macros.h	81;"	d
M_PI_2	include/pcl/pcl_macros.h	82;"	d
M_PI_2l	include/pcl/pcl_macros.h	85;"	d
M_PI_4	include/pcl/pcl_macros.h	83;"	d
M_PI_4l	include/pcl/pcl_macros.h	86;"	d
M_PIl	include/pcl/pcl_macros.h	84;"	d
MapLoader	include/costmap_2d/map_loader.h	/^        MapLoader(std::string map_name, nav_msgs::OccupancyGrid& map)$/;"	f	class:costmap_2d::MapLoader
MapLoader	include/costmap_2d/map_loader.h	/^    class MapLoader$/;"	c	namespace:costmap_2d
MapLocation	include/costmap_2d/costmap_2d.h	/^struct MapLocation$/;"	s	namespace:costmap_2d
MarkCell	include/costmap_2d/costmap_2d.h	/^    MarkCell(unsigned char* costmap, unsigned char value) :$/;"	f	class:costmap_2d::Costmap2D::MarkCell
MarkCell	include/costmap_2d/costmap_2d.h	/^  class MarkCell$/;"	c	class:costmap_2d::Costmap2D
Matrix3x3	include/tf/LinearMath/Matrix3x3.h	/^	Matrix3x3 () {}$/;"	f	class:tf::Matrix3x3
Matrix3x3	include/tf/LinearMath/Matrix3x3.h	/^	Matrix3x3(const tfScalar& xx, const tfScalar& xy, const tfScalar& xz,$/;"	f	class:tf::Matrix3x3
Matrix3x3	include/tf/LinearMath/Matrix3x3.h	/^	TFSIMD_FORCE_INLINE Matrix3x3 (const Matrix3x3& other)$/;"	f	class:tf::Matrix3x3
Matrix3x3	include/tf/LinearMath/Matrix3x3.h	/^	explicit Matrix3x3(const Quaternion& q) { setRotation(q); }$/;"	f	class:tf::Matrix3x3
Matrix3x3	include/tf/LinearMath/Matrix3x3.h	/^class Matrix3x3 {$/;"	c	namespace:tf
Matrix3x3Data	include/tf/LinearMath/Matrix3x3.h	26;"	d
Matrix3x3DoubleData	include/tf/LinearMath/Matrix3x3.h	/^struct	Matrix3x3DoubleData$/;"	s	namespace:tf
Matrix3x3FloatData	include/tf/LinearMath/Matrix3x3.h	/^struct	Matrix3x3FloatData$/;"	s	namespace:tf
MedianBuffer	include/pcl/io/buffers.h	/^    class MedianBuffer : public Buffer<T>$/;"	c	namespace:pcl::io
MedianBuffer	include/pcl/io/impl/buffers.hpp	/^pcl::io::MedianBuffer<T>::MedianBuffer (size_t size,$/;"	f	class:pcl::io::MedianBuffer
Mode	include/pcl/io/depth_sense_grabber.h	/^      enum Mode$/;"	g	class:pcl::DepthSenseGrabber
Mode	include/pcl/io/fotonic_grabber.h	/^      } Mode;$/;"	t	class:pcl::FotonicGrabber	typeref:enum:pcl::FotonicGrabber::__anon16
Mode	include/pcl/io/openni2_grabber.h	/^        } Mode;$/;"	t	class:pcl::io::OpenNI2Grabber	typeref:enum:pcl::io::OpenNI2Grabber::__anon14
Mode	include/pcl/io/openni_grabber.h	/^      } Mode;$/;"	t	class:pcl::OpenNIGrabber	typeref:enum:pcl::OpenNIGrabber::__anon5
Mode	include/pcl/io/real_sense_grabber.h	/^      struct PCL_EXPORTS Mode$/;"	s	class:pcl::RealSenseGrabber
ModelCoefficients	include/pcl/ModelCoefficients.h	/^    ModelCoefficients () : header (), values ()$/;"	f	struct:pcl::ModelCoefficients
ModelCoefficients	include/pcl/ModelCoefficients.h	/^  struct ModelCoefficients$/;"	s	namespace:pcl
ModelCoefficientsConstPtr	include/pcl/ModelCoefficients.h	/^  typedef boost::shared_ptr< ::pcl::ModelCoefficients const> ModelCoefficientsConstPtr;$/;"	t	namespace:pcl
ModelCoefficientsPtr	include/pcl/ModelCoefficients.h	/^  typedef boost::shared_ptr< ::pcl::ModelCoefficients> ModelCoefficientsPtr;$/;"	t	namespace:pcl
MomentInvariants	include/pcl/impl/point_types.hpp	/^  struct MomentInvariants$/;"	s	namespace:pcl
MsgFieldMap	include/pcl/point_cloud.h	/^  typedef std::vector<detail::FieldMapping> MsgFieldMap;$/;"	t	namespace:pcl
NOMINMAX	include/pcl/common/eigen.h	46;"	d
NOMINMAX	include/pcl/io/impl/pcd_io.hpp	57;"	d
NOMINMAX	include/pcl/pcl_macros.h	91;"	d
NO_INFORMATION	include/costmap_2d/cost_values.h	/^static const unsigned char NO_INFORMATION = 255;$/;"	m	namespace:costmap_2d
Narf36	include/pcl/impl/point_types.hpp	/^  struct Narf36$/;"	s	namespace:pcl
NdCentroidFunctor	include/pcl/common/centroid.h	/^    NdCentroidFunctor (const PointT &p, Eigen::Matrix<Scalar, Eigen::Dynamic, 1> &centroid)$/;"	f	struct:pcl::NdCentroidFunctor
NdCentroidFunctor	include/pcl/common/centroid.h	/^  struct NdCentroidFunctor$/;"	s	namespace:pcl
NdConcatenateFunctor	include/pcl/common/concatenate.h	/^    NdConcatenateFunctor (const PointInT &p1, PointOutT &p2)$/;"	f	struct:pcl::NdConcatenateFunctor
NdConcatenateFunctor	include/pcl/common/concatenate.h	/^  struct NdConcatenateFunctor$/;"	s	namespace:pcl
NdCopyEigenPointFunctor	include/pcl/point_cloud.h	/^    NdCopyEigenPointFunctor (const Eigen::VectorXf &p1, PointOutT &p2)$/;"	f	struct:pcl::NdCopyEigenPointFunctor
NdCopyEigenPointFunctor	include/pcl/point_cloud.h	/^  struct NdCopyEigenPointFunctor$/;"	s	namespace:pcl
NdCopyPointEigenFunctor	include/pcl/point_cloud.h	/^     NdCopyPointEigenFunctor (const PointInT &p1, Eigen::VectorXf &p2)$/;"	f	struct:pcl::NdCopyPointEigenFunctor
NdCopyPointEigenFunctor	include/pcl/point_cloud.h	/^  struct NdCopyPointEigenFunctor$/;"	s	namespace:pcl
NdCopyPointFunctor	include/pcl/point_representation.h	/^      NdCopyPointFunctor (const PointDefault &p1, float * p2)$/;"	f	struct:pcl::DefaultFeatureRepresentation::NdCopyPointFunctor
NdCopyPointFunctor	include/pcl/point_representation.h	/^    struct NdCopyPointFunctor$/;"	s	class:pcl::DefaultFeatureRepresentation
NeighborWithDistance	include/pcl/range_image/impl/range_image.hpp	/^  struct NeighborWithDistance $/;"	s	namespace:pcl::__anon2
NormType	include/pcl/common/norms.h	/^  enum NormType {L1, L2_SQR, L2, LINF, JM, B, SUBLINEAR, CS, DIV, PF, K, KL, HIK};$/;"	g	namespace:pcl
Normal	include/pcl/impl/point_types.hpp	/^    inline Normal ()$/;"	f	struct:pcl::Normal
Normal	include/pcl/impl/point_types.hpp	/^    inline Normal (const _Normal &p)$/;"	f	struct:pcl::Normal
Normal	include/pcl/impl/point_types.hpp	/^    inline Normal (float n_x, float n_y, float n_z)$/;"	f	struct:pcl::Normal
Normal	include/pcl/impl/point_types.hpp	/^  struct Normal : public _Normal$/;"	s	namespace:pcl
NormalBasedSignature12	include/pcl/impl/point_types.hpp	/^  struct NormalBasedSignature12$/;"	s	namespace:pcl
NormalEQ	include/pcl/pcl_tests.h	/^      ::testing::AssertionResult NormalEQ (const char* expr1,$/;"	f	namespace:pcl::test::internal
NormalGenerator	include/pcl/common/impl/random.hpp	/^pcl::common::NormalGenerator<T>::NormalGenerator(T mean, T sigma, pcl::uint32_t seed)$/;"	f	class:pcl::common::NormalGenerator
NormalGenerator	include/pcl/common/impl/random.hpp	/^pcl::common::NormalGenerator<T>::NormalGenerator(const Parameters& parameters)$/;"	f	class:pcl::common::NormalGenerator
NormalGenerator	include/pcl/common/random.h	/^    class NormalGenerator $/;"	c	namespace:pcl::common
NormalNear	include/pcl/pcl_tests.h	/^      ::testing::AssertionResult NormalNear (const char* expr1,$/;"	f	namespace:pcl::test::internal
OBJReader	include/pcl/io/obj_io.h	/^      OBJReader() {}$/;"	f	class:pcl::OBJReader
OBJReader	include/pcl/io/obj_io.h	/^  class PCL_EXPORTS OBJReader : public FileReader$/;"	c	namespace:pcl
OBJ_IO_H_	include/pcl/io/obj_io.h	38;"	d
ONIGrabber	include/pcl/io/oni_grabber.h	/^  class PCL_EXPORTS ONIGrabber : public Grabber$/;"	c	namespace:pcl
OPENNI_OPENNI_H_	include/pcl/io/openni_camera/openni_driver.h	41;"	d
Observation	include/costmap_2d/observation.h	/^  Observation() :$/;"	f	class:costmap_2d::Observation
Observation	include/costmap_2d/observation.h	/^  Observation(const Observation& obs) :$/;"	f	class:costmap_2d::Observation
Observation	include/costmap_2d/observation.h	/^  Observation(geometry_msgs::Point& origin, pcl::PointCloud<pcl::PointXYZ> cloud,$/;"	f	class:costmap_2d::Observation
Observation	include/costmap_2d/observation.h	/^  Observation(pcl::PointCloud<pcl::PointXYZ> cloud, double obstacle_range) :$/;"	f	class:costmap_2d::Observation
Observation	include/costmap_2d/observation.h	/^class Observation$/;"	c	namespace:costmap_2d
ObservationBuffer	include/costmap_2d/observation_buffer.h	/^class ObservationBuffer$/;"	c	namespace:costmap_2d
ObservationBuffer	src/observation_buffer.cpp	/^ObservationBuffer::ObservationBuffer(string topic_name, double observation_keep_time, double expected_update_rate,$/;"	f	class:costmap_2d::ObservationBuffer
ObstacleLayer	include/costmap_2d/obstacle_layer.h	/^  ObstacleLayer()$/;"	f	class:costmap_2d::ObstacleLayer
ObstacleLayer	include/costmap_2d/obstacle_layer.h	/^class ObstacleLayer : public CostmapLayer$/;"	c	namespace:costmap_2d
OccupancyGridUpdate	include/map_msgs/OccupancyGridUpdate.h	/^typedef ::map_msgs::OccupancyGridUpdate_<std::allocator<void> > OccupancyGridUpdate;$/;"	t	namespace:map_msgs
OccupancyGridUpdateConstPtr	include/map_msgs/OccupancyGridUpdate.h	/^typedef boost::shared_ptr< ::map_msgs::OccupancyGridUpdate const> OccupancyGridUpdateConstPtr;$/;"	t	namespace:map_msgs
OccupancyGridUpdatePtr	include/map_msgs/OccupancyGridUpdate.h	/^typedef boost::shared_ptr< ::map_msgs::OccupancyGridUpdate > OccupancyGridUpdatePtr;$/;"	t	namespace:map_msgs
OccupancyGridUpdate_	include/map_msgs/OccupancyGridUpdate.h	/^  OccupancyGridUpdate_()$/;"	f	struct:map_msgs::OccupancyGridUpdate_
OccupancyGridUpdate_	include/map_msgs/OccupancyGridUpdate.h	/^  OccupancyGridUpdate_(const ContainerAllocator& _alloc)$/;"	f	struct:map_msgs::OccupancyGridUpdate_
OccupancyGridUpdate_	include/map_msgs/OccupancyGridUpdate.h	/^struct OccupancyGridUpdate_$/;"	s	namespace:map_msgs
OpenNI2Device	include/pcl/io/openni2/openni2_device.h	/^      class PCL_EXPORTS OpenNI2Device$/;"	c	namespace:pcl::io::openni2
OpenNI2DeviceInfo	include/pcl/io/openni2/openni2_device_info.h	/^      struct OpenNI2DeviceInfo$/;"	s	namespace:pcl::io::openni2
OpenNI2DeviceManager	include/pcl/io/openni2/openni2_device_manager.h	/^      class PCL_EXPORTS OpenNI2DeviceManager$/;"	c	namespace:pcl::io::openni2
OpenNI2FrameListener	include/pcl/io/openni2/openni2_frame_listener.h	/^          OpenNI2FrameListener ()$/;"	f	class:pcl::io::openni2::OpenNI2FrameListener
OpenNI2FrameListener	include/pcl/io/openni2/openni2_frame_listener.h	/^          OpenNI2FrameListener (StreamCallbackFunction cb)$/;"	f	class:pcl::io::openni2::OpenNI2FrameListener
OpenNI2FrameListener	include/pcl/io/openni2/openni2_frame_listener.h	/^      class OpenNI2FrameListener : public openni::VideoStream::NewFrameListener$/;"	c	namespace:pcl::io::openni2
OpenNI2Grabber	include/pcl/io/openni2_grabber.h	/^    class PCL_EXPORTS OpenNI2Grabber : public Grabber$/;"	c	namespace:pcl::io
OpenNI2TimerFilter	include/pcl/io/openni2/openni2_timer_filter.h	/^      class OpenNI2TimerFilter$/;"	c	namespace:pcl::io::openni2
OpenNI2VideoMode	include/pcl/io/openni2/openni2_video_mode.h	/^        OpenNI2VideoMode ()$/;"	f	struct:pcl::io::openni2::OpenNI2VideoMode
OpenNI2VideoMode	include/pcl/io/openni2/openni2_video_mode.h	/^        OpenNI2VideoMode (int xResolution, int yResolution, int frameRate)$/;"	f	struct:pcl::io::openni2::OpenNI2VideoMode
OpenNI2VideoMode	include/pcl/io/openni2/openni2_video_mode.h	/^      struct OpenNI2VideoMode$/;"	s	namespace:pcl::io::openni2
OpenNIDevice	include/pcl/io/openni_camera/openni_device.h	/^  class PCL_EXPORTS OpenNIDevice$/;"	c	namespace:openni_wrapper
OpenNIDriver	include/pcl/io/openni_camera/openni_driver.h	/^  class PCL_EXPORTS OpenNIDriver$/;"	c	namespace:openni_wrapper
OpenNIException	include/pcl/io/openni_camera/openni_exception.h	/^  class OpenNIException : public std::exception$/;"	c	namespace:openni_wrapper
OpenNIGrabber	include/pcl/io/openni_grabber.h	/^  class PCL_EXPORTS OpenNIGrabber : public Grabber$/;"	c	namespace:pcl
OpenNI_12_bit_depth	include/pcl/io/openni_camera/openni_device.h	/^        OpenNI_12_bit_depth = 1, \/\/ Default mode: regular 12-bit depth$/;"	e	enum:openni_wrapper::OpenNIDevice::__anon8
OpenNI_Default_Mode	include/pcl/io/openni2_grabber.h	/^          OpenNI_Default_Mode = 0, \/\/ This can depend on the device. For now all devices (PSDK, Xtion, Kinect) its VGA@30Hz$/;"	e	enum:pcl::io::OpenNI2Grabber::__anon14
OpenNI_Default_Mode	include/pcl/io/openni_grabber.h	/^        OpenNI_Default_Mode = 0, \/\/ This can depend on the device. For now all devices (PSDK, Xtion, Kinect) its VGA@30Hz$/;"	e	enum:pcl::OpenNIGrabber::__anon5
OpenNI_QQVGA_25Hz	include/pcl/io/openni2_grabber.h	/^          OpenNI_QQVGA_25Hz = 7,   \/\/ Not supported -> using software downsampling (only for integer scale factor and only NN)$/;"	e	enum:pcl::io::OpenNI2Grabber::__anon14
OpenNI_QQVGA_25Hz	include/pcl/io/openni_grabber.h	/^        OpenNI_QQVGA_25Hz = 7,   \/\/ Not supported -> using software downsampling (only for integer scale factor and only NN)$/;"	e	enum:pcl::OpenNIGrabber::__anon5
OpenNI_QQVGA_30Hz	include/pcl/io/openni2_grabber.h	/^          OpenNI_QQVGA_30Hz = 8,   \/\/ Not supported -> using software downsampling (only for integer scale factor and only NN)$/;"	e	enum:pcl::io::OpenNI2Grabber::__anon14
OpenNI_QQVGA_30Hz	include/pcl/io/openni_grabber.h	/^        OpenNI_QQVGA_30Hz = 8,   \/\/ Not supported -> using software downsampling (only for integer scale factor and only NN)$/;"	e	enum:pcl::OpenNIGrabber::__anon5
OpenNI_QQVGA_60Hz	include/pcl/io/openni2_grabber.h	/^          OpenNI_QQVGA_60Hz = 9    \/\/ Not supported -> using software downsampling (only for integer scale factor and only NN)$/;"	e	enum:pcl::io::OpenNI2Grabber::__anon14
OpenNI_QQVGA_60Hz	include/pcl/io/openni_grabber.h	/^        OpenNI_QQVGA_60Hz = 9    \/\/ Not supported -> using software downsampling (only for integer scale factor and only NN)$/;"	e	enum:pcl::OpenNIGrabber::__anon5
OpenNI_QVGA_25Hz	include/pcl/io/openni2_grabber.h	/^          OpenNI_QVGA_25Hz = 4,    \/\/ Supported by PSDK and Xtion$/;"	e	enum:pcl::io::OpenNI2Grabber::__anon14
OpenNI_QVGA_25Hz	include/pcl/io/openni_grabber.h	/^        OpenNI_QVGA_25Hz = 4,    \/\/ Supported by PSDK and Xtion$/;"	e	enum:pcl::OpenNIGrabber::__anon5
OpenNI_QVGA_30Hz	include/pcl/io/openni2_grabber.h	/^          OpenNI_QVGA_30Hz = 5,    \/\/ Supported by PSDK, Xtion and Kinect$/;"	e	enum:pcl::io::OpenNI2Grabber::__anon14
OpenNI_QVGA_30Hz	include/pcl/io/openni_grabber.h	/^        OpenNI_QVGA_30Hz = 5,    \/\/ Supported by PSDK, Xtion and Kinect$/;"	e	enum:pcl::OpenNIGrabber::__anon5
OpenNI_QVGA_60Hz	include/pcl/io/openni2_grabber.h	/^          OpenNI_QVGA_60Hz = 6,    \/\/ Supported by PSDK and Xtion$/;"	e	enum:pcl::io::OpenNI2Grabber::__anon14
OpenNI_QVGA_60Hz	include/pcl/io/openni_grabber.h	/^        OpenNI_QVGA_60Hz = 6,    \/\/ Supported by PSDK and Xtion$/;"	e	enum:pcl::OpenNIGrabber::__anon5
OpenNI_SXGA_15Hz	include/pcl/io/openni2_grabber.h	/^          OpenNI_SXGA_15Hz = 1,    \/\/ Only supported by the Kinect$/;"	e	enum:pcl::io::OpenNI2Grabber::__anon14
OpenNI_SXGA_15Hz	include/pcl/io/openni_grabber.h	/^        OpenNI_SXGA_15Hz = 1,    \/\/ Only supported by the Kinect$/;"	e	enum:pcl::OpenNIGrabber::__anon5
OpenNI_VGA_25Hz	include/pcl/io/openni2_grabber.h	/^          OpenNI_VGA_25Hz = 3,     \/\/ Supportged by PSDK and Xtion$/;"	e	enum:pcl::io::OpenNI2Grabber::__anon14
OpenNI_VGA_25Hz	include/pcl/io/openni_grabber.h	/^        OpenNI_VGA_25Hz = 3,     \/\/ Supportged by PSDK and Xtion$/;"	e	enum:pcl::OpenNIGrabber::__anon5
OpenNI_VGA_30Hz	include/pcl/io/openni2_grabber.h	/^          OpenNI_VGA_30Hz = 2,     \/\/ Supported by PSDK, Xtion and Kinect$/;"	e	enum:pcl::io::OpenNI2Grabber::__anon14
OpenNI_VGA_30Hz	include/pcl/io/openni_grabber.h	/^        OpenNI_VGA_30Hz = 2,     \/\/ Supported by PSDK, Xtion and Kinect$/;"	e	enum:pcl::OpenNIGrabber::__anon5
OpenNI_shift_values	include/pcl/io/openni_camera/openni_device.h	/^        OpenNI_shift_values = 0, \/\/ Shift values (disparity)$/;"	e	enum:openni_wrapper::OpenNIDevice::__anon8
Openni2FrameWrapper	include/pcl/io/openni2/openni2_metadata_wrapper.h	/^          Openni2FrameWrapper (openni::VideoFrameRef metadata)$/;"	f	class:pcl::io::openni2::Openni2FrameWrapper
Openni2FrameWrapper	include/pcl/io/openni2/openni2_metadata_wrapper.h	/^      class Openni2FrameWrapper : public pcl::io::FrameWrapper$/;"	c	namespace:pcl::io::openni2
PCA	include/pcl/common/impl/pca.hpp	/^pcl::PCA<PointT>::PCA (const pcl::PointCloud<PointT> &cloud, bool basis_only)$/;"	f	class:pcl::PCA
PCA	include/pcl/common/pca.h	/^      PCA (PCA const & pca) $/;"	f	class:pcl::PCA
PCA	include/pcl/common/pca.h	/^      PCA (bool basis_only = false)$/;"	f	class:pcl::PCA
PCA	include/pcl/common/pca.h	/^  class PCA : public pcl::PCLBase <PointT>$/;"	c	namespace:pcl
PCDGrabber	include/pcl/io/pcd_grabber.h	/^  PCDGrabber<PointT>::PCDGrabber (const std::string& pcd_path, float frames_per_second, bool repeat)$/;"	f	class:pcl::PCDGrabber
PCDGrabber	include/pcl/io/pcd_grabber.h	/^  PCDGrabber<PointT>::PCDGrabber (const std::vector<std::string>& pcd_files, float frames_per_second, bool repeat)$/;"	f	class:pcl::PCDGrabber
PCDGrabber	include/pcl/io/pcd_grabber.h	/^  template <typename PointT> class PCDGrabber : public PCDGrabberBase, public FileGrabber<PointT>$/;"	c	namespace:pcl
PCDGrabberBase	include/pcl/io/pcd_grabber.h	/^      PCDGrabberBase (const PCDGrabberBase &src) : Grabber (), impl_ ()$/;"	f	class:pcl::PCDGrabberBase
PCDGrabberBase	include/pcl/io/pcd_grabber.h	/^  class PCL_EXPORTS PCDGrabberBase : public Grabber$/;"	c	namespace:pcl
PCDReader	include/pcl/io/pcd_io.h	/^      PCDReader () : FileReader () {}$/;"	f	class:pcl::PCDReader
PCDReader	include/pcl/io/pcd_io.h	/^  class PCL_EXPORTS PCDReader : public FileReader$/;"	c	namespace:pcl
PCDWriter	include/pcl/io/pcd_io.h	/^      PCDWriter() : FileWriter(), map_synchronization_(false) {}$/;"	f	class:pcl::PCDWriter
PCDWriter	include/pcl/io/pcd_io.h	/^  class PCL_EXPORTS PCDWriter : public FileWriter$/;"	c	namespace:pcl
PCD_V6	include/pcl/io/pcd_io.h	/^        PCD_V6 = 0,$/;"	e	enum:pcl::PCDReader::__anon6
PCD_V7	include/pcl/io/pcd_io.h	/^        PCD_V7 = 1$/;"	e	enum:pcl::PCDReader::__anon6
PCLAPI	include/pcl/pcl_macros.h	287;"	d
PCLBase	include/pcl/impl/pcl_base.hpp	/^pcl::PCLBase<PointT>::PCLBase ()$/;"	f	class:pcl::PCLBase
PCLBase	include/pcl/impl/pcl_base.hpp	/^pcl::PCLBase<PointT>::PCLBase (const PCLBase& base)$/;"	f	class:pcl::PCLBase
PCLBase	include/pcl/pcl_base.h	/^  class PCLBase$/;"	c	namespace:pcl
PCLBase	include/pcl/pcl_base.h	/^  class PCL_EXPORTS PCLBase<pcl::PCLPointCloud2>$/;"	c	namespace:pcl
PCLException	include/pcl/exceptions.h	/^      PCLException (const std::string& error_description,$/;"	f	class:pcl::PCLException
PCLException	include/pcl/exceptions.h	/^  class PCLException : public std::runtime_error$/;"	c	namespace:pcl
PCLHeader	include/pcl/PCLHeader.h	/^    PCLHeader (): seq (0), stamp (), frame_id ()$/;"	f	struct:pcl::PCLHeader
PCLHeader	include/pcl/PCLHeader.h	/^  struct PCLHeader$/;"	s	namespace:pcl
PCLImage	include/pcl/PCLImage.h	/^    PCLImage () : header (), height (0), width (0), encoding (),$/;"	f	struct:pcl::PCLImage
PCLImage	include/pcl/PCLImage.h	/^  struct PCLImage$/;"	s	namespace:pcl
PCLImageConstPtr	include/pcl/PCLImage.h	/^  typedef boost::shared_ptr< ::pcl::PCLImage const> PCLImageConstPtr;$/;"	t	namespace:pcl
PCLImagePtr	include/pcl/PCLImage.h	/^  typedef boost::shared_ptr< ::pcl::PCLImage> PCLImagePtr;$/;"	t	namespace:pcl
PCLPointCloud2	include/pcl/PCLPointCloud2.h	/^    PCLPointCloud2 () : header (), height (0), width (0), fields (),$/;"	f	struct:pcl::PCLPointCloud2
PCLPointCloud2	include/pcl/PCLPointCloud2.h	/^  struct PCLPointCloud2$/;"	s	namespace:pcl
PCLPointCloud2	include/pcl/pcl_base.h	/^      typedef pcl::PCLPointCloud2 PCLPointCloud2;$/;"	t	class:pcl::PCLBase
PCLPointCloud2ConstPtr	include/pcl/PCLPointCloud2.h	/^  typedef boost::shared_ptr< ::pcl::PCLPointCloud2 const> PCLPointCloud2ConstPtr;$/;"	t	namespace:pcl
PCLPointCloud2ConstPtr	include/pcl/pcl_base.h	/^      typedef boost::shared_ptr<PCLPointCloud2 const> PCLPointCloud2ConstPtr;$/;"	t	class:pcl::PCLBase
PCLPointCloud2Ptr	include/pcl/PCLPointCloud2.h	/^  typedef boost::shared_ptr< ::pcl::PCLPointCloud2> PCLPointCloud2Ptr;$/;"	t	namespace:pcl
PCLPointCloud2Ptr	include/pcl/pcl_base.h	/^      typedef boost::shared_ptr<PCLPointCloud2> PCLPointCloud2Ptr;$/;"	t	class:pcl::PCLBase
PCLPointField	include/pcl/PCLPointField.h	/^    PCLPointField () : name (), offset (0), datatype (0), count (0)$/;"	f	struct:pcl::PCLPointField
PCLPointField	include/pcl/PCLPointField.h	/^  struct PCLPointField$/;"	s	namespace:pcl
PCLPointFieldConstPtr	include/pcl/PCLPointField.h	/^  typedef boost::shared_ptr< ::pcl::PCLPointField const> PCLPointFieldConstPtr;$/;"	t	namespace:pcl
PCLPointFieldPtr	include/pcl/PCLPointField.h	/^  typedef boost::shared_ptr< ::pcl::PCLPointField> PCLPointFieldPtr;$/;"	t	namespace:pcl
PCL_ADD_EIGEN_MAPS_NORMAL4D	include/pcl/impl/point_types.hpp	208;"	d
PCL_ADD_EIGEN_MAPS_POINT4D	include/pcl/impl/point_types.hpp	183;"	d
PCL_ADD_EIGEN_MAPS_RGB	include/pcl/impl/point_types.hpp	/^    PCL_ADD_EIGEN_MAPS_RGB;$/;"	m	struct:pcl::_PointSurfel
PCL_ADD_EIGEN_MAPS_RGB	include/pcl/impl/point_types.hpp	/^    PCL_ADD_EIGEN_MAPS_RGB;$/;"	m	struct:pcl::_PointXYZRGBNormal
PCL_ADD_EIGEN_MAPS_RGB	include/pcl/impl/point_types.hpp	235;"	d
PCL_ADD_INTENSITY	include/pcl/impl/point_types.hpp	/^    PCL_ADD_INTENSITY;$/;"	m	struct:pcl::_Intensity
PCL_ADD_INTENSITY	include/pcl/impl/point_types.hpp	251;"	d
PCL_ADD_INTENSITY_32U	include/pcl/impl/point_types.hpp	/^    PCL_ADD_INTENSITY_32U;$/;"	m	struct:pcl::_Intensity32u
PCL_ADD_INTENSITY_32U	include/pcl/impl/point_types.hpp	263;"	d
PCL_ADD_INTENSITY_8U	include/pcl/impl/point_types.hpp	/^    PCL_ADD_INTENSITY_8U;$/;"	m	struct:pcl::_Intensity8u
PCL_ADD_INTENSITY_8U	include/pcl/impl/point_types.hpp	257;"	d
PCL_ADD_NORMAL4D	include/pcl/impl/point_types.hpp	/^    PCL_ADD_NORMAL4D; \/\/ This adds the member normal[3] which can also be accessed using the point (which is float[4])$/;"	m	struct:pcl::_Normal
PCL_ADD_NORMAL4D	include/pcl/impl/point_types.hpp	/^    PCL_ADD_NORMAL4D; \/\/ This adds the member normal[3] which can also be accessed using the point (which is float[4])$/;"	m	struct:pcl::_PointNormal
PCL_ADD_NORMAL4D	include/pcl/impl/point_types.hpp	/^    PCL_ADD_NORMAL4D; \/\/ This adds the member normal[3] which can also be accessed using the point (which is float[4])$/;"	m	struct:pcl::_PointSurfel
PCL_ADD_NORMAL4D	include/pcl/impl/point_types.hpp	/^    PCL_ADD_NORMAL4D; \/\/ This adds the member normal[3] which can also be accessed using the point (which is float[4])$/;"	m	struct:pcl::_PointXYZINormal
PCL_ADD_NORMAL4D	include/pcl/impl/point_types.hpp	/^    PCL_ADD_NORMAL4D; \/\/ This adds the member normal[3] which can also be accessed using the point (which is float[4])$/;"	m	struct:pcl::_PointXYZLNormal
PCL_ADD_NORMAL4D	include/pcl/impl/point_types.hpp	/^    PCL_ADD_NORMAL4D; \/\/ This adds the member normal[3] which can also be accessed using the point (which is float[4])$/;"	m	struct:pcl::_PointXYZRGBNormal
PCL_ADD_NORMAL4D	include/pcl/impl/point_types.hpp	/^    PCL_ADD_NORMAL4D;$/;"	m	struct:pcl::_Axis
PCL_ADD_NORMAL4D	include/pcl/impl/point_types.hpp	214;"	d
PCL_ADD_POINT4D	include/pcl/impl/point_types.hpp	/^    PCL_ADD_POINT4D;    \/\/ This adds the members x,y,z which can also be accessed using the point (which is float[4])$/;"	m	struct:pcl::_PointXYZHSV
PCL_ADD_POINT4D	include/pcl/impl/point_types.hpp	/^    PCL_ADD_POINT4D; \/\/ This adds the members x,y,z which can also be accessed using the point (which is float[4])$/;"	m	struct:pcl::InterestPoint
PCL_ADD_POINT4D	include/pcl/impl/point_types.hpp	/^    PCL_ADD_POINT4D; \/\/ This adds the members x,y,z which can also be accessed using the point (which is float[4])$/;"	m	struct:pcl::_PointNormal
PCL_ADD_POINT4D	include/pcl/impl/point_types.hpp	/^    PCL_ADD_POINT4D; \/\/ This adds the members x,y,z which can also be accessed using the point (which is float[4])$/;"	m	struct:pcl::_PointSurfel
PCL_ADD_POINT4D	include/pcl/impl/point_types.hpp	/^    PCL_ADD_POINT4D; \/\/ This adds the members x,y,z which can also be accessed using the point (which is float[4])$/;"	m	struct:pcl::_PointWithRange
PCL_ADD_POINT4D	include/pcl/impl/point_types.hpp	/^    PCL_ADD_POINT4D; \/\/ This adds the members x,y,z which can also be accessed using the point (which is float[4])$/;"	m	struct:pcl::_PointWithScale
PCL_ADD_POINT4D	include/pcl/impl/point_types.hpp	/^    PCL_ADD_POINT4D; \/\/ This adds the members x,y,z which can also be accessed using the point (which is float[4])$/;"	m	struct:pcl::_PointWithViewpoint
PCL_ADD_POINT4D	include/pcl/impl/point_types.hpp	/^    PCL_ADD_POINT4D; \/\/ This adds the members x,y,z which can also be accessed using the point (which is float[4])$/;"	m	struct:pcl::_PointXYZ
PCL_ADD_POINT4D	include/pcl/impl/point_types.hpp	/^    PCL_ADD_POINT4D; \/\/ This adds the members x,y,z which can also be accessed using the point (which is float[4])$/;"	m	struct:pcl::_PointXYZI
PCL_ADD_POINT4D	include/pcl/impl/point_types.hpp	/^    PCL_ADD_POINT4D; \/\/ This adds the members x,y,z which can also be accessed using the point (which is float[4])$/;"	m	struct:pcl::_PointXYZINormal
PCL_ADD_POINT4D	include/pcl/impl/point_types.hpp	/^    PCL_ADD_POINT4D; \/\/ This adds the members x,y,z which can also be accessed using the point (which is float[4])$/;"	m	struct:pcl::_PointXYZL
PCL_ADD_POINT4D	include/pcl/impl/point_types.hpp	/^    PCL_ADD_POINT4D; \/\/ This adds the members x,y,z which can also be accessed using the point (which is float[4])$/;"	m	struct:pcl::_PointXYZLNormal
PCL_ADD_POINT4D	include/pcl/impl/point_types.hpp	/^    PCL_ADD_POINT4D; \/\/ This adds the members x,y,z which can also be accessed using the point (which is float[4])$/;"	m	struct:pcl::_PointXYZRGB
PCL_ADD_POINT4D	include/pcl/impl/point_types.hpp	/^    PCL_ADD_POINT4D; \/\/ This adds the members x,y,z which can also be accessed using the point (which is float[4])$/;"	m	struct:pcl::_PointXYZRGBA
PCL_ADD_POINT4D	include/pcl/impl/point_types.hpp	/^    PCL_ADD_POINT4D; \/\/ This adds the members x,y,z which can also be accessed using the point (which is float[4])$/;"	m	struct:pcl::_PointXYZRGBL
PCL_ADD_POINT4D	include/pcl/impl/point_types.hpp	/^    PCL_ADD_POINT4D; \/\/ This adds the members x,y,z which can also be accessed using the point (which is float[4])$/;"	m	struct:pcl::_PointXYZRGBNormal
PCL_ADD_POINT4D	include/pcl/impl/point_types.hpp	/^    PCL_ADD_POINT4D;$/;"	m	struct:pcl::_PointDEM
PCL_ADD_POINT4D	include/pcl/impl/point_types.hpp	193;"	d
PCL_ADD_RGB	include/pcl/impl/point_types.hpp	/^    PCL_ADD_RGB;$/;"	m	struct:pcl::_PointXYZRGB
PCL_ADD_RGB	include/pcl/impl/point_types.hpp	/^    PCL_ADD_RGB;$/;"	m	struct:pcl::_PointXYZRGBA
PCL_ADD_RGB	include/pcl/impl/point_types.hpp	/^    PCL_ADD_RGB;$/;"	m	struct:pcl::_PointXYZRGBL
PCL_ADD_RGB	include/pcl/impl/point_types.hpp	/^    PCL_ADD_RGB;$/;"	m	struct:pcl::_RGB
PCL_ADD_RGB	include/pcl/impl/point_types.hpp	247;"	d
PCL_ADD_UNION_NORMAL4D	include/pcl/impl/point_types.hpp	197;"	d
PCL_ADD_UNION_POINT4D	include/pcl/impl/point_types.hpp	173;"	d
PCL_ADD_UNION_RGB	include/pcl/impl/point_types.hpp	/^        PCL_ADD_UNION_RGB;$/;"	m	struct:pcl::_PointSurfel::__anon44::__anon45
PCL_ADD_UNION_RGB	include/pcl/impl/point_types.hpp	/^        PCL_ADD_UNION_RGB;$/;"	m	struct:pcl::_PointXYZRGBNormal::__anon27::__anon28
PCL_ADD_UNION_RGB	include/pcl/impl/point_types.hpp	218;"	d
PCL_ALIGN	include/pcl/pcl_macros.h	357;"	d
PCL_ALIGN	include/pcl/pcl_macros.h	359;"	d
PCL_ALWAYS	include/pcl/console/print.h	46;"	d
PCL_ASSERT_ERROR_PRINT_CHECK	include/pcl/console/print.h	53;"	d
PCL_ASSERT_ERROR_PRINT_RETURN	include/pcl/console/print.h	63;"	d
PCL_BEARING_ANGLE_IMAGE_H_	include/pcl/range_image/bearing_angle_image.h	43;"	d
PCL_CDECL	include/pcl/pcl_macros.h	279;"	d
PCL_CDECL	include/pcl/pcl_macros.h	282;"	d
PCL_COMMON_ANGLES_H_	include/pcl/common/angles.h	40;"	d
PCL_COMMON_ANGLES_IMPL_HPP_	include/pcl/common/impl/angles.hpp	40;"	d
PCL_COMMON_BOOST_H_	include/pcl/common/boost.h	40;"	d
PCL_COMMON_CENTROID_H_	include/pcl/common/centroid.h	40;"	d
PCL_COMMON_COLORS_H	include/pcl/common/colors.h	39;"	d
PCL_COMMON_CONCATENATE_H_	include/pcl/common/concatenate.h	39;"	d
PCL_COMMON_COPY_POINT_H_	include/pcl/common/copy_point.h	39;"	d
PCL_COMMON_CORRESPONDENCE_H_	include/pcl/correspondence.h	39;"	d
PCL_COMMON_EIGEN_H_	include/pcl/common/eigen.h	43;"	d
PCL_COMMON_EIGEN_IMPL_HPP_	include/pcl/common/impl/eigen.hpp	40;"	d
PCL_COMMON_FILE_IO_H_	include/pcl/common/file_io.h	40;"	d
PCL_COMMON_FILE_IO_IMPL_HPP_	include/pcl/common/impl/file_io.hpp	40;"	d
PCL_COMMON_GENERATE_HPP_	include/pcl/common/impl/generate.hpp	41;"	d
PCL_COMMON_GENERATE_H_	include/pcl/common/generate.h	41;"	d
PCL_COMMON_HEADERS_	include/pcl/common/common_headers.h	37;"	d
PCL_COMMON_H_	include/pcl/common/common.h	39;"	d
PCL_COMMON_IMPL_CENTROID_H_	include/pcl/common/impl/centroid.hpp	42;"	d
PCL_COMMON_IMPL_COPY_POINT_HPP_	include/pcl/common/impl/copy_point.hpp	39;"	d
PCL_COMMON_IMPL_DETAIL_ACCUMULATORS_HPP	include/pcl/common/impl/accumulators.hpp	39;"	d
PCL_COMMON_IMPL_H_	include/pcl/common/impl/common.hpp	39;"	d
PCL_COMMON_INTENSITY_FIELD_ACCESSOR_IMPL_HPP	include/pcl/common/impl/intensity.hpp	42;"	d
PCL_COMMON_INTENSITY_FIELD_SELECTOR_H	include/pcl/common/intensity.h	41;"	d
PCL_COMMON_INTERSECTIONS_IMPL_HPP_	include/pcl/common/impl/intersections.hpp	39;"	d
PCL_COMMON_IO_H_	include/pcl/common/io.h	42;"	d
PCL_COMMON_NORMS_H_	include/pcl/common/norms.h	40;"	d
PCL_COMMON_NORMS_IMPL_HPP_	include/pcl/common/impl/norms.hpp	40;"	d
PCL_COMMON_POINT_OPERATORS_H	include/pcl/common/point_operators.h	42;"	d
PCL_COMMON_POINT_TESTS_H_	include/pcl/common/point_tests.h	41;"	d
PCL_COMMON_RANDOM_HPP_	include/pcl/common/impl/random.hpp	41;"	d
PCL_COMMON_RANDOM_H_	include/pcl/common/random.h	41;"	d
PCL_COMMON_TIME_TRIGGER_H_	include/pcl/common/time_trigger.h	40;"	d
PCL_COMMON_VECTOR_AVERAGE_H	include/pcl/common/vector_average.h	39;"	d
PCL_COMMON_VECTOR_AVERAGE_IMPL_HPP_	include/pcl/common/impl/vector_average.hpp	39;"	d
PCL_CONSOLE_PARSE_H_	include/pcl/console/parse.h	39;"	d
PCL_CONVERSIONS_H_	include/pcl/conversions.h	41;"	d
PCL_DATA_TYPES_H_	include/pcl/point_types.h	40;"	d
PCL_DEBUG	include/pcl/console/print.h	50;"	d
PCL_DEPRECATED	include/pcl/pcl_macros.h	304;"	d
PCL_DEPRECATED	include/pcl/pcl_macros.h	309;"	d
PCL_DEPRECATED	include/pcl/pcl_macros.h	313;"	d
PCL_DEPRECATED	include/pcl/pcl_macros.h	318;"	d
PCL_DEPRECATED_CLASS	include/pcl/pcl_macros.h	339;"	d
PCL_DEPRECATED_CLASS	include/pcl/pcl_macros.h	344;"	d
PCL_DEPRECATED_CLASS	include/pcl/pcl_macros.h	348;"	d
PCL_DEPRECATED_CLASS	include/pcl/pcl_macros.h	353;"	d
PCL_DISTANCES_H_	include/pcl/common/distances.h	38;"	d
PCL_DIVEQSC_POINT_TAG	include/pcl/register_point_struct.h	229;"	d
PCL_EIGEN_SIZE_MIN_PREFER_DYNAMIC	include/pcl/common/eigen.h	376;"	d
PCL_ERROR	include/pcl/console/print.h	47;"	d
PCL_EXCEPTIONS_H_	include/pcl/exceptions.h	38;"	d
PCL_EXPORTS	include/pcl/pcl_exports.h	44;"	d
PCL_EXPORTS	include/pcl/pcl_exports.h	46;"	d
PCL_EXPORTS	include/pcl/pcl_exports.h	49;"	d
PCL_EXPORTS	include/pcl/pcl_macros.h	270;"	d
PCL_EXPORTS	include/pcl/pcl_macros.h	272;"	d
PCL_EXPORTS	include/pcl/pcl_macros.h	275;"	d
PCL_EXPORTS_H_	include/pcl/pcl_exports.h	36;"	d
PCL_EXTERN_C	include/pcl/pcl_macros.h	262;"	d
PCL_EXTERN_C	include/pcl/pcl_macros.h	264;"	d
PCL_FEATURE_HISTOGRAM_H_	include/pcl/common/feature_histogram.h	38;"	d
PCL_FEATURE_POINT_TYPES	include/pcl/impl/point_types.hpp	140;"	d
PCL_FOR_EACH_TYPE_H_	include/pcl/for_each_type.h	41;"	d
PCL_GAUSSIAN_KERNEL	include/pcl/common/gaussian.h	41;"	d
PCL_GAUSSIAN_KERNEL_IMPL	include/pcl/common/impl/gaussian.hpp	41;"	d
PCL_GEOMETRY_H_	include/pcl/common/geometry.h	39;"	d
PCL_IMPL_INSTANTIATE_H_	include/pcl/impl/instantiate.hpp	39;"	d
PCL_IMPL_POINT_TYPES_HPP_	include/pcl/impl/point_types.hpp	40;"	d
PCL_INFO	include/pcl/console/print.h	49;"	d
PCL_INSTANTIATE	include/pcl/impl/instantiate.hpp	59;"	d
PCL_INSTANTIATE	include/pcl/impl/instantiate.hpp	74;"	d
PCL_INSTANTIATE_IMPL	include/pcl/impl/instantiate.hpp	58;"	d
PCL_INSTANTIATE_IMPL	include/pcl/impl/instantiate.hpp	71;"	d
PCL_INSTANTIATE_PCLBase	include/pcl/impl/pcl_base.hpp	179;"	d
PCL_INSTANTIATE_PRODUCT	include/pcl/impl/instantiate.hpp	110;"	d
PCL_INSTANTIATE_PRODUCT	include/pcl/impl/instantiate.hpp	61;"	d
PCL_INSTANTIATE_PRODUCT_IMPL	include/pcl/impl/instantiate.hpp	100;"	d
PCL_INSTANTIATE_PRODUCT_IMPL	include/pcl/impl/instantiate.hpp	104;"	d
PCL_INSTANTIATE_PRODUCT_IMPL	include/pcl/impl/instantiate.hpp	57;"	d
PCL_INSTANTIATE_PRODUCT_IMPL	include/pcl/impl/instantiate.hpp	60;"	d
PCL_INSTANTIATE_PointCloud	include/pcl/point_cloud.h	621;"	d
PCL_INTERSECTIONS_H_	include/pcl/common/intersections.h	39;"	d
PCL_IO_ASCII_IO_HPP_	include/pcl/io/impl/ascii_io.hpp	39;"	d
PCL_IO_ASCII_IO_H_	include/pcl/io/ascii_io.h	39;"	d
PCL_IO_AUTO_IO_H_	include/pcl/io/auto_io.h	39;"	d
PCL_IO_AUTO_IO_IMPL_H_	include/pcl/io/impl/auto_io.hpp	41;"	d
PCL_IO_BUFFERS_H	include/pcl/io/buffers.h	39;"	d
PCL_IO_DEBAYER_H	include/pcl/io/debayer.h	39;"	d
PCL_IO_DEPTH_SENSE_DEVICE_MANAGER_H	include/pcl/io/depth_sense/depth_sense_device_manager.h	39;"	d
PCL_IO_DEPTH_SENSE_GRABBER_H	include/pcl/io/depth_sense_grabber.h	39;"	d
PCL_IO_DEPTH_SENSE_GRABBER_IMPL_H	include/pcl/io/depth_sense/depth_sense_grabber_impl.h	39;"	d
PCL_IO_DINAST_GRABBER_	include/pcl/io/dinast_grabber.h	41;"	d
PCL_IO_EXCEPTION_H_	include/pcl/io/io_exception.h	39;"	d
PCL_IO_FILE_GRABBER_H_	include/pcl/io/file_grabber.h	44;"	d
PCL_IO_FILE_IO_H_	include/pcl/io/file_io.h	39;"	d
PCL_IO_HDL_GRABBER_H_	include/pcl/io/hdl_grabber.h	42;"	d
PCL_IO_IFS_IO_H_	include/pcl/io/ifs_io.h	39;"	d
PCL_IO_IMAGE_DEPTH_H_	include/pcl/io/image_depth.h	42;"	d
PCL_IO_IMAGE_H_	include/pcl/io/image.h	38;"	d
PCL_IO_IMAGE_IR_H_	include/pcl/io/image_ir.h	37;"	d
PCL_IO_IMAGE_METADATA_WRAPPER_H_	include/pcl/io/image_metadata_wrapper.h	42;"	d
PCL_IO_IMAGE_RGB_H_	include/pcl/io/image_rgb24.h	39;"	d
PCL_IO_IMAGE_YUV422_H_	include/pcl/io/image_yuv422.h	39;"	d
PCL_IO_IMPL_BUFFERS_HPP	include/pcl/io/impl/buffers.hpp	39;"	d
PCL_IO_IMPL_IO_HPP_	include/pcl/common/impl/io.hpp	42;"	d
PCL_IO_IO_H_	include/pcl/io/io.h	41;"	d
PCL_IO_LZF_H	include/pcl/io/lzf.h	39;"	d
PCL_IO_OPENNI2_CONVERT_H_	include/pcl/io/openni2/openni2_convert.h	34;"	d
PCL_IO_OPENNI2_DEVICE_H_	include/pcl/io/openni2/openni2_device.h	32;"	d
PCL_IO_OPENNI2_DEVICE_INFO_H_	include/pcl/io/openni2/openni2_device_info.h	33;"	d
PCL_IO_OPENNI2_DEVICE_MANAGER_H_	include/pcl/io/openni2/openni2_device_manager.h	33;"	d
PCL_IO_OPENNI2_FRAME_LISTENER_H_	include/pcl/io/openni2/openni2_frame_listener.h	39;"	d
PCL_IO_OPENNI2_GRABBER_H_	include/pcl/io/openni2_grabber.h	44;"	d
PCL_IO_OPENNI2_METADATA_WRAPPER_H_	include/pcl/io/openni2/openni2_metadata_wrapper.h	42;"	d
PCL_IO_OPENNI2_OPENNI_H_	include/pcl/io/openni2/openni.h	41;"	d
PCL_IO_OPENNI2_TIME_FILTER_H_	include/pcl/io/openni2/openni2_timer_filter.h	33;"	d
PCL_IO_OPENNI2_VIDEO_MODE_H_	include/pcl/io/openni2/openni2_video_mode.h	33;"	d
PCL_IO_PCD_GRABBER_H_	include/pcl/io/pcd_grabber.h	41;"	d
PCL_IO_PCD_IO_H_	include/pcl/io/pcd_io.h	41;"	d
PCL_IO_PCD_IO_IMPL_H_	include/pcl/io/impl/pcd_io.hpp	41;"	d
PCL_IO_PLY_BYTE_ORDER_H	include/pcl/io/ply/byte_order.h	41;"	d
PCL_IO_PLY_IO_H_	include/pcl/io/ply_io.h	41;"	d
PCL_IO_PLY_IO_OPERATORS_H	include/pcl/io/ply/io_operators.h	41;"	d
PCL_IO_PLY_PLY_PARSER_H	include/pcl/io/ply/ply_parser.h	42;"	d
PCL_IO_PNG_IO_H_	include/pcl/io/png_io.h	41;"	d
PCL_IO_REAL_SENSE_DEVICE_MANAGER_H	include/pcl/io/real_sense/real_sense_device_manager.h	39;"	d
PCL_IO_REAL_SENSE_GRABBER_H	include/pcl/io/real_sense_grabber.h	39;"	d
PCL_IO_ROBOT_EYE_GRABBER_H_	include/pcl/io/robot_eye_grabber.h	41;"	d
PCL_IO_TAR_H_	include/pcl/io/tar.h	39;"	d
PCL_IO_VLP_GRABBER_H_	include/pcl/io/vlp_grabber.h	42;"	d
PCL_IO_VTK_IO_H_	include/pcl/io/vtk_io.h	42;"	d
PCL_IO_VTK_IO_IMPL_H_	include/pcl/io/impl/vtk_lib_io.hpp	41;"	d
PCL_IO_VTK_LIB_IO_H_	include/pcl/io/vtk_lib_io.h	42;"	d
PCL_LINEAR_VERSION	include/pcl/pcl_macros.h	146;"	d
PCL_LZF_IMAGE_IO_HPP_	include/pcl/io/impl/lzf_image_io.hpp	39;"	d
PCL_LZF_IMAGE_IO_H_	include/pcl/io/lzf_image_io.h	39;"	d
PCL_MACROS_H_	include/pcl/pcl_macros.h	38;"	d
PCL_MAJOR_VERSION	include/pcl/pcl_config.h	5;"	d
PCL_MESSAGE_IMAGE_H	include/pcl/PCLImage.h	2;"	d
PCL_MESSAGE_MODELCOEFFICIENTS_H	include/pcl/ModelCoefficients.h	2;"	d
PCL_MESSAGE_POINTINDICES_H	include/pcl/PointIndices.h	2;"	d
PCL_MESSAGE_POLYGONMESH_H	include/pcl/PolygonMesh.h	3;"	d
PCL_MESSAGE_VERTICES_H	include/pcl/Vertices.h	2;"	d
PCL_MINOR_VERSION	include/pcl/pcl_config.h	6;"	d
PCL_MINUSEQSC_POINT_TAG	include/pcl/register_point_struct.h	218;"	d
PCL_MINUSEQ_POINT_TAG	include/pcl/register_point_struct.h	213;"	d
PCL_MULEQSC_POINT_TAG	include/pcl/register_point_struct.h	224;"	d
PCL_NORMAL_POINT_TYPES	include/pcl/impl/point_types.hpp	131;"	d
PCL_PCA_H	include/pcl/common/pca.h	40;"	d
PCL_PCA_IMPL_HPP	include/pcl/common/impl/pca.hpp	40;"	d
PCL_PCL_BASE_H_	include/pcl/pcl_base.h	39;"	d
PCL_PCL_IMPL_BASE_HPP_	include/pcl/impl/pcl_base.hpp	38;"	d
PCL_PIECEWISE_LINEAR_FUNCTION_H_	include/pcl/common/piecewise_linear_function.h	39;"	d
PCL_PLUSEQSC_POINT_TAG	include/pcl/register_point_struct.h	207;"	d
PCL_PLUSEQ_POINT_TAG	include/pcl/register_point_struct.h	202;"	d
PCL_POINT_CLOUD_H_	include/pcl/point_cloud.h	40;"	d
PCL_POINT_CLOUD_IMAGE_EXTRACTORS_H_	include/pcl/io/point_cloud_image_extractors.h	38;"	d
PCL_POINT_CLOUD_IMAGE_EXTRACTORS_IMPL_HPP_	include/pcl/io/impl/point_cloud_image_extractors.hpp	39;"	d
PCL_POINT_CLOUD_ITERATOR_HPP_	include/pcl/impl/cloud_iterator.hpp	40;"	d
PCL_POINT_CLOUD_ITERATOR_H_	include/pcl/cloud_iterator.h	40;"	d
PCL_POINT_CLOUD_SPRING_H_	include/pcl/common/spring.h	41;"	d
PCL_POINT_CLOUD_SPRING_IMPL_HPP_	include/pcl/common/impl/spring.hpp	41;"	d
PCL_POINT_REPRESENTATION_H_	include/pcl/point_representation.h	40;"	d
PCL_POINT_TRAITS_H_	include/pcl/point_traits.h	40;"	d
PCL_POINT_TYPES	include/pcl/impl/point_types.hpp	50;"	d
PCL_POLYNOMIAL_CALCULATIONS_H_	include/pcl/common/polynomial_calculations.h	37;"	d
PCL_POSES_FROM_MATCHES_H_	include/pcl/common/poses_from_matches.h	39;"	d
PCL_RANGE_IMAGE_H_	include/pcl/range_image/range_image.h	39;"	d
PCL_RANGE_IMAGE_IMPL_HPP_	include/pcl/range_image/impl/range_image.hpp	40;"	d
PCL_RANGE_IMAGE_PLANAR_H_	include/pcl/range_image/range_image_planar.h	39;"	d
PCL_RANGE_IMAGE_PLANAR_IMPL_HPP_	include/pcl/range_image/impl/range_image_planar.hpp	40;"	d
PCL_RANGE_IMAGE_SPHERICAL_H_	include/pcl/range_image/range_image_spherical.h	36;"	d
PCL_REGISTER_POINT_STRUCT_H_	include/pcl/register_point_struct.h	42;"	d
PCL_REVISION_VERSION	include/pcl/pcl_config.h	7;"	d
PCL_RGB_POINT_TYPES	include/pcl/impl/point_types.hpp	97;"	d
PCL_ROSLIB_MESSAGE_HEADER_H	include/pcl/PCLHeader.h	2;"	d
PCL_ROS_CONVERSIONS_H_	include/pcl/ros/conversions.h	41;"	d
PCL_ROS_REGISTER_POINT_STRUCT_H_	include/pcl/ros/register_point_struct.h	42;"	d
PCL_SENSOR_MSGS_MESSAGE_POINTCLOUD2_H	include/pcl/PCLPointCloud2.h	2;"	d
PCL_SENSOR_MSGS_MESSAGE_POINTFIELD_H	include/pcl/PCLPointField.h	2;"	d
PCL_SSE_H_	include/pcl/sse.h	40;"	d
PCL_STDCALL	include/pcl/pcl_macros.h	280;"	d
PCL_STDCALL	include/pcl/pcl_macros.h	283;"	d
PCL_TEST_MACROS	include/pcl/pcl_tests.h	41;"	d
PCL_TEXTUREMESH_H_	include/pcl/TextureMesh.h	40;"	d
PCL_THROW_EXCEPTION	include/pcl/exceptions.h	50;"	d
PCL_TIME_H_	include/pcl/common/time.h	40;"	d
PCL_TRANSFORMATION_FROM_CORRESPONDENCES_H	include/pcl/common/transformation_from_correspondences.h	38;"	d
PCL_TRANSFORMS_H_	include/pcl/common/transforms.h	40;"	d
PCL_TYPE_CONVERSIONS_H	include/pcl/point_types_conversion.h	40;"	d
PCL_UTILS	include/pcl/common/utils.h	40;"	d
PCL_VERBOSE	include/pcl/console/print.h	51;"	d
PCL_VERSION	include/pcl/pcl_config.h	10;"	d
PCL_VERSION_CALC	include/pcl/pcl_config.h	9;"	d
PCL_VERSION_COMPARE	include/pcl/pcl_config.h	12;"	d
PCL_VERSION_PRETTY	include/pcl/pcl_config.h	8;"	d
PCL_WARN	include/pcl/console/print.h	48;"	d
PCL_XYZL_POINT_TYPES	include/pcl/impl/point_types.hpp	125;"	d
PCL_XYZ_POINT_TYPES	include/pcl/impl/point_types.hpp	105;"	d
PF	include/pcl/common/norms.h	/^  enum NormType {L1, L2_SQR, L2, LINF, JM, B, SUBLINEAR, CS, DIV, PF, K, KL, HIK};$/;"	e	enum:pcl::NormType
PFHRGBSignature250	include/pcl/impl/point_types.hpp	/^  struct PFHRGBSignature250$/;"	s	namespace:pcl
PFHSignature125	include/pcl/impl/point_types.hpp	/^  struct PFHSignature125$/;"	s	namespace:pcl
PF_Norm	include/pcl/common/impl/norms.hpp	/^PF_Norm (FloatVectorT a, FloatVectorT b, int dim, float P1, float P2)$/;"	f	namespace:pcl
PIXEL_FORMAT_DEPTH_100_UM	include/pcl/io/openni2/openni2_video_mode.h	/^        PIXEL_FORMAT_DEPTH_100_UM = 101,$/;"	e	enum:pcl::io::openni2::__anon13
PIXEL_FORMAT_DEPTH_1_MM	include/pcl/io/openni2/openni2_video_mode.h	/^        PIXEL_FORMAT_DEPTH_1_MM = 100,$/;"	e	enum:pcl::io::openni2::__anon13
PIXEL_FORMAT_GRAY16	include/pcl/io/openni2/openni2_video_mode.h	/^        PIXEL_FORMAT_GRAY16 = 203,$/;"	e	enum:pcl::io::openni2::__anon13
PIXEL_FORMAT_GRAY8	include/pcl/io/openni2/openni2_video_mode.h	/^        PIXEL_FORMAT_GRAY8 = 202,$/;"	e	enum:pcl::io::openni2::__anon13
PIXEL_FORMAT_JPEG	include/pcl/io/openni2/openni2_video_mode.h	/^        PIXEL_FORMAT_JPEG = 204,$/;"	e	enum:pcl::io::openni2::__anon13
PIXEL_FORMAT_RGB888	include/pcl/io/openni2/openni2_video_mode.h	/^        PIXEL_FORMAT_RGB888 = 200,$/;"	e	enum:pcl::io::openni2::__anon13
PIXEL_FORMAT_SHIFT_9_2	include/pcl/io/openni2/openni2_video_mode.h	/^        PIXEL_FORMAT_SHIFT_9_2 = 102,$/;"	e	enum:pcl::io::openni2::__anon13
PIXEL_FORMAT_SHIFT_9_3	include/pcl/io/openni2/openni2_video_mode.h	/^        PIXEL_FORMAT_SHIFT_9_3 = 103,$/;"	e	enum:pcl::io::openni2::__anon13
PIXEL_FORMAT_YUV422	include/pcl/io/openni2/openni2_video_mode.h	/^        PIXEL_FORMAT_YUV422 = 201,$/;"	e	enum:pcl::io::openni2::__anon13
PIXEL_FORMAT_YUYV	include/pcl/io/openni2/openni2_video_mode.h	/^        PIXEL_FORMAT_YUYV = 205,$/;"	e	enum:pcl::io::openni2::__anon13
PLATFORM_ID	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	212;"	d	file:
PLATFORM_ID	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	215;"	d	file:
PLATFORM_ID	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	218;"	d	file:
PLATFORM_ID	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	221;"	d	file:
PLATFORM_ID	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	224;"	d	file:
PLATFORM_ID	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	227;"	d	file:
PLATFORM_ID	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	230;"	d	file:
PLATFORM_ID	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	233;"	d	file:
PLATFORM_ID	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	236;"	d	file:
PLATFORM_ID	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	239;"	d	file:
PLATFORM_ID	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	242;"	d	file:
PLATFORM_ID	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	245;"	d	file:
PLATFORM_ID	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	248;"	d	file:
PLATFORM_ID	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	251;"	d	file:
PLATFORM_ID	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	254;"	d	file:
PLATFORM_ID	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	257;"	d	file:
PLATFORM_ID	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	260;"	d	file:
PLATFORM_ID	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	263;"	d	file:
PLATFORM_ID	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	266;"	d	file:
PLATFORM_ID	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	269;"	d	file:
PLATFORM_ID	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	272;"	d	file:
PLATFORM_ID	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	275;"	d	file:
PLATFORM_ID	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	278;"	d	file:
PLATFORM_ID	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	281;"	d	file:
PLATFORM_ID	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	284;"	d	file:
PLATFORM_ID	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	287;"	d	file:
PLATFORM_ID	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	205;"	d	file:
PLATFORM_ID	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	208;"	d	file:
PLATFORM_ID	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	211;"	d	file:
PLATFORM_ID	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	214;"	d	file:
PLATFORM_ID	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	217;"	d	file:
PLATFORM_ID	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	220;"	d	file:
PLATFORM_ID	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	223;"	d	file:
PLATFORM_ID	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	226;"	d	file:
PLATFORM_ID	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	229;"	d	file:
PLATFORM_ID	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	232;"	d	file:
PLATFORM_ID	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	235;"	d	file:
PLATFORM_ID	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	238;"	d	file:
PLATFORM_ID	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	241;"	d	file:
PLATFORM_ID	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	244;"	d	file:
PLATFORM_ID	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	247;"	d	file:
PLATFORM_ID	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	250;"	d	file:
PLATFORM_ID	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	253;"	d	file:
PLATFORM_ID	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	256;"	d	file:
PLATFORM_ID	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	259;"	d	file:
PLATFORM_ID	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	262;"	d	file:
PLATFORM_ID	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	265;"	d	file:
PLATFORM_ID	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	268;"	d	file:
PLATFORM_ID	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	271;"	d	file:
PLATFORM_ID	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	274;"	d	file:
PLATFORM_ID	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	277;"	d	file:
PLATFORM_ID	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	280;"	d	file:
PLYReader	include/pcl/io/ply_io.h	/^      PLYReader ()$/;"	f	class:pcl::PLYReader
PLYReader	include/pcl/io/ply_io.h	/^      PLYReader (const PLYReader &p)$/;"	f	class:pcl::PLYReader
PLYReader	include/pcl/io/ply_io.h	/^  class PCL_EXPORTS PLYReader : public FileReader$/;"	c	namespace:pcl
PLYWriter	include/pcl/io/ply_io.h	/^      PLYWriter () : FileWriter () {};$/;"	f	class:pcl::PLYWriter
PLYWriter	include/pcl/io/ply_io.h	/^  class PCL_EXPORTS PLYWriter : public FileWriter$/;"	c	namespace:pcl
PLY_PLY_H	include/pcl/io/ply/ply.h	42;"	d
PLY_TYPE_TRAITS	include/pcl/io/ply/ply.h	76;"	d
PLY_TYPE_TRAITS	include/pcl/io/ply/ply.h	96;"	d
PLY_V0	include/pcl/io/ply_io.h	/^        PLY_V0 = 0,$/;"	e	enum:pcl::PLYReader::__anon7
PLY_V1	include/pcl/io/ply_io.h	/^        PLY_V1 = 1$/;"	e	enum:pcl::PLYReader::__anon7
POD	include/pcl/point_traits.h	/^    struct POD$/;"	s	namespace:pcl::traits
POD	include/pcl/point_traits.h	/^    struct POD<Eigen::internal::workaround_msvc_stl_support<PointT> >$/;"	s	namespace:pcl::traits
POINT_CLOUD_EXTRACT_TAGS	include/pcl/register_point_struct.h	354;"	d
POINT_CLOUD_REGISTER_FIELD_DATATYPE	include/pcl/register_point_struct.h	342;"	d
POINT_CLOUD_REGISTER_FIELD_NAME	include/pcl/register_point_struct.h	317;"	d
POINT_CLOUD_REGISTER_FIELD_OFFSET	include/pcl/register_point_struct.h	331;"	d
POINT_CLOUD_REGISTER_FIELD_TAG	include/pcl/register_point_struct.h	313;"	d
POINT_CLOUD_REGISTER_POINT_FIELD_LIST	include/pcl/register_point_struct.h	356;"	d
POINT_CLOUD_REGISTER_POINT_STRUCT	include/pcl/register_point_struct.h	70;"	d
POINT_CLOUD_REGISTER_POINT_STRUCT_I	include/pcl/register_point_struct.h	237;"	d
POINT_CLOUD_REGISTER_POINT_STRUCT_X	include/pcl/register_point_struct.h	86;"	d
POINT_CLOUD_REGISTER_POINT_STRUCT_X0	include/pcl/register_point_struct.h	90;"	d
POINT_CLOUD_REGISTER_POINT_STRUCT_Y	include/pcl/register_point_struct.h	88;"	d
POINT_CLOUD_REGISTER_POINT_STRUCT_Y0	include/pcl/register_point_struct.h	91;"	d
POINT_CLOUD_REGISTER_POINT_WRAPPER	include/pcl/register_point_struct.h	75;"	d
POINT_CLOUD_TAG_OP	include/pcl/register_point_struct.h	352;"	d
PPFRGBSignature	include/pcl/impl/point_types.hpp	/^  struct PPFRGBSignature$/;"	s	namespace:pcl
PPFSignature	include/pcl/impl/point_types.hpp	/^  struct PPFSignature$/;"	s	namespace:pcl
PVAR	include/pcl/pcl_macros.h	187;"	d
PVARA	include/pcl/pcl_macros.h	203;"	d
PVARAC	include/pcl/pcl_macros.h	211;"	d
PVARAN	include/pcl/pcl_macros.h	207;"	d
PVARAS	include/pcl/pcl_macros.h	215;"	d
PVARC	include/pcl/pcl_macros.h	195;"	d
PVARN	include/pcl/pcl_macros.h	191;"	d
PVARS	include/pcl/pcl_macros.h	199;"	d
PairOfImages	include/pcl/io/ensenso_grabber.h	/^      typedef std::pair<pcl::PCLImage, pcl::PCLImage> PairOfImages;$/;"	t	class:pcl::EnsensoGrabber
Parameters	include/pcl/common/polynomial_calculations.h	/^        Parameters () : zero_value (), sqr_zero_value () { setZeroValue (1e-6);}$/;"	f	struct:pcl::PolynomialCalculationsT::Parameters
Parameters	include/pcl/common/polynomial_calculations.h	/^      struct Parameters$/;"	s	class:pcl::PolynomialCalculationsT
Parameters	include/pcl/common/poses_from_matches.h	/^        Parameters() : max_correspondence_distance_error(0.2f) {}$/;"	f	struct:pcl::PosesFromMatches::Parameters
Parameters	include/pcl/common/poses_from_matches.h	/^      struct PCL_EXPORTS Parameters$/;"	s	class:pcl::PosesFromMatches
Parameters	include/pcl/common/random.h	/^            Parameters (T _mean = 0, T _sigma = 1, pcl::uint32_t _seed = 1)$/;"	f	struct:pcl::common::NormalGenerator::Parameters
Parameters	include/pcl/common/random.h	/^            Parameters (T _min = 0, T _max = 1, pcl::uint32_t _seed = 1)$/;"	f	struct:pcl::common::UniformGenerator::Parameters
Parameters	include/pcl/common/random.h	/^        struct Parameters$/;"	s	class:pcl::common::NormalGenerator
Parameters	include/pcl/common/random.h	/^        struct Parameters$/;"	s	class:pcl::common::UniformGenerator
PiecewiseLinearFunction	include/pcl/common/impl/piecewise_linear_function.hpp	/^PiecewiseLinearFunction::PiecewiseLinearFunction(float factor, float offset) : factor_(factor), offset_(offset)$/;"	f	class:pcl::PiecewiseLinearFunction
PiecewiseLinearFunction	include/pcl/common/piecewise_linear_function.h	/^  class PiecewiseLinearFunction$/;"	c	namespace:pcl
PixelFormat	include/pcl/io/openni2/openni2_video_mode.h	/^      } PixelFormat;$/;"	t	namespace:pcl::io::openni2	typeref:enum:pcl::io::openni2::__anon13
Pod	include/pcl/common/centroid.h	/^    typedef typename traits::POD<PointT>::type Pod;$/;"	t	struct:pcl::NdCentroidFunctor
Pod	include/pcl/point_cloud.h	/^    typedef typename traits::POD<PointInT>::type Pod;$/;"	t	struct:pcl::NdCopyPointEigenFunctor
Pod	include/pcl/point_cloud.h	/^    typedef typename traits::POD<PointOutT>::type Pod;$/;"	t	struct:pcl::NdCopyEigenPointFunctor
Pod	include/pcl/point_representation.h	/^      typedef typename traits::POD<PointDefault>::type Pod;$/;"	t	struct:pcl::DefaultFeatureRepresentation::NdCopyPointFunctor
Pod	include/pcl/point_traits.h	/^    typedef typename traits::POD<PointInT>::type Pod;$/;"	t	struct:pcl::CopyIfFieldExists
Pod	include/pcl/point_traits.h	/^    typedef typename traits::POD<PointOutT>::type Pod;$/;"	t	struct:pcl::SetIfFieldExists
PodIn	include/pcl/common/concatenate.h	/^    typedef typename traits::POD<PointInT>::type PodIn;$/;"	t	struct:pcl::NdConcatenateFunctor
PodOut	include/pcl/common/concatenate.h	/^    typedef typename traits::POD<PointOutT>::type PodOut;$/;"	t	struct:pcl::NdConcatenateFunctor
PointCloud	include/pcl/common/pca.h	/^      typedef typename Base::PointCloud PointCloud;$/;"	t	class:pcl::PCA
PointCloud	include/pcl/io/point_cloud_image_extractors.h	/^        typedef pcl::PointCloud<PointT> PointCloud;$/;"	t	class:pcl::io::PointCloudImageExtractor
PointCloud	include/pcl/io/point_cloud_image_extractors.h	/^      typedef typename PointCloudImageExtractor<PointT>::PointCloud PointCloud;$/;"	t	class:pcl::io::PointCloudImageExtractorFromCurvatureField
PointCloud	include/pcl/io/point_cloud_image_extractors.h	/^      typedef typename PointCloudImageExtractor<PointT>::PointCloud PointCloud;$/;"	t	class:pcl::io::PointCloudImageExtractorFromIntensityField
PointCloud	include/pcl/io/point_cloud_image_extractors.h	/^      typedef typename PointCloudImageExtractor<PointT>::PointCloud PointCloud;$/;"	t	class:pcl::io::PointCloudImageExtractorFromLabelField
PointCloud	include/pcl/io/point_cloud_image_extractors.h	/^      typedef typename PointCloudImageExtractor<PointT>::PointCloud PointCloud;$/;"	t	class:pcl::io::PointCloudImageExtractorFromNormalField
PointCloud	include/pcl/io/point_cloud_image_extractors.h	/^      typedef typename PointCloudImageExtractor<PointT>::PointCloud PointCloud;$/;"	t	class:pcl::io::PointCloudImageExtractorFromRGBField
PointCloud	include/pcl/io/point_cloud_image_extractors.h	/^      typedef typename PointCloudImageExtractor<PointT>::PointCloud PointCloud;$/;"	t	class:pcl::io::PointCloudImageExtractorFromZField
PointCloud	include/pcl/io/point_cloud_image_extractors.h	/^      typedef typename PointCloudImageExtractor<PointT>::PointCloud PointCloud;$/;"	t	class:pcl::io::PointCloudImageExtractorWithScaling
PointCloud	include/pcl/pcl_base.h	/^      typedef pcl::PointCloud<PointT> PointCloud;$/;"	t	class:pcl::PCLBase
PointCloud	include/pcl/point_cloud.h	/^      PointCloud () : $/;"	f	class:pcl::PointCloud
PointCloud	include/pcl/point_cloud.h	/^      PointCloud (PointCloud<PointT> &pc) : $/;"	f	class:pcl::PointCloud
PointCloud	include/pcl/point_cloud.h	/^      PointCloud (const PointCloud<PointT> &pc) : $/;"	f	class:pcl::PointCloud
PointCloud	include/pcl/point_cloud.h	/^      PointCloud (const PointCloud<PointT> &pc, $/;"	f	class:pcl::PointCloud
PointCloud	include/pcl/point_cloud.h	/^      PointCloud (uint32_t width_, uint32_t height_, const PointT& value_ = PointT ())$/;"	f	class:pcl::PointCloud
PointCloud	include/pcl/point_cloud.h	/^  class PCL_EXPORTS PointCloud$/;"	c	namespace:pcl
PointCloud2Update	include/map_msgs/PointCloud2Update.h	/^typedef ::map_msgs::PointCloud2Update_<std::allocator<void> > PointCloud2Update;$/;"	t	namespace:map_msgs
PointCloud2UpdateConstPtr	include/map_msgs/PointCloud2Update.h	/^typedef boost::shared_ptr< ::map_msgs::PointCloud2Update const> PointCloud2UpdateConstPtr;$/;"	t	namespace:map_msgs
PointCloud2UpdatePtr	include/map_msgs/PointCloud2Update.h	/^typedef boost::shared_ptr< ::map_msgs::PointCloud2Update > PointCloud2UpdatePtr;$/;"	t	namespace:map_msgs
PointCloud2Update_	include/map_msgs/PointCloud2Update.h	/^  PointCloud2Update_()$/;"	f	struct:map_msgs::PointCloud2Update_
PointCloud2Update_	include/map_msgs/PointCloud2Update.h	/^  PointCloud2Update_(const ContainerAllocator& _alloc)$/;"	f	struct:map_msgs::PointCloud2Update_
PointCloud2Update_	include/map_msgs/PointCloud2Update.h	/^struct PointCloud2Update_$/;"	s	namespace:map_msgs
PointCloudConstPtr	include/pcl/common/pca.h	/^      typedef typename Base::PointCloudConstPtr PointCloudConstPtr;$/;"	t	class:pcl::PCA
PointCloudConstPtr	include/pcl/pcl_base.h	/^      typedef typename PointCloud::ConstPtr PointCloudConstPtr;$/;"	t	class:pcl::PCLBase
PointCloudDepthAndRGBtoXYZRGBA	include/pcl/point_types_conversion.h	/^  PointCloudDepthAndRGBtoXYZRGBA (const PointCloud<Intensity>&  depth,$/;"	f	namespace:pcl
PointCloudImageExtractor	include/pcl/io/point_cloud_image_extractors.h	/^        PointCloudImageExtractor ()$/;"	f	class:pcl::io::PointCloudImageExtractor
PointCloudImageExtractor	include/pcl/io/point_cloud_image_extractors.h	/^    class PointCloudImageExtractor$/;"	c	namespace:pcl::io
PointCloudImageExtractorFromCurvatureField	include/pcl/io/point_cloud_image_extractors.h	/^        PointCloudImageExtractorFromCurvatureField (const ScalingMethod scaling_method = PointCloudImageExtractorWithScaling<PointT>::SCALING_FULL_RANGE)$/;"	f	class:pcl::io::PointCloudImageExtractorFromCurvatureField
PointCloudImageExtractorFromCurvatureField	include/pcl/io/point_cloud_image_extractors.h	/^        PointCloudImageExtractorFromCurvatureField (const float scaling_factor)$/;"	f	class:pcl::io::PointCloudImageExtractorFromCurvatureField
PointCloudImageExtractorFromCurvatureField	include/pcl/io/point_cloud_image_extractors.h	/^    class PointCloudImageExtractorFromCurvatureField : public PointCloudImageExtractorWithScaling<PointT>$/;"	c	namespace:pcl::io
PointCloudImageExtractorFromIntensityField	include/pcl/io/point_cloud_image_extractors.h	/^        PointCloudImageExtractorFromIntensityField (const ScalingMethod scaling_method = PointCloudImageExtractorWithScaling<PointT>::SCALING_NO)$/;"	f	class:pcl::io::PointCloudImageExtractorFromIntensityField
PointCloudImageExtractorFromIntensityField	include/pcl/io/point_cloud_image_extractors.h	/^        PointCloudImageExtractorFromIntensityField (const float scaling_factor)$/;"	f	class:pcl::io::PointCloudImageExtractorFromIntensityField
PointCloudImageExtractorFromIntensityField	include/pcl/io/point_cloud_image_extractors.h	/^    class PointCloudImageExtractorFromIntensityField : public PointCloudImageExtractorWithScaling<PointT>$/;"	c	namespace:pcl::io
PointCloudImageExtractorFromLabelField	include/pcl/io/point_cloud_image_extractors.h	/^        PointCloudImageExtractorFromLabelField (const ColorMode color_mode = COLORS_MONO)$/;"	f	class:pcl::io::PointCloudImageExtractorFromLabelField
PointCloudImageExtractorFromLabelField	include/pcl/io/point_cloud_image_extractors.h	/^    class PointCloudImageExtractorFromLabelField : public PointCloudImageExtractor<PointT>$/;"	c	namespace:pcl::io
PointCloudImageExtractorFromNormalField	include/pcl/io/point_cloud_image_extractors.h	/^        PointCloudImageExtractorFromNormalField () {}$/;"	f	class:pcl::io::PointCloudImageExtractorFromNormalField
PointCloudImageExtractorFromNormalField	include/pcl/io/point_cloud_image_extractors.h	/^    class PointCloudImageExtractorFromNormalField : public PointCloudImageExtractor<PointT>$/;"	c	namespace:pcl::io
PointCloudImageExtractorFromRGBField	include/pcl/io/point_cloud_image_extractors.h	/^        PointCloudImageExtractorFromRGBField () {}$/;"	f	class:pcl::io::PointCloudImageExtractorFromRGBField
PointCloudImageExtractorFromRGBField	include/pcl/io/point_cloud_image_extractors.h	/^    class PointCloudImageExtractorFromRGBField : public PointCloudImageExtractor<PointT>$/;"	c	namespace:pcl::io
PointCloudImageExtractorFromZField	include/pcl/io/point_cloud_image_extractors.h	/^        PointCloudImageExtractorFromZField (const ScalingMethod scaling_method)$/;"	f	class:pcl::io::PointCloudImageExtractorFromZField
PointCloudImageExtractorFromZField	include/pcl/io/point_cloud_image_extractors.h	/^        PointCloudImageExtractorFromZField (const float scaling_factor = 10000)$/;"	f	class:pcl::io::PointCloudImageExtractorFromZField
PointCloudImageExtractorFromZField	include/pcl/io/point_cloud_image_extractors.h	/^    class PointCloudImageExtractorFromZField : public PointCloudImageExtractorWithScaling<PointT>$/;"	c	namespace:pcl::io
PointCloudImageExtractorWithScaling	include/pcl/io/point_cloud_image_extractors.h	/^        PointCloudImageExtractorWithScaling (const std::string& field_name, const ScalingMethod scaling_method)$/;"	f	class:pcl::io::PointCloudImageExtractorWithScaling
PointCloudImageExtractorWithScaling	include/pcl/io/point_cloud_image_extractors.h	/^        PointCloudImageExtractorWithScaling (const std::string& field_name, const float scaling_factor)$/;"	f	class:pcl::io::PointCloudImageExtractorWithScaling
PointCloudImageExtractorWithScaling	include/pcl/io/point_cloud_image_extractors.h	/^    class PointCloudImageExtractorWithScaling : public PointCloudImageExtractor<PointT>$/;"	c	namespace:pcl::io
PointCloudPtr	include/pcl/common/pca.h	/^      typedef typename Base::PointCloudPtr PointCloudPtr;$/;"	t	class:pcl::PCA
PointCloudPtr	include/pcl/pcl_base.h	/^      typedef typename PointCloud::Ptr PointCloudPtr;$/;"	t	class:pcl::PCLBase
PointCloudRGBtoI	include/pcl/point_types_conversion.h	/^  PointCloudRGBtoI (const PointCloud<RGB>&     in,$/;"	f	namespace:pcl
PointCloudRGBtoI	include/pcl/point_types_conversion.h	/^  PointCloudRGBtoI (const PointCloud<RGB>&    in,$/;"	f	namespace:pcl
PointCloudRGBtoI	include/pcl/point_types_conversion.h	/^  PointCloudRGBtoI (const PointCloud<RGB>&  in,$/;"	f	namespace:pcl
PointCloudXYZRGBAtoXYZHSV	include/pcl/point_types_conversion.h	/^  PointCloudXYZRGBAtoXYZHSV (const PointCloud<PointXYZRGBA>& in,$/;"	f	namespace:pcl
PointCloudXYZRGBtoXYZHSV	include/pcl/point_types_conversion.h	/^  PointCloudXYZRGBtoXYZHSV (const PointCloud<PointXYZRGB>& in,$/;"	f	namespace:pcl
PointCloudXYZRGBtoXYZI	include/pcl/point_types_conversion.h	/^  PointCloudXYZRGBtoXYZI (const PointCloud<PointXYZRGB>& in,$/;"	f	namespace:pcl
PointCorrespondence3D	include/pcl/correspondence.h	/^    PointCorrespondence3D () : point1 (), point2 () {}$/;"	f	struct:pcl::PointCorrespondence3D
PointCorrespondence3D	include/pcl/correspondence.h	/^  struct PointCorrespondence3D : public Correspondence$/;"	s	namespace:pcl
PointCorrespondence6D	include/pcl/correspondence.h	/^  struct PointCorrespondence6D : public PointCorrespondence3D$/;"	s	namespace:pcl
PointCorrespondences3DVector	include/pcl/correspondence.h	/^  typedef std::vector<PointCorrespondence3D, Eigen::aligned_allocator<PointCorrespondence3D> > PointCorrespondences3DVector;$/;"	t	namespace:pcl
PointCorrespondences6DVector	include/pcl/correspondence.h	/^  typedef std::vector<PointCorrespondence6D, Eigen::aligned_allocator<PointCorrespondence6D> > PointCorrespondences6DVector;$/;"	t	namespace:pcl
PointDEM	include/pcl/impl/point_types.hpp	/^    inline PointDEM ()$/;"	f	struct:pcl::PointDEM
PointDEM	include/pcl/impl/point_types.hpp	/^    inline PointDEM (const _PointDEM &p)$/;"	f	struct:pcl::PointDEM
PointDEM	include/pcl/impl/point_types.hpp	/^  struct PointDEM : public _PointDEM$/;"	s	namespace:pcl
PointFieldTypes	include/pcl/PCLPointField.h	/^    enum PointFieldTypes { INT8 = 1,$/;"	g	struct:pcl::PCLPointField
PointIndices	include/pcl/PointIndices.h	/^    PointIndices () : header (), indices ()$/;"	f	struct:pcl::PointIndices
PointIndices	include/pcl/PointIndices.h	/^  struct PointIndices$/;"	s	namespace:pcl
PointIndicesConstPtr	include/pcl/PointIndices.h	/^  typedef boost::shared_ptr< ::pcl::PointIndices const> PointIndicesConstPtr;$/;"	t	namespace:pcl
PointIndicesConstPtr	include/pcl/common/pca.h	/^      typedef typename Base::PointIndicesConstPtr PointIndicesConstPtr;$/;"	t	class:pcl::PCA
PointIndicesConstPtr	include/pcl/pcl_base.h	/^      typedef boost::shared_ptr<PointIndices const> PointIndicesConstPtr;$/;"	t	class:pcl::PCLBase
PointIndicesPtr	include/pcl/PointIndices.h	/^  typedef boost::shared_ptr< ::pcl::PointIndices> PointIndicesPtr;$/;"	t	namespace:pcl
PointIndicesPtr	include/pcl/common/pca.h	/^      typedef typename Base::PointIndicesPtr PointIndicesPtr;$/;"	t	class:pcl::PCA
PointIndicesPtr	include/pcl/pcl_base.h	/^      typedef boost::shared_ptr<PointIndices> PointIndicesPtr;$/;"	t	class:pcl::PCLBase
PointNormal	include/pcl/impl/point_types.hpp	/^    inline PointNormal ()$/;"	f	struct:pcl::PointNormal
PointNormal	include/pcl/impl/point_types.hpp	/^    inline PointNormal (const _PointNormal &p)$/;"	f	struct:pcl::PointNormal
PointNormal	include/pcl/impl/point_types.hpp	/^  struct PointNormal : public _PointNormal$/;"	s	namespace:pcl
PointRGBtoI	include/pcl/point_types_conversion.h	/^  PointRGBtoI (const RGB&    in,$/;"	f	namespace:pcl
PointRepresentation	include/pcl/point_representation.h	/^      PointRepresentation () : nr_dimensions_ (0), alpha_ (0), trivial_ (false) {}$/;"	f	class:pcl::PointRepresentation
PointRepresentation	include/pcl/point_representation.h	/^  class PointRepresentation$/;"	c	namespace:pcl
PointSurfel	include/pcl/impl/point_types.hpp	/^    inline PointSurfel ()$/;"	f	struct:pcl::PointSurfel
PointSurfel	include/pcl/impl/point_types.hpp	/^    inline PointSurfel (const _PointSurfel &p)$/;"	f	struct:pcl::PointSurfel
PointSurfel	include/pcl/impl/point_types.hpp	/^  struct PointSurfel : public _PointSurfel$/;"	s	namespace:pcl
PointType	include/pcl/point_cloud.h	/^      typedef PointT PointType;  \/\/ Make the template class available from the outside$/;"	t	class:pcl::PointCloud
PointUV	include/pcl/impl/point_types.hpp	/^  struct PointUV$/;"	s	namespace:pcl
PointWithRange	include/pcl/impl/point_types.hpp	/^    inline PointWithRange ()$/;"	f	struct:pcl::PointWithRange
PointWithRange	include/pcl/impl/point_types.hpp	/^    inline PointWithRange (const _PointWithRange &p)$/;"	f	struct:pcl::PointWithRange
PointWithRange	include/pcl/impl/point_types.hpp	/^  struct PointWithRange : public _PointWithRange$/;"	s	namespace:pcl
PointWithScale	include/pcl/impl/point_types.hpp	/^    inline PointWithScale ()$/;"	f	struct:pcl::PointWithScale
PointWithScale	include/pcl/impl/point_types.hpp	/^    inline PointWithScale (const _PointWithScale &p)$/;"	f	struct:pcl::PointWithScale
PointWithScale	include/pcl/impl/point_types.hpp	/^    inline PointWithScale (float _x, float _y, float _z, float _scale)$/;"	f	struct:pcl::PointWithScale
PointWithScale	include/pcl/impl/point_types.hpp	/^    inline PointWithScale (float _x, float _y, float _z, float _scale, float _angle, float _response, int _octave)$/;"	f	struct:pcl::PointWithScale
PointWithScale	include/pcl/impl/point_types.hpp	/^  struct PointWithScale : public _PointWithScale$/;"	s	namespace:pcl
PointWithViewpoint	include/pcl/impl/point_types.hpp	/^    inline PointWithViewpoint (const _PointWithViewpoint &p)$/;"	f	struct:pcl::PointWithViewpoint
PointWithViewpoint	include/pcl/impl/point_types.hpp	/^    inline PointWithViewpoint (float _x = 0.0f, float _y = 0.0f, float _z = 0.0f,$/;"	f	struct:pcl::PointWithViewpoint
PointWithViewpoint	include/pcl/impl/point_types.hpp	/^  struct EIGEN_ALIGN16 PointWithViewpoint : public _PointWithViewpoint$/;"	s	namespace:pcl
PointXY	include/pcl/impl/point_types.hpp	/^  struct PointXY$/;"	s	namespace:pcl
PointXYZ	include/pcl/impl/point_types.hpp	/^    inline PointXYZ ()$/;"	f	struct:pcl::PointXYZ
PointXYZ	include/pcl/impl/point_types.hpp	/^    inline PointXYZ (const _PointXYZ &p)$/;"	f	struct:pcl::PointXYZ
PointXYZ	include/pcl/impl/point_types.hpp	/^    inline PointXYZ (float _x, float _y, float _z)$/;"	f	struct:pcl::PointXYZ
PointXYZ	include/pcl/impl/point_types.hpp	/^  struct EIGEN_ALIGN16 PointXYZ : public _PointXYZ$/;"	s	namespace:pcl
PointXYZHSV	include/pcl/impl/point_types.hpp	/^    inline PointXYZHSV ()$/;"	f	struct:pcl::PointXYZHSV
PointXYZHSV	include/pcl/impl/point_types.hpp	/^    inline PointXYZHSV (const _PointXYZHSV &p)$/;"	f	struct:pcl::PointXYZHSV
PointXYZHSV	include/pcl/impl/point_types.hpp	/^    inline PointXYZHSV (float _h, float _v, float _s)$/;"	f	struct:pcl::PointXYZHSV
PointXYZHSV	include/pcl/impl/point_types.hpp	/^  struct EIGEN_ALIGN16 PointXYZHSV : public _PointXYZHSV$/;"	s	namespace:pcl
PointXYZHSVtoXYZRGB	include/pcl/point_types_conversion.h	/^  PointXYZHSVtoXYZRGB (const PointXYZHSV&  in,$/;"	f	namespace:pcl
PointXYZI	include/pcl/impl/point_types.hpp	/^    inline PointXYZI ()$/;"	f	struct:pcl::PointXYZI
PointXYZI	include/pcl/impl/point_types.hpp	/^    inline PointXYZI (const _PointXYZI &p)$/;"	f	struct:pcl::PointXYZI
PointXYZI	include/pcl/impl/point_types.hpp	/^    inline PointXYZI (float _intensity)$/;"	f	struct:pcl::PointXYZI
PointXYZI	include/pcl/impl/point_types.hpp	/^  struct PointXYZI : public _PointXYZI$/;"	s	namespace:pcl
PointXYZINormal	include/pcl/impl/point_types.hpp	/^    inline PointXYZINormal ()$/;"	f	struct:pcl::PointXYZINormal
PointXYZINormal	include/pcl/impl/point_types.hpp	/^    inline PointXYZINormal (const _PointXYZINormal &p)$/;"	f	struct:pcl::PointXYZINormal
PointXYZINormal	include/pcl/impl/point_types.hpp	/^  struct PointXYZINormal : public _PointXYZINormal$/;"	s	namespace:pcl
PointXYZL	include/pcl/impl/point_types.hpp	/^    inline PointXYZL ()$/;"	f	struct:pcl::PointXYZL
PointXYZL	include/pcl/impl/point_types.hpp	/^    inline PointXYZL (const _PointXYZL &p)$/;"	f	struct:pcl::PointXYZL
PointXYZL	include/pcl/impl/point_types.hpp	/^  struct PointXYZL : public _PointXYZL$/;"	s	namespace:pcl
PointXYZLNormal	include/pcl/impl/point_types.hpp	/^    inline PointXYZLNormal ()$/;"	f	struct:pcl::PointXYZLNormal
PointXYZLNormal	include/pcl/impl/point_types.hpp	/^    inline PointXYZLNormal (const _PointXYZLNormal &p)$/;"	f	struct:pcl::PointXYZLNormal
PointXYZLNormal	include/pcl/impl/point_types.hpp	/^  struct PointXYZLNormal : public _PointXYZLNormal$/;"	s	namespace:pcl
PointXYZRGB	include/pcl/impl/point_types.hpp	/^    inline PointXYZRGB ()$/;"	f	struct:pcl::PointXYZRGB
PointXYZRGB	include/pcl/impl/point_types.hpp	/^    inline PointXYZRGB (const _PointXYZRGB &p)$/;"	f	struct:pcl::PointXYZRGB
PointXYZRGB	include/pcl/impl/point_types.hpp	/^    inline PointXYZRGB (uint8_t _r, uint8_t _g, uint8_t _b)$/;"	f	struct:pcl::PointXYZRGB
PointXYZRGB	include/pcl/impl/point_types.hpp	/^  struct EIGEN_ALIGN16 PointXYZRGB : public _PointXYZRGB$/;"	s	namespace:pcl
PointXYZRGBA	include/pcl/impl/point_types.hpp	/^    inline PointXYZRGBA ()$/;"	f	struct:pcl::PointXYZRGBA
PointXYZRGBA	include/pcl/impl/point_types.hpp	/^    inline PointXYZRGBA (const _PointXYZRGBA &p)$/;"	f	struct:pcl::PointXYZRGBA
PointXYZRGBA	include/pcl/impl/point_types.hpp	/^  struct EIGEN_ALIGN16 PointXYZRGBA : public _PointXYZRGBA$/;"	s	namespace:pcl
PointXYZRGBAtoXYZHSV	include/pcl/point_types_conversion.h	/^  PointXYZRGBAtoXYZHSV (const PointXYZRGBA& in,$/;"	f	namespace:pcl
PointXYZRGBL	include/pcl/impl/point_types.hpp	/^    inline PointXYZRGBL ()$/;"	f	struct:pcl::PointXYZRGBL
PointXYZRGBL	include/pcl/impl/point_types.hpp	/^    inline PointXYZRGBL (const _PointXYZRGBL &p)$/;"	f	struct:pcl::PointXYZRGBL
PointXYZRGBL	include/pcl/impl/point_types.hpp	/^    inline PointXYZRGBL (uint8_t _r, uint8_t _g, uint8_t _b, uint32_t _label)$/;"	f	struct:pcl::PointXYZRGBL
PointXYZRGBL	include/pcl/impl/point_types.hpp	/^  struct EIGEN_ALIGN16 PointXYZRGBL : public _PointXYZRGBL$/;"	s	namespace:pcl
PointXYZRGBNormal	include/pcl/impl/point_types.hpp	/^    inline PointXYZRGBNormal ()$/;"	f	struct:pcl::PointXYZRGBNormal
PointXYZRGBNormal	include/pcl/impl/point_types.hpp	/^    inline PointXYZRGBNormal (const _PointXYZRGBNormal &p)$/;"	f	struct:pcl::PointXYZRGBNormal
PointXYZRGBNormal	include/pcl/impl/point_types.hpp	/^  struct PointXYZRGBNormal : public _PointXYZRGBNormal$/;"	s	namespace:pcl
PointXYZRGBtoXYZHSV	include/pcl/point_types_conversion.h	/^  PointXYZRGBtoXYZHSV (const PointXYZRGB& in,$/;"	f	namespace:pcl
PointXYZRGBtoXYZI	include/pcl/point_types_conversion.h	/^  PointXYZRGBtoXYZI (const PointXYZRGB& in,$/;"	f	namespace:pcl
PolygonMesh	include/pcl/PolygonMesh.h	/^    PolygonMesh () : header (), cloud (), polygons ()$/;"	f	struct:pcl::PolygonMesh
PolygonMesh	include/pcl/PolygonMesh.h	/^  struct PolygonMesh$/;"	s	namespace:pcl
PolygonMeshConstPtr	include/pcl/PolygonMesh.h	/^  typedef boost::shared_ptr< ::pcl::PolygonMesh const> PolygonMeshConstPtr;$/;"	t	namespace:pcl
PolygonMeshPtr	include/pcl/PolygonMesh.h	/^  typedef boost::shared_ptr< ::pcl::PolygonMesh> PolygonMeshPtr;$/;"	t	namespace:pcl
PolygonOutlineCells	include/costmap_2d/costmap_2d.h	/^    PolygonOutlineCells(const Costmap2D& costmap, const unsigned char* char_map, std::vector<MapLocation>& cells) :$/;"	f	class:costmap_2d::Costmap2D::PolygonOutlineCells
PolygonOutlineCells	include/costmap_2d/costmap_2d.h	/^  class PolygonOutlineCells$/;"	c	class:costmap_2d::Costmap2D
PolynomialCalculations	include/pcl/common/polynomial_calculations.h	/^  typedef PolynomialCalculationsT<float>  PolynomialCalculations;$/;"	t	namespace:pcl
PolynomialCalculationsT	include/pcl/common/impl/polynomial_calculations.hpp	/^pcl::PolynomialCalculationsT<real>::PolynomialCalculationsT ()$/;"	f	class:pcl::PolynomialCalculationsT
PolynomialCalculationsT	include/pcl/common/polynomial_calculations.h	/^  class PolynomialCalculationsT $/;"	c	namespace:pcl
PolynomialCalculationsd	include/pcl/common/polynomial_calculations.h	/^  typedef PolynomialCalculationsT<double> PolynomialCalculationsd;$/;"	t	namespace:pcl
PoseEstimate	include/pcl/common/poses_from_matches.h	/^        PoseEstimate () : $/;"	f	struct:pcl::PosesFromMatches::PoseEstimate
PoseEstimate	include/pcl/common/poses_from_matches.h	/^      struct PoseEstimate$/;"	s	class:pcl::PosesFromMatches
PoseEstimatesVector	include/pcl/common/poses_from_matches.h	/^      typedef std::vector<PoseEstimate, Eigen::aligned_allocator<PoseEstimate> > PoseEstimatesVector;$/;"	t	class:pcl::PosesFromMatches
PosesFromMatches	include/pcl/common/poses_from_matches.h	/^  class PCL_EXPORTS PosesFromMatches$/;"	c	namespace:pcl
PrincipalCurvatures	include/pcl/impl/point_types.hpp	/^  struct PrincipalCurvatures$/;"	s	namespace:pcl
PrincipalRadiiRSD	include/pcl/impl/point_types.hpp	/^  struct PrincipalRadiiRSD$/;"	s	namespace:pcl
Printer	include/map_msgs/GetMapROIRequest.h	/^struct Printer< ::map_msgs::GetMapROIRequest_<ContainerAllocator> >$/;"	s	namespace:ros::message_operations
Printer	include/map_msgs/GetMapROIResponse.h	/^struct Printer< ::map_msgs::GetMapROIResponse_<ContainerAllocator> >$/;"	s	namespace:ros::message_operations
Printer	include/map_msgs/GetPointMapROIRequest.h	/^struct Printer< ::map_msgs::GetPointMapROIRequest_<ContainerAllocator> >$/;"	s	namespace:ros::message_operations
Printer	include/map_msgs/GetPointMapROIResponse.h	/^struct Printer< ::map_msgs::GetPointMapROIResponse_<ContainerAllocator> >$/;"	s	namespace:ros::message_operations
Printer	include/map_msgs/GetPointMapRequest.h	/^struct Printer< ::map_msgs::GetPointMapRequest_<ContainerAllocator> >$/;"	s	namespace:ros::message_operations
Printer	include/map_msgs/GetPointMapResponse.h	/^struct Printer< ::map_msgs::GetPointMapResponse_<ContainerAllocator> >$/;"	s	namespace:ros::message_operations
Printer	include/map_msgs/OccupancyGridUpdate.h	/^struct Printer< ::map_msgs::OccupancyGridUpdate_<ContainerAllocator> >$/;"	s	namespace:ros::message_operations
Printer	include/map_msgs/PointCloud2Update.h	/^struct Printer< ::map_msgs::PointCloud2Update_<ContainerAllocator> >$/;"	s	namespace:ros::message_operations
Printer	include/map_msgs/ProjectedMap.h	/^struct Printer< ::map_msgs::ProjectedMap_<ContainerAllocator> >$/;"	s	namespace:ros::message_operations
Printer	include/map_msgs/ProjectedMapInfo.h	/^struct Printer< ::map_msgs::ProjectedMapInfo_<ContainerAllocator> >$/;"	s	namespace:ros::message_operations
Printer	include/map_msgs/ProjectedMapsInfoRequest.h	/^struct Printer< ::map_msgs::ProjectedMapsInfoRequest_<ContainerAllocator> >$/;"	s	namespace:ros::message_operations
Printer	include/map_msgs/ProjectedMapsInfoResponse.h	/^struct Printer< ::map_msgs::ProjectedMapsInfoResponse_<ContainerAllocator> >$/;"	s	namespace:ros::message_operations
Printer	include/map_msgs/SaveMapRequest.h	/^struct Printer< ::map_msgs::SaveMapRequest_<ContainerAllocator> >$/;"	s	namespace:ros::message_operations
Printer	include/map_msgs/SaveMapResponse.h	/^struct Printer< ::map_msgs::SaveMapResponse_<ContainerAllocator> >$/;"	s	namespace:ros::message_operations
Printer	include/map_msgs/SetMapProjectionsRequest.h	/^struct Printer< ::map_msgs::SetMapProjectionsRequest_<ContainerAllocator> >$/;"	s	namespace:ros::message_operations
Printer	include/map_msgs/SetMapProjectionsResponse.h	/^struct Printer< ::map_msgs::SetMapProjectionsResponse_<ContainerAllocator> >$/;"	s	namespace:ros::message_operations
ProjectedMap	include/map_msgs/ProjectedMap.h	/^typedef ::map_msgs::ProjectedMap_<std::allocator<void> > ProjectedMap;$/;"	t	namespace:map_msgs
ProjectedMapConstPtr	include/map_msgs/ProjectedMap.h	/^typedef boost::shared_ptr< ::map_msgs::ProjectedMap const> ProjectedMapConstPtr;$/;"	t	namespace:map_msgs
ProjectedMapInfo	include/map_msgs/ProjectedMapInfo.h	/^typedef ::map_msgs::ProjectedMapInfo_<std::allocator<void> > ProjectedMapInfo;$/;"	t	namespace:map_msgs
ProjectedMapInfoConstPtr	include/map_msgs/ProjectedMapInfo.h	/^typedef boost::shared_ptr< ::map_msgs::ProjectedMapInfo const> ProjectedMapInfoConstPtr;$/;"	t	namespace:map_msgs
ProjectedMapInfoPtr	include/map_msgs/ProjectedMapInfo.h	/^typedef boost::shared_ptr< ::map_msgs::ProjectedMapInfo > ProjectedMapInfoPtr;$/;"	t	namespace:map_msgs
ProjectedMapInfo_	include/map_msgs/ProjectedMapInfo.h	/^  ProjectedMapInfo_()$/;"	f	struct:map_msgs::ProjectedMapInfo_
ProjectedMapInfo_	include/map_msgs/ProjectedMapInfo.h	/^  ProjectedMapInfo_(const ContainerAllocator& _alloc)$/;"	f	struct:map_msgs::ProjectedMapInfo_
ProjectedMapInfo_	include/map_msgs/ProjectedMapInfo.h	/^struct ProjectedMapInfo_$/;"	s	namespace:map_msgs
ProjectedMapPtr	include/map_msgs/ProjectedMap.h	/^typedef boost::shared_ptr< ::map_msgs::ProjectedMap > ProjectedMapPtr;$/;"	t	namespace:map_msgs
ProjectedMap_	include/map_msgs/ProjectedMap.h	/^  ProjectedMap_()$/;"	f	struct:map_msgs::ProjectedMap_
ProjectedMap_	include/map_msgs/ProjectedMap.h	/^  ProjectedMap_(const ContainerAllocator& _alloc)$/;"	f	struct:map_msgs::ProjectedMap_
ProjectedMap_	include/map_msgs/ProjectedMap.h	/^struct ProjectedMap_$/;"	s	namespace:map_msgs
ProjectedMapsInfo	include/map_msgs/ProjectedMapsInfo.h	/^struct ProjectedMapsInfo$/;"	s	namespace:map_msgs
ProjectedMapsInfoRequest	include/map_msgs/ProjectedMapsInfoRequest.h	/^typedef ::map_msgs::ProjectedMapsInfoRequest_<std::allocator<void> > ProjectedMapsInfoRequest;$/;"	t	namespace:map_msgs
ProjectedMapsInfoRequestConstPtr	include/map_msgs/ProjectedMapsInfoRequest.h	/^typedef boost::shared_ptr< ::map_msgs::ProjectedMapsInfoRequest const> ProjectedMapsInfoRequestConstPtr;$/;"	t	namespace:map_msgs
ProjectedMapsInfoRequestPtr	include/map_msgs/ProjectedMapsInfoRequest.h	/^typedef boost::shared_ptr< ::map_msgs::ProjectedMapsInfoRequest > ProjectedMapsInfoRequestPtr;$/;"	t	namespace:map_msgs
ProjectedMapsInfoRequest_	include/map_msgs/ProjectedMapsInfoRequest.h	/^  ProjectedMapsInfoRequest_()$/;"	f	struct:map_msgs::ProjectedMapsInfoRequest_
ProjectedMapsInfoRequest_	include/map_msgs/ProjectedMapsInfoRequest.h	/^  ProjectedMapsInfoRequest_(const ContainerAllocator& _alloc)$/;"	f	struct:map_msgs::ProjectedMapsInfoRequest_
ProjectedMapsInfoRequest_	include/map_msgs/ProjectedMapsInfoRequest.h	/^struct ProjectedMapsInfoRequest_$/;"	s	namespace:map_msgs
ProjectedMapsInfoResponse	include/map_msgs/ProjectedMapsInfoResponse.h	/^typedef ::map_msgs::ProjectedMapsInfoResponse_<std::allocator<void> > ProjectedMapsInfoResponse;$/;"	t	namespace:map_msgs
ProjectedMapsInfoResponseConstPtr	include/map_msgs/ProjectedMapsInfoResponse.h	/^typedef boost::shared_ptr< ::map_msgs::ProjectedMapsInfoResponse const> ProjectedMapsInfoResponseConstPtr;$/;"	t	namespace:map_msgs
ProjectedMapsInfoResponsePtr	include/map_msgs/ProjectedMapsInfoResponse.h	/^typedef boost::shared_ptr< ::map_msgs::ProjectedMapsInfoResponse > ProjectedMapsInfoResponsePtr;$/;"	t	namespace:map_msgs
ProjectedMapsInfoResponse_	include/map_msgs/ProjectedMapsInfoResponse.h	/^  ProjectedMapsInfoResponse_()$/;"	f	struct:map_msgs::ProjectedMapsInfoResponse_
ProjectedMapsInfoResponse_	include/map_msgs/ProjectedMapsInfoResponse.h	/^  ProjectedMapsInfoResponse_(const ContainerAllocator& _alloc)$/;"	f	struct:map_msgs::ProjectedMapsInfoResponse_
ProjectedMapsInfoResponse_	include/map_msgs/ProjectedMapsInfoResponse.h	/^struct ProjectedMapsInfoResponse_$/;"	s	namespace:map_msgs
Ptr	include/map_msgs/GetMapROIRequest.h	/^  typedef boost::shared_ptr< ::map_msgs::GetMapROIRequest_<ContainerAllocator> > Ptr;$/;"	t	struct:map_msgs::GetMapROIRequest_
Ptr	include/map_msgs/GetMapROIResponse.h	/^  typedef boost::shared_ptr< ::map_msgs::GetMapROIResponse_<ContainerAllocator> > Ptr;$/;"	t	struct:map_msgs::GetMapROIResponse_
Ptr	include/map_msgs/GetPointMapROIRequest.h	/^  typedef boost::shared_ptr< ::map_msgs::GetPointMapROIRequest_<ContainerAllocator> > Ptr;$/;"	t	struct:map_msgs::GetPointMapROIRequest_
Ptr	include/map_msgs/GetPointMapROIResponse.h	/^  typedef boost::shared_ptr< ::map_msgs::GetPointMapROIResponse_<ContainerAllocator> > Ptr;$/;"	t	struct:map_msgs::GetPointMapROIResponse_
Ptr	include/map_msgs/GetPointMapRequest.h	/^  typedef boost::shared_ptr< ::map_msgs::GetPointMapRequest_<ContainerAllocator> > Ptr;$/;"	t	struct:map_msgs::GetPointMapRequest_
Ptr	include/map_msgs/GetPointMapResponse.h	/^  typedef boost::shared_ptr< ::map_msgs::GetPointMapResponse_<ContainerAllocator> > Ptr;$/;"	t	struct:map_msgs::GetPointMapResponse_
Ptr	include/map_msgs/OccupancyGridUpdate.h	/^  typedef boost::shared_ptr< ::map_msgs::OccupancyGridUpdate_<ContainerAllocator> > Ptr;$/;"	t	struct:map_msgs::OccupancyGridUpdate_
Ptr	include/map_msgs/PointCloud2Update.h	/^  typedef boost::shared_ptr< ::map_msgs::PointCloud2Update_<ContainerAllocator> > Ptr;$/;"	t	struct:map_msgs::PointCloud2Update_
Ptr	include/map_msgs/ProjectedMap.h	/^  typedef boost::shared_ptr< ::map_msgs::ProjectedMap_<ContainerAllocator> > Ptr;$/;"	t	struct:map_msgs::ProjectedMap_
Ptr	include/map_msgs/ProjectedMapInfo.h	/^  typedef boost::shared_ptr< ::map_msgs::ProjectedMapInfo_<ContainerAllocator> > Ptr;$/;"	t	struct:map_msgs::ProjectedMapInfo_
Ptr	include/map_msgs/ProjectedMapsInfoRequest.h	/^  typedef boost::shared_ptr< ::map_msgs::ProjectedMapsInfoRequest_<ContainerAllocator> > Ptr;$/;"	t	struct:map_msgs::ProjectedMapsInfoRequest_
Ptr	include/map_msgs/ProjectedMapsInfoResponse.h	/^  typedef boost::shared_ptr< ::map_msgs::ProjectedMapsInfoResponse_<ContainerAllocator> > Ptr;$/;"	t	struct:map_msgs::ProjectedMapsInfoResponse_
Ptr	include/map_msgs/SaveMapRequest.h	/^  typedef boost::shared_ptr< ::map_msgs::SaveMapRequest_<ContainerAllocator> > Ptr;$/;"	t	struct:map_msgs::SaveMapRequest_
Ptr	include/map_msgs/SaveMapResponse.h	/^  typedef boost::shared_ptr< ::map_msgs::SaveMapResponse_<ContainerAllocator> > Ptr;$/;"	t	struct:map_msgs::SaveMapResponse_
Ptr	include/map_msgs/SetMapProjectionsRequest.h	/^  typedef boost::shared_ptr< ::map_msgs::SetMapProjectionsRequest_<ContainerAllocator> > Ptr;$/;"	t	struct:map_msgs::SetMapProjectionsRequest_
Ptr	include/map_msgs/SetMapProjectionsResponse.h	/^  typedef boost::shared_ptr< ::map_msgs::SetMapProjectionsResponse_<ContainerAllocator> > Ptr;$/;"	t	struct:map_msgs::SetMapProjectionsResponse_
Ptr	include/pcl/ModelCoefficients.h	/^    typedef boost::shared_ptr< ::pcl::ModelCoefficients> Ptr;$/;"	t	struct:pcl::ModelCoefficients
Ptr	include/pcl/PCLHeader.h	/^    typedef boost::shared_ptr<PCLHeader> Ptr;$/;"	t	struct:pcl::PCLHeader
Ptr	include/pcl/PCLImage.h	/^    typedef boost::shared_ptr< ::pcl::PCLImage> Ptr;$/;"	t	struct:pcl::PCLImage
Ptr	include/pcl/PCLPointCloud2.h	/^    typedef boost::shared_ptr< ::pcl::PCLPointCloud2> Ptr;$/;"	t	struct:pcl::PCLPointCloud2
Ptr	include/pcl/PCLPointField.h	/^    typedef boost::shared_ptr< ::pcl::PCLPointField> Ptr;$/;"	t	struct:pcl::PCLPointField
Ptr	include/pcl/PointIndices.h	/^      typedef boost::shared_ptr< ::pcl::PointIndices> Ptr;$/;"	t	struct:pcl::PointIndices
Ptr	include/pcl/PolygonMesh.h	/^    typedef boost::shared_ptr< ::pcl::PolygonMesh> Ptr;$/;"	t	struct:pcl::PolygonMesh
Ptr	include/pcl/TextureMesh.h	/^      typedef boost::shared_ptr<pcl::TextureMesh> Ptr;$/;"	t	struct:pcl::TextureMesh
Ptr	include/pcl/Vertices.h	/^    typedef boost::shared_ptr<Vertices> Ptr;$/;"	t	struct:pcl::Vertices
Ptr	include/pcl/io/davidsdk_grabber.h	/^      typedef boost::shared_ptr<DavidSDKGrabber> Ptr;$/;"	t	class:pcl::DavidSDKGrabber
Ptr	include/pcl/io/depth_sense/depth_sense_device_manager.h	/^          typedef boost::shared_ptr<DepthSenseDeviceManager> Ptr;$/;"	t	class:pcl::io::depth_sense::DepthSenseDeviceManager
Ptr	include/pcl/io/ensenso_grabber.h	/^      typedef boost::shared_ptr<EnsensoGrabber> Ptr;$/;"	t	class:pcl::EnsensoGrabber
Ptr	include/pcl/io/image.h	/^        typedef boost::shared_ptr<Image> Ptr;$/;"	t	class:pcl::io::Image
Ptr	include/pcl/io/image_depth.h	/^        typedef boost::shared_ptr<DepthImage> Ptr;$/;"	t	class:pcl::io::DepthImage
Ptr	include/pcl/io/image_ir.h	/^        typedef boost::shared_ptr<IRImage> Ptr;$/;"	t	class:pcl::io::IRImage
Ptr	include/pcl/io/image_metadata_wrapper.h	/^        typedef boost::shared_ptr<FrameWrapper> Ptr;$/;"	t	class:pcl::io::FrameWrapper
Ptr	include/pcl/io/openni2_grabber.h	/^        typedef boost::shared_ptr<OpenNI2Grabber> Ptr;$/;"	t	class:pcl::io::OpenNI2Grabber
Ptr	include/pcl/io/openni_camera/openni_depth_image.h	/^      typedef boost::shared_ptr<DepthImage> Ptr;$/;"	t	class:openni_wrapper::DepthImage
Ptr	include/pcl/io/openni_camera/openni_image.h	/^    typedef boost::shared_ptr<Image> Ptr;$/;"	t	class:openni_wrapper::Image
Ptr	include/pcl/io/openni_camera/openni_ir_image.h	/^  typedef boost::shared_ptr<IRImage> Ptr;$/;"	t	class:openni_wrapper::IRImage
Ptr	include/pcl/io/openni_grabber.h	/^      typedef boost::shared_ptr<OpenNIGrabber> Ptr;$/;"	t	class:pcl::OpenNIGrabber
Ptr	include/pcl/io/point_cloud_image_extractors.h	/^        typedef boost::shared_ptr<PointCloudImageExtractor<PointT> > Ptr;$/;"	t	class:pcl::io::PointCloudImageExtractor
Ptr	include/pcl/io/point_cloud_image_extractors.h	/^        typedef boost::shared_ptr<PointCloudImageExtractorFromCurvatureField<PointT> > Ptr;$/;"	t	class:pcl::io::PointCloudImageExtractorFromCurvatureField
Ptr	include/pcl/io/point_cloud_image_extractors.h	/^        typedef boost::shared_ptr<PointCloudImageExtractorFromIntensityField<PointT> > Ptr;$/;"	t	class:pcl::io::PointCloudImageExtractorFromIntensityField
Ptr	include/pcl/io/point_cloud_image_extractors.h	/^        typedef boost::shared_ptr<PointCloudImageExtractorFromLabelField<PointT> > Ptr;$/;"	t	class:pcl::io::PointCloudImageExtractorFromLabelField
Ptr	include/pcl/io/point_cloud_image_extractors.h	/^        typedef boost::shared_ptr<PointCloudImageExtractorFromNormalField<PointT> > Ptr;$/;"	t	class:pcl::io::PointCloudImageExtractorFromNormalField
Ptr	include/pcl/io/point_cloud_image_extractors.h	/^        typedef boost::shared_ptr<PointCloudImageExtractorFromRGBField<PointT> > Ptr;$/;"	t	class:pcl::io::PointCloudImageExtractorFromRGBField
Ptr	include/pcl/io/point_cloud_image_extractors.h	/^        typedef boost::shared_ptr<PointCloudImageExtractorFromZField<PointT> > Ptr;$/;"	t	class:pcl::io::PointCloudImageExtractorFromZField
Ptr	include/pcl/io/point_cloud_image_extractors.h	/^        typedef boost::shared_ptr<PointCloudImageExtractorWithScaling<PointT> > Ptr;$/;"	t	class:pcl::io::PointCloudImageExtractorWithScaling
Ptr	include/pcl/io/real_sense/real_sense_device_manager.h	/^          typedef boost::shared_ptr<RealSenseDevice> Ptr;$/;"	t	class:pcl::io::real_sense::RealSenseDevice
Ptr	include/pcl/io/real_sense/real_sense_device_manager.h	/^          typedef boost::shared_ptr<RealSenseDeviceManager> Ptr;$/;"	t	class:pcl::io::real_sense::RealSenseDeviceManager
Ptr	include/pcl/point_cloud.h	/^      typedef boost::shared_ptr<PointCloud<PointT> > Ptr;$/;"	t	class:pcl::PointCloud
Ptr	include/pcl/point_representation.h	/^      typedef boost::shared_ptr<CustomPointRepresentation<PointDefault> > Ptr;$/;"	t	class:pcl::CustomPointRepresentation
Ptr	include/pcl/point_representation.h	/^      typedef boost::shared_ptr<DefaultPointRepresentation<PointDefault> > Ptr;$/;"	t	class:pcl::DefaultPointRepresentation
Ptr	include/pcl/point_representation.h	/^      typedef boost::shared_ptr<PointRepresentation<PointT> > Ptr;$/;"	t	class:pcl::PointRepresentation
Ptr	include/pcl/point_representation.h	/^      typedef typename boost::shared_ptr<DefaultFeatureRepresentation<PointDefault> > Ptr;$/;"	t	class:pcl::DefaultFeatureRepresentation
Ptr	include/pcl/range_image/range_image.h	/^      typedef boost::shared_ptr<RangeImage> Ptr;$/;"	t	class:pcl::RangeImage
Ptr	include/pcl/range_image/range_image_planar.h	/^      typedef boost::shared_ptr<RangeImagePlanar> Ptr;$/;"	t	class:pcl::RangeImagePlanar
Ptr	include/pcl/range_image/range_image_spherical.h	/^      typedef boost::shared_ptr<RangeImageSpherical> Ptr;$/;"	t	class:pcl::RangeImageSpherical
Quaternion	include/tf/LinearMath/Quaternion.h	/^	Quaternion() {}$/;"	f	class:tf::Quaternion
Quaternion	include/tf/LinearMath/Quaternion.h	/^	Quaternion(const Vector3& axis, const tfScalar& angle) $/;"	f	class:tf::Quaternion
Quaternion	include/tf/LinearMath/Quaternion.h	/^	Quaternion(const tfScalar& x, const tfScalar& y, const tfScalar& z, const tfScalar& w) $/;"	f	class:tf::Quaternion
Quaternion	include/tf/LinearMath/Quaternion.h	/^  Quaternion(const tfScalar& yaw, const tfScalar& pitch, const tfScalar& roll) __attribute__((deprecated))$/;"	f	class:tf::Quaternion
Quaternion	include/tf/LinearMath/Quaternion.h	/^class Quaternion : public QuadWord {$/;"	c	namespace:tf
RAD2DEG	include/pcl/pcl_macros.h	141;"	d
RAW8	include/pcl/io/dinast_grabber.h	/^      enum pixel_size { RAW8=1, RGB16=2, RGB24=3, RGB32=4 };$/;"	e	enum:pcl::DinastGrabber::pixel_size
RETf	include/pcl/sse.h	44;"	d
RETf	include/pcl/sse.h	96;"	d
RETi	include/pcl/sse.h	45;"	d
RETi	include/pcl/sse.h	97;"	d
RGB	include/pcl/TextureMesh.h	/^    struct RGB$/;"	s	struct:pcl::TexMaterial
RGB	include/pcl/impl/point_types.hpp	/^    inline RGB ()$/;"	f	struct:pcl::RGB
RGB	include/pcl/impl/point_types.hpp	/^    inline RGB (const _RGB &p)$/;"	f	struct:pcl::RGB
RGB	include/pcl/impl/point_types.hpp	/^  struct RGB: public _RGB$/;"	s	namespace:pcl
RGB	include/pcl/impl/point_types.hpp	306;"	d
RGB	include/pcl/io/image.h	/^          RGB$/;"	e	enum:pcl::io::Image::__anon15
RGB	include/pcl/io/openni_camera/openni_image.h	/^      RGB$/;"	e	enum:openni_wrapper::Image::__anon9
RGB16	include/pcl/io/dinast_grabber.h	/^      enum pixel_size { RAW8=1, RGB16=2, RGB24=3, RGB32=4 };$/;"	e	enum:pcl::DinastGrabber::pixel_size
RGB24	include/pcl/io/dinast_grabber.h	/^      enum pixel_size { RAW8=1, RGB16=2, RGB24=3, RGB32=4 };$/;"	e	enum:pcl::DinastGrabber::pixel_size
RGB32	include/pcl/io/dinast_grabber.h	/^      enum pixel_size { RAW8=1, RGB16=2, RGB24=3, RGB32=4 };$/;"	e	enum:pcl::DinastGrabber::pixel_size
RGB888Pixel	include/pcl/io/image_rgb24.h	/^        } RGB888Pixel;$/;"	t	class:pcl::io::ImageRGB24	typeref:struct:pcl::io::ImageRGB24::__anon3
RGBAEQ	include/pcl/pcl_tests.h	/^      ::testing::AssertionResult RGBAEQ (const char* expr1,$/;"	f	namespace:pcl::test::internal
RGBEQ	include/pcl/pcl_tests.h	/^      ::testing::AssertionResult RGBEQ (const char* expr1,$/;"	f	namespace:pcl::test::internal
RM	build/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RangeImage	include/pcl/range_image/range_image.h	/^  class RangeImage : public pcl::PointCloud<PointWithRange>$/;"	c	namespace:pcl
RangeImagePlanar	include/pcl/range_image/range_image_planar.h	/^  class RangeImagePlanar : public RangeImage$/;"	c	namespace:pcl
RangeImageSpherical	include/pcl/range_image/range_image_spherical.h	/^      PCL_EXPORTS RangeImageSpherical () {}$/;"	f	class:pcl::RangeImageSpherical
RangeImageSpherical	include/pcl/range_image/range_image_spherical.h	/^  class RangeImageSpherical : public RangeImage$/;"	c	namespace:pcl
RealSenseDevice	include/pcl/io/real_sense/real_sense_device_manager.h	/^          RealSenseDevice (const std::string& id) : device_id_ (id) { };$/;"	f	class:pcl::io::real_sense::RealSenseDevice
RealSenseDevice	include/pcl/io/real_sense/real_sense_device_manager.h	/^      class PCL_EXPORTS RealSenseDevice : boost::noncopyable$/;"	c	namespace:pcl::io::real_sense
RealSenseDeviceManager	include/pcl/io/real_sense/real_sense_device_manager.h	/^      class PCL_EXPORTS RealSenseDeviceManager : boost::noncopyable$/;"	c	namespace:pcl::io::real_sense
RealSenseGrabber	include/pcl/io/real_sense_grabber.h	/^  class PCL_EXPORTS RealSenseGrabber : public Grabber$/;"	c	namespace:pcl
RealSense_Average	include/pcl/io/real_sense_grabber.h	/^        RealSense_Average = 2,$/;"	e	enum:pcl::RealSenseGrabber::TemporalFilteringType
RealSense_Median	include/pcl/io/real_sense_grabber.h	/^        RealSense_Median = 1,$/;"	e	enum:pcl::RealSenseGrabber::TemporalFilteringType
RealSense_None	include/pcl/io/real_sense_grabber.h	/^        RealSense_None = 0,$/;"	e	enum:pcl::RealSenseGrabber::TemporalFilteringType
ReferenceFrame	include/pcl/impl/point_types.hpp	/^    inline ReferenceFrame ()$/;"	f	struct:pcl::ReferenceFrame
ReferenceFrame	include/pcl/impl/point_types.hpp	/^    inline ReferenceFrame (const _ReferenceFrame &p)$/;"	f	struct:pcl::ReferenceFrame
ReferenceFrame	include/pcl/impl/point_types.hpp	/^  struct EIGEN_ALIGN16 ReferenceFrame : public _ReferenceFrame$/;"	s	namespace:pcl
Request	include/map_msgs/GetMapROI.h	/^typedef GetMapROIRequest Request;$/;"	t	struct:map_msgs::GetMapROI
Request	include/map_msgs/GetPointMap.h	/^typedef GetPointMapRequest Request;$/;"	t	struct:map_msgs::GetPointMap
Request	include/map_msgs/GetPointMapROI.h	/^typedef GetPointMapROIRequest Request;$/;"	t	struct:map_msgs::GetPointMapROI
Request	include/map_msgs/ProjectedMapsInfo.h	/^typedef ProjectedMapsInfoRequest Request;$/;"	t	struct:map_msgs::ProjectedMapsInfo
Request	include/map_msgs/SaveMap.h	/^typedef SaveMapRequest Request;$/;"	t	struct:map_msgs::SaveMap
Request	include/map_msgs/SetMapProjections.h	/^typedef SetMapProjectionsRequest Request;$/;"	t	struct:map_msgs::SetMapProjections
RequestType	include/map_msgs/GetMapROI.h	/^typedef Request RequestType;$/;"	t	struct:map_msgs::GetMapROI
RequestType	include/map_msgs/GetPointMap.h	/^typedef Request RequestType;$/;"	t	struct:map_msgs::GetPointMap
RequestType	include/map_msgs/GetPointMapROI.h	/^typedef Request RequestType;$/;"	t	struct:map_msgs::GetPointMapROI
RequestType	include/map_msgs/ProjectedMapsInfo.h	/^typedef Request RequestType;$/;"	t	struct:map_msgs::ProjectedMapsInfo
RequestType	include/map_msgs/SaveMap.h	/^typedef Request RequestType;$/;"	t	struct:map_msgs::SaveMap
RequestType	include/map_msgs/SetMapProjections.h	/^typedef Request RequestType;$/;"	t	struct:map_msgs::SetMapProjections
Response	include/map_msgs/GetMapROI.h	/^typedef GetMapROIResponse Response;$/;"	t	struct:map_msgs::GetMapROI
Response	include/map_msgs/GetPointMap.h	/^typedef GetPointMapResponse Response;$/;"	t	struct:map_msgs::GetPointMap
Response	include/map_msgs/GetPointMapROI.h	/^typedef GetPointMapROIResponse Response;$/;"	t	struct:map_msgs::GetPointMapROI
Response	include/map_msgs/ProjectedMapsInfo.h	/^typedef ProjectedMapsInfoResponse Response;$/;"	t	struct:map_msgs::ProjectedMapsInfo
Response	include/map_msgs/SaveMap.h	/^typedef SaveMapResponse Response;$/;"	t	struct:map_msgs::SaveMap
Response	include/map_msgs/SetMapProjections.h	/^typedef SetMapProjectionsResponse Response;$/;"	t	struct:map_msgs::SetMapProjections
ResponseType	include/map_msgs/GetMapROI.h	/^typedef Response ResponseType;$/;"	t	struct:map_msgs::GetMapROI
ResponseType	include/map_msgs/GetPointMap.h	/^typedef Response ResponseType;$/;"	t	struct:map_msgs::GetPointMap
ResponseType	include/map_msgs/GetPointMapROI.h	/^typedef Response ResponseType;$/;"	t	struct:map_msgs::GetPointMapROI
ResponseType	include/map_msgs/ProjectedMapsInfo.h	/^typedef Response ResponseType;$/;"	t	struct:map_msgs::ProjectedMapsInfo
ResponseType	include/map_msgs/SaveMap.h	/^typedef Response ResponseType;$/;"	t	struct:map_msgs::SaveMap
ResponseType	include/map_msgs/SetMapProjections.h	/^typedef Response ResponseType;$/;"	t	struct:map_msgs::SetMapProjections
RobotEyeGrabber	include/pcl/io/robot_eye_grabber.h	/^  class PCL_EXPORTS RobotEyeGrabber : public Grabber$/;"	c	namespace:pcl
SAMPPROD	include/pcl/common/fft/_kiss_fft_guts.h	47;"	d
SAMPPROD	include/pcl/common/fft/_kiss_fft_guts.h	51;"	d
SAMP_MAX	include/pcl/common/fft/_kiss_fft_guts.h	48;"	d
SAMP_MAX	include/pcl/common/fft/_kiss_fft_guts.h	52;"	d
SAMP_MIN	include/pcl/common/fft/_kiss_fft_guts.h	55;"	d
SCALING_FIXED_FACTOR	include/pcl/io/point_cloud_image_extractors.h	/^          SCALING_FIXED_FACTOR$/;"	e	enum:pcl::io::PointCloudImageExtractorWithScaling::ScalingMethod
SCALING_FULL_RANGE	include/pcl/io/point_cloud_image_extractors.h	/^          SCALING_FULL_RANGE,$/;"	e	enum:pcl::io::PointCloudImageExtractorWithScaling::ScalingMethod
SCALING_NO	include/pcl/io/point_cloud_image_extractors.h	/^          SCALING_NO,$/;"	e	enum:pcl::io::PointCloudImageExtractorWithScaling::ScalingMethod
SET_ARRAY	include/pcl/pcl_macros.h	231;"	d
SHELL	build/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHOT1344	include/pcl/impl/point_types.hpp	/^  struct SHOT1344$/;"	s	namespace:pcl
SHOT352	include/pcl/impl/point_types.hpp	/^  struct SHOT352$/;"	s	namespace:pcl
SIZE	include/pcl/io/depth_sense/depth_sense_grabber_impl.h	/^        static const int SIZE = WIDTH * HEIGHT;$/;"	m	struct:pcl::io::depth_sense::DepthSenseGrabberImpl
SUBLINEAR	include/pcl/common/norms.h	/^  enum NormType {L1, L2_SQR, L2, LINF, JM, B, SUBLINEAR, CS, DIV, PF, K, KL, HIK};$/;"	e	enum:pcl::NormType
SUFFIXES	build/Makefile	/^SUFFIXES =$/;"	m
SYNCHRONIZED_QUEUE_H_	include/pcl/io/impl/synchronized_queue.hpp	43;"	d
S_MUL	include/pcl/common/fft/_kiss_fft_guts.h	67;"	d
S_MUL	include/pcl/common/fft/_kiss_fft_guts.h	86;"	d
SaveMap	include/map_msgs/SaveMap.h	/^struct SaveMap$/;"	s	namespace:map_msgs
SaveMapRequest	include/map_msgs/SaveMapRequest.h	/^typedef ::map_msgs::SaveMapRequest_<std::allocator<void> > SaveMapRequest;$/;"	t	namespace:map_msgs
SaveMapRequestConstPtr	include/map_msgs/SaveMapRequest.h	/^typedef boost::shared_ptr< ::map_msgs::SaveMapRequest const> SaveMapRequestConstPtr;$/;"	t	namespace:map_msgs
SaveMapRequestPtr	include/map_msgs/SaveMapRequest.h	/^typedef boost::shared_ptr< ::map_msgs::SaveMapRequest > SaveMapRequestPtr;$/;"	t	namespace:map_msgs
SaveMapRequest_	include/map_msgs/SaveMapRequest.h	/^  SaveMapRequest_()$/;"	f	struct:map_msgs::SaveMapRequest_
SaveMapRequest_	include/map_msgs/SaveMapRequest.h	/^  SaveMapRequest_(const ContainerAllocator& _alloc)$/;"	f	struct:map_msgs::SaveMapRequest_
SaveMapRequest_	include/map_msgs/SaveMapRequest.h	/^struct SaveMapRequest_$/;"	s	namespace:map_msgs
SaveMapResponse	include/map_msgs/SaveMapResponse.h	/^typedef ::map_msgs::SaveMapResponse_<std::allocator<void> > SaveMapResponse;$/;"	t	namespace:map_msgs
SaveMapResponseConstPtr	include/map_msgs/SaveMapResponse.h	/^typedef boost::shared_ptr< ::map_msgs::SaveMapResponse const> SaveMapResponseConstPtr;$/;"	t	namespace:map_msgs
SaveMapResponsePtr	include/map_msgs/SaveMapResponse.h	/^typedef boost::shared_ptr< ::map_msgs::SaveMapResponse > SaveMapResponsePtr;$/;"	t	namespace:map_msgs
SaveMapResponse_	include/map_msgs/SaveMapResponse.h	/^  SaveMapResponse_()$/;"	f	struct:map_msgs::SaveMapResponse_
SaveMapResponse_	include/map_msgs/SaveMapResponse.h	/^  SaveMapResponse_(const ContainerAllocator& _alloc)$/;"	f	struct:map_msgs::SaveMapResponse_
SaveMapResponse_	include/map_msgs/SaveMapResponse.h	/^struct SaveMapResponse_$/;"	s	namespace:map_msgs
ScalingMethod	include/pcl/io/point_cloud_image_extractors.h	/^        enum ScalingMethod$/;"	g	class:pcl::io::PointCloudImageExtractorWithScaling
ScalingMethod	include/pcl/io/point_cloud_image_extractors.h	/^      typedef typename PointCloudImageExtractorWithScaling<PointT>::ScalingMethod ScalingMethod;$/;"	t	class:pcl::io::PointCloudImageExtractorFromCurvatureField
ScalingMethod	include/pcl/io/point_cloud_image_extractors.h	/^      typedef typename PointCloudImageExtractorWithScaling<PointT>::ScalingMethod ScalingMethod;$/;"	t	class:pcl::io::PointCloudImageExtractorFromIntensityField
ScalingMethod	include/pcl/io/point_cloud_image_extractors.h	/^      typedef typename PointCloudImageExtractorWithScaling<PointT>::ScalingMethod ScalingMethod;$/;"	t	class:pcl::io::PointCloudImageExtractorFromZField
ScopeTime	include/pcl/common/time.h	/^      inline ScopeTime () :$/;"	f	class:pcl::ScopeTime
ScopeTime	include/pcl/common/time.h	/^      inline ScopeTime (const char* title) : $/;"	f	class:pcl::ScopeTime
ScopeTime	include/pcl/common/time.h	/^  class ScopeTime : public StopWatch$/;"	c	namespace:pcl
Serializer	include/map_msgs/GetMapROIRequest.h	/^  template<class ContainerAllocator> struct Serializer< ::map_msgs::GetMapROIRequest_<ContainerAllocator> >$/;"	s	namespace:ros::serialization
Serializer	include/map_msgs/GetMapROIResponse.h	/^  template<class ContainerAllocator> struct Serializer< ::map_msgs::GetMapROIResponse_<ContainerAllocator> >$/;"	s	namespace:ros::serialization
Serializer	include/map_msgs/GetPointMapROIRequest.h	/^  template<class ContainerAllocator> struct Serializer< ::map_msgs::GetPointMapROIRequest_<ContainerAllocator> >$/;"	s	namespace:ros::serialization
Serializer	include/map_msgs/GetPointMapROIResponse.h	/^  template<class ContainerAllocator> struct Serializer< ::map_msgs::GetPointMapROIResponse_<ContainerAllocator> >$/;"	s	namespace:ros::serialization
Serializer	include/map_msgs/GetPointMapRequest.h	/^  template<class ContainerAllocator> struct Serializer< ::map_msgs::GetPointMapRequest_<ContainerAllocator> >$/;"	s	namespace:ros::serialization
Serializer	include/map_msgs/GetPointMapResponse.h	/^  template<class ContainerAllocator> struct Serializer< ::map_msgs::GetPointMapResponse_<ContainerAllocator> >$/;"	s	namespace:ros::serialization
Serializer	include/map_msgs/OccupancyGridUpdate.h	/^  template<class ContainerAllocator> struct Serializer< ::map_msgs::OccupancyGridUpdate_<ContainerAllocator> >$/;"	s	namespace:ros::serialization
Serializer	include/map_msgs/PointCloud2Update.h	/^  template<class ContainerAllocator> struct Serializer< ::map_msgs::PointCloud2Update_<ContainerAllocator> >$/;"	s	namespace:ros::serialization
Serializer	include/map_msgs/ProjectedMap.h	/^  template<class ContainerAllocator> struct Serializer< ::map_msgs::ProjectedMap_<ContainerAllocator> >$/;"	s	namespace:ros::serialization
Serializer	include/map_msgs/ProjectedMapInfo.h	/^  template<class ContainerAllocator> struct Serializer< ::map_msgs::ProjectedMapInfo_<ContainerAllocator> >$/;"	s	namespace:ros::serialization
Serializer	include/map_msgs/ProjectedMapsInfoRequest.h	/^  template<class ContainerAllocator> struct Serializer< ::map_msgs::ProjectedMapsInfoRequest_<ContainerAllocator> >$/;"	s	namespace:ros::serialization
Serializer	include/map_msgs/ProjectedMapsInfoResponse.h	/^  template<class ContainerAllocator> struct Serializer< ::map_msgs::ProjectedMapsInfoResponse_<ContainerAllocator> >$/;"	s	namespace:ros::serialization
Serializer	include/map_msgs/SaveMapRequest.h	/^  template<class ContainerAllocator> struct Serializer< ::map_msgs::SaveMapRequest_<ContainerAllocator> >$/;"	s	namespace:ros::serialization
Serializer	include/map_msgs/SaveMapResponse.h	/^  template<class ContainerAllocator> struct Serializer< ::map_msgs::SaveMapResponse_<ContainerAllocator> >$/;"	s	namespace:ros::serialization
Serializer	include/map_msgs/SetMapProjectionsRequest.h	/^  template<class ContainerAllocator> struct Serializer< ::map_msgs::SetMapProjectionsRequest_<ContainerAllocator> >$/;"	s	namespace:ros::serialization
Serializer	include/map_msgs/SetMapProjectionsResponse.h	/^  template<class ContainerAllocator> struct Serializer< ::map_msgs::SetMapProjectionsResponse_<ContainerAllocator> >$/;"	s	namespace:ros::serialization
SetIfFieldExists	include/pcl/point_traits.h	/^    SetIfFieldExists (PointOutT &pt,$/;"	f	struct:pcl::SetIfFieldExists
SetIfFieldExists	include/pcl/point_traits.h	/^  struct SetIfFieldExists$/;"	s	namespace:pcl
SetMapProjections	include/map_msgs/SetMapProjections.h	/^struct SetMapProjections$/;"	s	namespace:map_msgs
SetMapProjectionsRequest	include/map_msgs/SetMapProjectionsRequest.h	/^typedef ::map_msgs::SetMapProjectionsRequest_<std::allocator<void> > SetMapProjectionsRequest;$/;"	t	namespace:map_msgs
SetMapProjectionsRequestConstPtr	include/map_msgs/SetMapProjectionsRequest.h	/^typedef boost::shared_ptr< ::map_msgs::SetMapProjectionsRequest const> SetMapProjectionsRequestConstPtr;$/;"	t	namespace:map_msgs
SetMapProjectionsRequestPtr	include/map_msgs/SetMapProjectionsRequest.h	/^typedef boost::shared_ptr< ::map_msgs::SetMapProjectionsRequest > SetMapProjectionsRequestPtr;$/;"	t	namespace:map_msgs
SetMapProjectionsRequest_	include/map_msgs/SetMapProjectionsRequest.h	/^  SetMapProjectionsRequest_()$/;"	f	struct:map_msgs::SetMapProjectionsRequest_
SetMapProjectionsRequest_	include/map_msgs/SetMapProjectionsRequest.h	/^  SetMapProjectionsRequest_(const ContainerAllocator& _alloc)$/;"	f	struct:map_msgs::SetMapProjectionsRequest_
SetMapProjectionsRequest_	include/map_msgs/SetMapProjectionsRequest.h	/^struct SetMapProjectionsRequest_$/;"	s	namespace:map_msgs
SetMapProjectionsResponse	include/map_msgs/SetMapProjectionsResponse.h	/^typedef ::map_msgs::SetMapProjectionsResponse_<std::allocator<void> > SetMapProjectionsResponse;$/;"	t	namespace:map_msgs
SetMapProjectionsResponseConstPtr	include/map_msgs/SetMapProjectionsResponse.h	/^typedef boost::shared_ptr< ::map_msgs::SetMapProjectionsResponse const> SetMapProjectionsResponseConstPtr;$/;"	t	namespace:map_msgs
SetMapProjectionsResponsePtr	include/map_msgs/SetMapProjectionsResponse.h	/^typedef boost::shared_ptr< ::map_msgs::SetMapProjectionsResponse > SetMapProjectionsResponsePtr;$/;"	t	namespace:map_msgs
SetMapProjectionsResponse_	include/map_msgs/SetMapProjectionsResponse.h	/^  SetMapProjectionsResponse_()$/;"	f	struct:map_msgs::SetMapProjectionsResponse_
SetMapProjectionsResponse_	include/map_msgs/SetMapProjectionsResponse.h	/^  SetMapProjectionsResponse_(const ContainerAllocator& _alloc)$/;"	f	struct:map_msgs::SetMapProjectionsResponse_
SetMapProjectionsResponse_	include/map_msgs/SetMapProjectionsResponse.h	/^struct SetMapProjectionsResponse_$/;"	s	namespace:map_msgs
ShapeContext1980	include/pcl/impl/point_types.hpp	/^  struct ShapeContext1980$/;"	s	namespace:pcl
ShiftConversion	include/pcl/io/openni_camera/openni_device.h	/^        ShiftConversion() : init_(false) {}$/;"	f	struct:openni_wrapper::OpenNIDevice::ShiftConversion
ShiftConversion	include/pcl/io/openni_camera/openni_device.h	/^      struct ShiftConversion$/;"	s	class:openni_wrapper::OpenNIDevice
ShiftToDepthConverter	include/pcl/io/openni2/openni_shift_to_depth_conversion.h	/^      ShiftToDepthConverter () : init_(false) {}$/;"	f	class:openni_wrapper::ShiftToDepthConverter
ShiftToDepthConverter	include/pcl/io/openni2/openni_shift_to_depth_conversion.h	/^  class PCL_EXPORTS ShiftToDepthConverter$/;"	c	namespace:openni_wrapper
ShiftToDepthConverter	include/pcl/io/openni_camera/openni_shift_to_depth_conversion.h	/^      ShiftToDepthConverter () : init_(false) {}$/;"	f	class:openni_wrapper::ShiftToDepthConverter
ShiftToDepthConverter	include/pcl/io/openni_camera/openni_shift_to_depth_conversion.h	/^  class PCL_EXPORTS ShiftToDepthConverter$/;"	c	namespace:openni_wrapper
SingleBuffer	include/pcl/io/buffers.h	/^    class SingleBuffer : public Buffer<T>$/;"	c	namespace:pcl::io
SingleBuffer	include/pcl/io/impl/buffers.hpp	/^pcl::io::SingleBuffer<T>::SingleBuffer (size_t size)$/;"	f	class:pcl::io::SingleBuffer
StaticLayer	include/costmap_2d/static_layer.h	/^class StaticLayer : public CostmapLayer$/;"	c	namespace:costmap_2d
StaticLayer	src/static_layer.cpp	/^StaticLayer::StaticLayer() {}$/;"	f	class:costmap_2d::StaticLayer
StopWatch	include/pcl/common/time.h	/^      StopWatch () : start_time_ (boost::posix_time::microsec_clock::local_time ())$/;"	f	class:pcl::StopWatch
StopWatch	include/pcl/common/time.h	/^  class StopWatch$/;"	c	namespace:pcl
StreamCallbackFunction	include/pcl/io/openni2/openni2_device.h	/^          typedef boost::function<void(openni::VideoStream& stream)> StreamCallbackFunction;$/;"	t	class:pcl::io::openni2::OpenNI2Device
StreamCallbackFunction	include/pcl/io/openni2/openni2_frame_listener.h	/^      typedef boost::function<void(openni::VideoStream& stream)> StreamCallbackFunction;$/;"	t	namespace:pcl::io::openni2
Sublinear_Norm	include/pcl/common/impl/norms.hpp	/^Sublinear_Norm (FloatVectorT a, FloatVectorT b, int dim)$/;"	f	namespace:pcl
SynchronizedQueue	include/pcl/io/impl/synchronized_queue.hpp	/^      SynchronizedQueue () :$/;"	f	class:pcl::SynchronizedQueue
SynchronizedQueue	include/pcl/io/impl/synchronized_queue.hpp	/^  class SynchronizedQueue$/;"	c	namespace:pcl
Synchronizer	include/pcl/common/synchronizer.h	/^    Synchronizer () : mutex1_ (), mutex2_ (), publish_mutex_ (), queueT1 (), queueT2 (), cb_ (), callback_counter (0) { };$/;"	f	class:pcl::Synchronizer
Synchronizer	include/pcl/common/synchronizer.h	/^  class Synchronizer$/;"	c	namespace:pcl
T1Stamped	include/pcl/common/synchronizer.h	/^    typedef std::pair<unsigned long, T1> T1Stamped;$/;"	t	class:pcl::Synchronizer
T2Stamped	include/pcl/common/synchronizer.h	/^    typedef std::pair<unsigned long, T2> T2Stamped;$/;"	t	class:pcl::Synchronizer
TARHeader	include/pcl/io/tar.h	/^    struct TARHeader$/;"	s	namespace:pcl::io
TERMINAL_TOOLS_PRINT_H_	include/pcl/console/print.h	38;"	d
TERMINAL_TOOLS_TIME_H_	include/pcl/console/time.h	39;"	d
TFSIMDSQRT12	include/tf/LinearMath/Scalar.h	199;"	d
TFSIMD_2_PI	include/tf/LinearMath/Scalar.h	194;"	d
TFSIMD_DEGS_PER_RAD	include/tf/LinearMath/Scalar.h	198;"	d
TFSIMD_EPSILON	include/tf/LinearMath/Scalar.h	204;"	d
TFSIMD_FORCE_INLINE	include/tf/LinearMath/Scalar.h	106;"	d
TFSIMD_FORCE_INLINE	include/tf/LinearMath/Scalar.h	130;"	d
TFSIMD_FORCE_INLINE	include/tf/LinearMath/Scalar.h	41;"	d
TFSIMD_FORCE_INLINE	include/tf/LinearMath/Scalar.h	52;"	d
TFSIMD_FORCE_INLINE	include/tf/LinearMath/Scalar.h	84;"	d
TFSIMD_HALF_PI	include/tf/LinearMath/Scalar.h	196;"	d
TFSIMD_INFINITY	include/tf/LinearMath/Scalar.h	205;"	d
TFSIMD_PI	include/tf/LinearMath/Scalar.h	195;"	d
TFSIMD_RADS_PER_DEG	include/tf/LinearMath/Scalar.h	197;"	d
TF_DEBUG	include/tf/LinearMath/Scalar.h	33;"	d
TF_DECLARE_ALIGNED_ALLOCATOR	include/tf/LinearMath/Scalar.h	166;"	d
TF_DECLARE_HANDLE	include/tf/LinearMath/Scalar.h	240;"	d
TF_HAVE_NATIVE_FSEL	include/tf/LinearMath/Scalar.h	60;"	d
TF_LARGE_FLOAT	include/tf/LinearMath/Scalar.h	162;"	d
TF_MATRIX3x3_H	include/tf/LinearMath/Matrix3x3.h	17;"	d
TF_MINMAX_H	include/tf/LinearMath/MinMax.h	18;"	d
TF_QUADWORD_H	include/tf/LinearMath/QuadWord.h	17;"	d
TF_QUATERNION_H_	include/tf/LinearMath/Quaternion.h	18;"	d
TF_SCALAR_H	include/tf/LinearMath/Scalar.h	18;"	d
TF_USE_VMX128	include/tf/LinearMath/Scalar.h	57;"	d
TF_VECTOR3_H	include/tf/LinearMath/Vector3.h	18;"	d
THROW_IO_EXCEPTION	include/pcl/io/io_exception.h	53;"	d
THROW_OPENNI_EXCEPTION	include/pcl/io/openni_camera/openni_exception.h	56;"	d
TT_ATTIBUTES	include/pcl/console/print.h	/^    enum TT_ATTIBUTES$/;"	g	namespace:pcl::console
TT_BLACK	include/pcl/console/print.h	/^      TT_BLACK,$/;"	e	enum:pcl::console::TT_COLORS
TT_BLINK	include/pcl/console/print.h	/^      TT_BLINK     = 4,$/;"	e	enum:pcl::console::TT_ATTIBUTES
TT_BLUE	include/pcl/console/print.h	/^      TT_BLUE,$/;"	e	enum:pcl::console::TT_COLORS
TT_BRIGHT	include/pcl/console/print.h	/^      TT_BRIGHT    = 1,$/;"	e	enum:pcl::console::TT_ATTIBUTES
TT_COLORS	include/pcl/console/print.h	/^    enum TT_COLORS$/;"	g	namespace:pcl::console
TT_CYAN	include/pcl/console/print.h	/^      TT_CYAN,$/;"	e	enum:pcl::console::TT_COLORS
TT_DIM	include/pcl/console/print.h	/^      TT_DIM       = 2,$/;"	e	enum:pcl::console::TT_ATTIBUTES
TT_GREEN	include/pcl/console/print.h	/^      TT_GREEN,$/;"	e	enum:pcl::console::TT_COLORS
TT_HIDDEN	include/pcl/console/print.h	/^      TT_HIDDEN    = 8$/;"	e	enum:pcl::console::TT_ATTIBUTES
TT_MAGENTA	include/pcl/console/print.h	/^      TT_MAGENTA,$/;"	e	enum:pcl::console::TT_COLORS
TT_RED	include/pcl/console/print.h	/^      TT_RED,$/;"	e	enum:pcl::console::TT_COLORS
TT_RESET	include/pcl/console/print.h	/^      TT_RESET     = 0,$/;"	e	enum:pcl::console::TT_ATTIBUTES
TT_REVERSE	include/pcl/console/print.h	/^      TT_REVERSE   = 7,$/;"	e	enum:pcl::console::TT_ATTIBUTES
TT_UNDERLINE	include/pcl/console/print.h	/^      TT_UNDERLINE = 3,$/;"	e	enum:pcl::console::TT_ATTIBUTES
TT_WHITE	include/pcl/console/print.h	/^      TT_WHITE$/;"	e	enum:pcl::console::TT_COLORS
TT_YELLOW	include/pcl/console/print.h	/^      TT_YELLOW,$/;"	e	enum:pcl::console::TT_COLORS
TemporalFilteringType	include/pcl/io/depth_sense_grabber.h	/^      enum TemporalFilteringType$/;"	g	class:pcl::DepthSenseGrabber
TemporalFilteringType	include/pcl/io/real_sense_grabber.h	/^      enum TemporalFilteringType$/;"	g	class:pcl::RealSenseGrabber
TexMaterial	include/pcl/TextureMesh.h	/^    TexMaterial () : tex_name (), tex_file (), tex_Ka (), tex_Kd (), tex_Ks (), tex_d (), tex_Ns (), tex_illum () {}$/;"	f	struct:pcl::TexMaterial
TexMaterial	include/pcl/TextureMesh.h	/^  struct TexMaterial$/;"	s	namespace:pcl
TextureMesh	include/pcl/TextureMesh.h	/^    TextureMesh () : $/;"	f	struct:pcl::TextureMesh
TextureMesh	include/pcl/TextureMesh.h	/^  struct TextureMesh$/;"	s	namespace:pcl
TextureMeshConstPtr	include/pcl/TextureMesh.h	/^   typedef boost::shared_ptr<pcl::TextureMesh const> TextureMeshConstPtr;$/;"	t	namespace:pcl
TextureMeshPtr	include/pcl/TextureMesh.h	/^   typedef boost::shared_ptr<pcl::TextureMesh> TextureMeshPtr;$/;"	t	namespace:pcl
TicToc	include/pcl/console/time.h	/^        TicToc () : tictic (), toctoc () {}$/;"	f	class:pcl::console::TicToc
TicToc	include/pcl/console/time.h	/^    class TicToc$/;"	c	namespace:pcl::console
TimeTrigger	include/pcl/common/time_trigger.h	/^  class PCL_EXPORTS TimeTrigger$/;"	c	namespace:pcl
Timestamp	include/pcl/io/image.h	/^        typedef boost::chrono::high_resolution_clock::time_point Timestamp;$/;"	t	class:pcl::io::Image
Timestamp	include/pcl/io/image_depth.h	/^        typedef boost::chrono::high_resolution_clock::time_point Timestamp;$/;"	t	class:pcl::io::DepthImage
Timestamp	include/pcl/io/image_ir.h	/^        typedef boost::chrono::high_resolution_clock::time_point Timestamp;$/;"	t	class:pcl::io::IRImage
Transform	include/tf/LinearMath/Transform.h	/^	TFSIMD_FORCE_INLINE Transform (const Transform& other)$/;"	f	class:tf::Transform
Transform	include/tf/LinearMath/Transform.h	/^	Transform() {}$/;"	f	class:tf::Transform
Transform	include/tf/LinearMath/Transform.h	/^	explicit TFSIMD_FORCE_INLINE Transform(const Matrix3x3& b, $/;"	f	class:tf::Transform
Transform	include/tf/LinearMath/Transform.h	/^	explicit TFSIMD_FORCE_INLINE Transform(const Quaternion& q, $/;"	f	class:tf::Transform
Transform	include/tf/LinearMath/Transform.h	/^class Transform {$/;"	c	namespace:tf
TransformData	include/tf/LinearMath/Transform.h	26;"	d
TransformDoubleData	include/tf/LinearMath/Transform.h	/^struct	TransformDoubleData$/;"	s	namespace:tf
TransformFloatData	include/tf/LinearMath/Transform.h	/^struct	TransformFloatData$/;"	s	namespace:tf
TransformationFromCorrespondences	include/pcl/common/transformation_from_correspondences.h	/^        TransformationFromCorrespondences () : $/;"	f	class:pcl::TransformationFromCorrespondences
TransformationFromCorrespondences	include/pcl/common/transformation_from_correspondences.h	/^  class TransformationFromCorrespondences $/;"	c	namespace:pcl
Type	include/map_msgs/GetMapROIRequest.h	/^  typedef GetMapROIRequest_<ContainerAllocator> Type;$/;"	t	struct:map_msgs::GetMapROIRequest_
Type	include/map_msgs/GetMapROIResponse.h	/^  typedef GetMapROIResponse_<ContainerAllocator> Type;$/;"	t	struct:map_msgs::GetMapROIResponse_
Type	include/map_msgs/GetPointMapROIRequest.h	/^  typedef GetPointMapROIRequest_<ContainerAllocator> Type;$/;"	t	struct:map_msgs::GetPointMapROIRequest_
Type	include/map_msgs/GetPointMapROIResponse.h	/^  typedef GetPointMapROIResponse_<ContainerAllocator> Type;$/;"	t	struct:map_msgs::GetPointMapROIResponse_
Type	include/map_msgs/GetPointMapRequest.h	/^  typedef GetPointMapRequest_<ContainerAllocator> Type;$/;"	t	struct:map_msgs::GetPointMapRequest_
Type	include/map_msgs/GetPointMapResponse.h	/^  typedef GetPointMapResponse_<ContainerAllocator> Type;$/;"	t	struct:map_msgs::GetPointMapResponse_
Type	include/map_msgs/OccupancyGridUpdate.h	/^  typedef OccupancyGridUpdate_<ContainerAllocator> Type;$/;"	t	struct:map_msgs::OccupancyGridUpdate_
Type	include/map_msgs/PointCloud2Update.h	/^  typedef PointCloud2Update_<ContainerAllocator> Type;$/;"	t	struct:map_msgs::PointCloud2Update_
Type	include/map_msgs/ProjectedMap.h	/^  typedef ProjectedMap_<ContainerAllocator> Type;$/;"	t	struct:map_msgs::ProjectedMap_
Type	include/map_msgs/ProjectedMapInfo.h	/^  typedef ProjectedMapInfo_<ContainerAllocator> Type;$/;"	t	struct:map_msgs::ProjectedMapInfo_
Type	include/map_msgs/ProjectedMapsInfoRequest.h	/^  typedef ProjectedMapsInfoRequest_<ContainerAllocator> Type;$/;"	t	struct:map_msgs::ProjectedMapsInfoRequest_
Type	include/map_msgs/ProjectedMapsInfoResponse.h	/^  typedef ProjectedMapsInfoResponse_<ContainerAllocator> Type;$/;"	t	struct:map_msgs::ProjectedMapsInfoResponse_
Type	include/map_msgs/SaveMapRequest.h	/^  typedef SaveMapRequest_<ContainerAllocator> Type;$/;"	t	struct:map_msgs::SaveMapRequest_
Type	include/map_msgs/SaveMapResponse.h	/^  typedef SaveMapResponse_<ContainerAllocator> Type;$/;"	t	struct:map_msgs::SaveMapResponse_
Type	include/map_msgs/SetMapProjectionsRequest.h	/^  typedef SetMapProjectionsRequest_<ContainerAllocator> Type;$/;"	t	struct:map_msgs::SetMapProjectionsRequest_
Type	include/map_msgs/SetMapProjectionsResponse.h	/^  typedef SetMapProjectionsResponse_<ContainerAllocator> Type;$/;"	t	struct:map_msgs::SetMapProjectionsResponse_
UINT16	include/pcl/PCLPointField.h	/^                           UINT16 = 4,$/;"	e	enum:pcl::PCLPointField::PointFieldTypes
UINT32	include/pcl/PCLPointField.h	/^                           UINT32 = 6,$/;"	e	enum:pcl::PCLPointField::PointFieldTypes
UINT8	include/pcl/PCLPointField.h	/^                           UINT8 = 2,$/;"	e	enum:pcl::PCLPointField::PointFieldTypes
UnhandledPointTypeException	include/pcl/exceptions.h	/^    UnhandledPointTypeException (const std::string& error_description,$/;"	f	class:pcl::UnhandledPointTypeException
UnhandledPointTypeException	include/pcl/exceptions.h	/^  class UnhandledPointTypeException : public PCLException$/;"	c	namespace:pcl
UniformGenerator	include/pcl/common/impl/random.hpp	/^pcl::common::UniformGenerator<T>::UniformGenerator(T min, T max, pcl::uint32_t seed)$/;"	f	class:pcl::common::UniformGenerator
UniformGenerator	include/pcl/common/impl/random.hpp	/^pcl::common::UniformGenerator<T>::UniformGenerator(const Parameters& parameters)$/;"	f	class:pcl::common::UniformGenerator
UniformGenerator	include/pcl/common/random.h	/^    class UniformGenerator $/;"	c	namespace:pcl::common
UniqueShapeContext1960	include/pcl/impl/point_types.hpp	/^  struct UniqueShapeContext1960$/;"	s	namespace:pcl
UnorganizedPointCloudException	include/pcl/exceptions.h	/^      UnorganizedPointCloudException (const std::string& error_description,$/;"	f	class:pcl::UnorganizedPointCloudException
UnorganizedPointCloudException	include/pcl/exceptions.h	/^  class UnorganizedPointCloudException : public PCLException$/;"	c	namespace:pcl
VERBOSITY_LEVEL	include/pcl/console/print.h	/^    enum VERBOSITY_LEVEL$/;"	g	namespace:pcl::console
VERBOSITY_LEVEL_INFO	include/pcl/pcl_config.h	67;"	d
VFHSignature308	include/pcl/impl/point_types.hpp	/^  struct VFHSignature308$/;"	s	namespace:pcl
VLPGrabber	include/pcl/io/vlp_grabber.h	/^  class PCL_EXPORTS VLPGrabber : public HDLGrabber$/;"	c	namespace:pcl
VTK_RENDERING_BACKEND_OPENGL_VERSION	include/pcl/pcl_config.h	76;"	d
Vector3	include/tf/LinearMath/Vector3.h	/^	TFSIMD_FORCE_INLINE Vector3() {}$/;"	f	class:tf::Vector3
Vector3	include/tf/LinearMath/Vector3.h	/^	TFSIMD_FORCE_INLINE Vector3(const tfScalar& x, const tfScalar& y, const tfScalar& z)$/;"	f	class:tf::Vector3
Vector3	include/tf/LinearMath/Vector3.h	/^class Vector3$/;"	c	namespace:tf
Vector3Data	include/tf/LinearMath/Vector3.h	26;"	d
Vector3DataName	include/tf/LinearMath/Vector3.h	27;"	d
Vector3DoubleData	include/tf/LinearMath/Vector3.h	/^struct	Vector3DoubleData$/;"	s	namespace:tf
Vector3FloatData	include/tf/LinearMath/Vector3.h	/^struct	Vector3FloatData$/;"	s	namespace:tf
Vector3c	include/pcl/impl/point_types.hpp	/^  typedef Eigen::Matrix<uint8_t, 3, 1> Vector3c;$/;"	t	namespace:pcl
Vector3cMap	include/pcl/impl/point_types.hpp	/^  typedef Eigen::Map<Vector3c> Vector3cMap;$/;"	t	namespace:pcl
Vector3cMapConst	include/pcl/impl/point_types.hpp	/^  typedef const Eigen::Map<const Vector3c> Vector3cMapConst;$/;"	t	namespace:pcl
Vector3fMap	include/pcl/impl/point_types.hpp	/^  typedef Eigen::Map<Eigen::Vector3f> Vector3fMap;$/;"	t	namespace:pcl
Vector3fMapConst	include/pcl/impl/point_types.hpp	/^  typedef const Eigen::Map<const Eigen::Vector3f> Vector3fMapConst;$/;"	t	namespace:pcl
Vector4c	include/pcl/impl/point_types.hpp	/^  typedef Eigen::Matrix<uint8_t, 4, 1> Vector4c;$/;"	t	namespace:pcl
Vector4cMap	include/pcl/impl/point_types.hpp	/^  typedef Eigen::Map<Vector4c, Eigen::Aligned> Vector4cMap;$/;"	t	namespace:pcl
Vector4cMapConst	include/pcl/impl/point_types.hpp	/^  typedef const Eigen::Map<const Vector4c, Eigen::Aligned> Vector4cMapConst;$/;"	t	namespace:pcl
Vector4fMap	include/pcl/impl/point_types.hpp	/^  typedef Eigen::Map<Eigen::Vector4f, Eigen::Aligned> Vector4fMap;$/;"	t	namespace:pcl
Vector4fMapConst	include/pcl/impl/point_types.hpp	/^  typedef const Eigen::Map<const Eigen::Vector4f, Eigen::Aligned> Vector4fMapConst;$/;"	t	namespace:pcl
VectorAverage	include/pcl/common/impl/vector_average.hpp	/^  VectorAverage<real, dimension>::VectorAverage () :$/;"	f	class:pcl::VectorAverage
VectorAverage	include/pcl/common/vector_average.h	/^  class VectorAverage $/;"	c	namespace:pcl
VectorAverage2f	include/pcl/common/vector_average.h	/^  typedef VectorAverage<float, 2> VectorAverage2f;$/;"	t	namespace:pcl
VectorAverage3f	include/pcl/common/vector_average.h	/^  typedef VectorAverage<float, 3> VectorAverage3f;$/;"	t	namespace:pcl
VectorAverage4f	include/pcl/common/vector_average.h	/^  typedef VectorAverage<float, 4> VectorAverage4f;$/;"	t	namespace:pcl
VectorOfEigenVector3f	include/pcl/range_image/range_image.h	/^      typedef std::vector<Eigen::Vector3f, Eigen::aligned_allocator<Eigen::Vector3f> > VectorOfEigenVector3f;$/;"	t	class:pcl::RangeImage
VectorType	include/pcl/point_cloud.h	/^      typedef std::vector<PointT, Eigen::aligned_allocator<PointT> > VectorType;$/;"	t	class:pcl::PointCloud
Vertices	include/pcl/Vertices.h	/^    Vertices () : vertices ()$/;"	f	struct:pcl::Vertices
Vertices	include/pcl/Vertices.h	/^  struct Vertices$/;"	s	namespace:pcl
VerticesConstPtr	include/pcl/Vertices.h	/^  typedef boost::shared_ptr<Vertices const> VerticesConstPtr;$/;"	t	namespace:pcl
VerticesPtr	include/pcl/Vertices.h	/^  typedef boost::shared_ptr<Vertices> VerticesPtr;$/;"	t	namespace:pcl
WIDTH	include/pcl/io/depth_sense/depth_sense_grabber_impl.h	/^        static const int WIDTH = 320;$/;"	m	struct:pcl::io::depth_sense::DepthSenseGrabberImpl
WIN32_LEAN_AND_MEAN	include/pcl/io/impl/pcd_io.hpp	54;"	d
XN_1080P_X_RES	include/pcl/io/openni2/openni.h	69;"	d
XN_1080P_Y_RES	include/pcl/io/openni2/openni.h	70;"	d
XN_240P_X_RES	include/pcl/io/openni2/openni.h	73;"	d
XN_240P_Y_RES	include/pcl/io/openni2/openni.h	74;"	d
XN_480P_X_RES	include/pcl/io/openni2/openni.h	79;"	d
XN_480P_Y_RES	include/pcl/io/openni2/openni.h	80;"	d
XN_576P_X_RES	include/pcl/io/openni2/openni.h	81;"	d
XN_576P_Y_RES	include/pcl/io/openni2/openni.h	82;"	d
XN_720P_X_RES	include/pcl/io/openni2/openni.h	63;"	d
XN_720P_Y_RES	include/pcl/io/openni2/openni.h	64;"	d
XN_CGA_X_RES	include/pcl/io/openni2/openni.h	53;"	d
XN_CGA_Y_RES	include/pcl/io/openni2/openni.h	54;"	d
XN_CIF_X_RES	include/pcl/io/openni2/openni.h	75;"	d
XN_CIF_Y_RES	include/pcl/io/openni2/openni.h	76;"	d
XN_DV_X_RES	include/pcl/io/openni2/openni.h	83;"	d
XN_DV_Y_RES	include/pcl/io/openni2/openni.h	84;"	d
XN_QCIF_X_RES	include/pcl/io/openni2/openni.h	71;"	d
XN_QCIF_Y_RES	include/pcl/io/openni2/openni.h	72;"	d
XN_QQVGA_X_RES	include/pcl/io/openni2/openni.h	51;"	d
XN_QQVGA_Y_RES	include/pcl/io/openni2/openni.h	52;"	d
XN_QVGA_X_RES	include/pcl/io/openni2/openni.h	55;"	d
XN_QVGA_Y_RES	include/pcl/io/openni2/openni.h	56;"	d
XN_SVGA_X_RES	include/pcl/io/openni2/openni.h	59;"	d
XN_SVGA_Y_RES	include/pcl/io/openni2/openni.h	60;"	d
XN_SXGA_X_RES	include/pcl/io/openni2/openni.h	65;"	d
XN_SXGA_Y_RES	include/pcl/io/openni2/openni.h	66;"	d
XN_UXGA_X_RES	include/pcl/io/openni2/openni.h	67;"	d
XN_UXGA_Y_RES	include/pcl/io/openni2/openni.h	68;"	d
XN_VGA_X_RES	include/pcl/io/openni2/openni.h	57;"	d
XN_VGA_Y_RES	include/pcl/io/openni2/openni.h	58;"	d
XN_WVGA_X_RES	include/pcl/io/openni2/openni.h	77;"	d
XN_WVGA_Y_RES	include/pcl/io/openni2/openni.h	78;"	d
XN_XGA_X_RES	include/pcl/io/openni2/openni.h	61;"	d
XN_XGA_Y_RES	include/pcl/io/openni2/openni.h	62;"	d
XYZEQ	include/pcl/pcl_tests.h	/^      ::testing::AssertionResult XYZEQ (const char* expr1,$/;"	f	namespace:pcl::test::internal
XYZNear	include/pcl/pcl_tests.h	/^      ::testing::AssertionResult XYZNear (const char* expr1,$/;"	f	namespace:pcl::test::internal
YUV422	include/pcl/io/image.h	/^          YUV422,$/;"	e	enum:pcl::io::Image::__anon15
YUV422	include/pcl/io/openni_camera/openni_image.h	/^      YUV422,$/;"	e	enum:openni_wrapper::Image::__anon9
_Axis	include/pcl/impl/point_types.hpp	/^  struct EIGEN_ALIGN16 _Axis$/;"	s	namespace:pcl
_Intensity	include/pcl/impl/point_types.hpp	/^  struct _Intensity$/;"	s	namespace:pcl
_Intensity32u	include/pcl/impl/point_types.hpp	/^  struct _Intensity32u$/;"	s	namespace:pcl
_Intensity8u	include/pcl/impl/point_types.hpp	/^  struct _Intensity8u$/;"	s	namespace:pcl
_Normal	include/pcl/impl/point_types.hpp	/^  struct EIGEN_ALIGN16 _Normal$/;"	s	namespace:pcl
_PCL_IO_BOOST_H_	include/pcl/io/boost.h	39;"	d
_PCL_IO_EIGEN_H_	include/pcl/io/eigen.h	39;"	d
_PCL_OPENNI_OPENNI_H_	include/pcl/io/openni_camera/openni.h	41;"	d
_PointDEM	include/pcl/impl/point_types.hpp	/^  struct EIGEN_ALIGN16 _PointDEM$/;"	s	namespace:pcl
_PointNormal	include/pcl/impl/point_types.hpp	/^  struct EIGEN_ALIGN16 _PointNormal$/;"	s	namespace:pcl
_PointSurfel	include/pcl/impl/point_types.hpp	/^  struct EIGEN_ALIGN16 _PointSurfel$/;"	s	namespace:pcl
_PointWithRange	include/pcl/impl/point_types.hpp	/^  struct EIGEN_ALIGN16 _PointWithRange$/;"	s	namespace:pcl
_PointWithScale	include/pcl/impl/point_types.hpp	/^  struct EIGEN_ALIGN16 _PointWithScale$/;"	s	namespace:pcl
_PointWithViewpoint	include/pcl/impl/point_types.hpp	/^  struct EIGEN_ALIGN16 _PointWithViewpoint$/;"	s	namespace:pcl
_PointXYZ	include/pcl/impl/point_types.hpp	/^  struct _PointXYZ$/;"	s	namespace:pcl
_PointXYZHSV	include/pcl/impl/point_types.hpp	/^  struct _PointXYZHSV$/;"	s	namespace:pcl
_PointXYZI	include/pcl/impl/point_types.hpp	/^  struct EIGEN_ALIGN16 _PointXYZI$/;"	s	namespace:pcl
_PointXYZINormal	include/pcl/impl/point_types.hpp	/^  struct EIGEN_ALIGN16 _PointXYZINormal$/;"	s	namespace:pcl
_PointXYZL	include/pcl/impl/point_types.hpp	/^  struct EIGEN_ALIGN16 _PointXYZL$/;"	s	namespace:pcl
_PointXYZLNormal	include/pcl/impl/point_types.hpp	/^  struct EIGEN_ALIGN16 _PointXYZLNormal$/;"	s	namespace:pcl
_PointXYZRGB	include/pcl/impl/point_types.hpp	/^  struct EIGEN_ALIGN16 _PointXYZRGB$/;"	s	namespace:pcl
_PointXYZRGBA	include/pcl/impl/point_types.hpp	/^  struct EIGEN_ALIGN16 _PointXYZRGBA$/;"	s	namespace:pcl
_PointXYZRGBL	include/pcl/impl/point_types.hpp	/^  struct EIGEN_ALIGN16 _PointXYZRGBL$/;"	s	namespace:pcl
_PointXYZRGBNormal	include/pcl/impl/point_types.hpp	/^  struct EIGEN_ALIGN16 _PointXYZRGBNormal$/;"	s	namespace:pcl
_RGB	include/pcl/impl/point_types.hpp	/^  struct _RGB$/;"	s	namespace:pcl
_ReferenceFrame	include/pcl/impl/point_types.hpp	/^  struct EIGEN_ALIGN16 _ReferenceFrame$/;"	s	namespace:pcl
_USE_MATH_DEFINES	include/pcl/pcl_macros.h	72;"	d
__OPENNI_DEPTH_IMAGE__	include/pcl/io/openni_camera/openni_depth_image.h	42;"	d
__OPENNI_DEVICE_KINECT__	include/pcl/io/openni_camera/openni_device_kinect.h	41;"	d
__OPENNI_DEVICE_ONI__	include/pcl/io/openni_camera/openni_device_oni.h	41;"	d
__OPENNI_DEVICE_PRIMESENSE__	include/pcl/io/openni_camera/openni_device_primesense.h	41;"	d
__OPENNI_DEVICE_XTION_PRO__	include/pcl/io/openni_camera/openni_device_xtion.h	41;"	d
__OPENNI_EXCEPTION__	include/pcl/io/openni_camera/openni_exception.h	41;"	d
__OPENNI_IDEVICE_H__	include/pcl/io/openni_camera/openni_device.h	42;"	d
__OPENNI_IMAGE_BAYER_GRBG__	include/pcl/io/openni_camera/openni_image_bayer_grbg.h	42;"	d
__OPENNI_IMAGE_RGB__	include/pcl/io/openni_camera/openni_image_rgb24.h	40;"	d
__OPENNI_IMAGE_YUV422__	include/pcl/io/openni_camera/openni_image_yuv_422.h	40;"	d
__OPENNI_IMAGE__	include/pcl/io/openni_camera/openni_image.h	40;"	d
__OPENNI_IR_IMAGE__	include/pcl/io/openni_camera/openni_ir_image.h	37;"	d
__OPENNI_SHIFT_TO_DEPTH_CONVERSION	include/pcl/io/openni2/openni_shift_to_depth_conversion.h	42;"	d
__OPENNI_SHIFT_TO_DEPTH_CONVERSION	include/pcl/io/openni_camera/openni_shift_to_depth_conversion.h	42;"	d
__PCL_IO_DAVIDSDK_GRABBER__	include/pcl/io/davidsdk_grabber.h	42;"	d
__PCL_IO_ENSENSO_GRABBER__	include/pcl/io/ensenso_grabber.h	42;"	d
__PCL_IO_FOTONIC_GRABBER__	include/pcl/io/fotonic_grabber.h	42;"	d
__PCL_IO_GRABBER__	include/pcl/io/grabber.h	38;"	d
__PCL_IO_IMAGE_GRABBER__	include/pcl/io/image_grabber.h	43;"	d
__PCL_IO_ONI_PLAYER__	include/pcl/io/oni_grabber.h	42;"	d
__PCL_IO_OPENNI_GRABBER__	include/pcl/io/openni_grabber.h	43;"	d
__PCL_ORGANIZED_PROJECTION_MATRIX_HPP__	include/pcl/common/impl/projection_matrix.hpp	39;"	d
__PCL_ORGANIZED_PROJECTION_MATRIX_H__	include/pcl/common/projection_matrix.h	39;"	d
__PCL_SYNCHRONIZER__	include/pcl/common/synchronizer.h	36;"	d
__PRETTY_FUNCTION__	include/pcl/io/io_exception.h	49;"	d
__PRETTY_FUNCTION__	include/pcl/io/openni_camera/openni_exception.h	52;"	d
__PRETTY_FUNCTION__	include/pcl/pcl_macros.h	98;"	d
__func__	include/pcl/pcl_macros.h	99;"	d
__has_extension	include/pcl/pcl_macros.h	300;"	d
__stdcall	include/pcl/io/openni_camera/openni_device.h	56;"	d
_data_type	include/map_msgs/OccupancyGridUpdate.h	/^   typedef std::vector<int8_t, typename ContainerAllocator::template rebind<int8_t>::other >  _data_type;$/;"	t	struct:map_msgs::OccupancyGridUpdate_
_filename_type	include/map_msgs/SaveMapRequest.h	/^   typedef  ::std_msgs::String_<ContainerAllocator>  _filename_type;$/;"	t	struct:map_msgs::SaveMapRequest_
_frame_id_type	include/map_msgs/ProjectedMapInfo.h	/^   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _frame_id_type;$/;"	t	struct:map_msgs::ProjectedMapInfo_
_header_type	include/map_msgs/OccupancyGridUpdate.h	/^   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;$/;"	t	struct:map_msgs::OccupancyGridUpdate_
_header_type	include/map_msgs/PointCloud2Update.h	/^   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;$/;"	t	struct:map_msgs::PointCloud2Update_
_height_type	include/map_msgs/OccupancyGridUpdate.h	/^   typedef uint32_t _height_type;$/;"	t	struct:map_msgs::OccupancyGridUpdate_
_height_type	include/map_msgs/ProjectedMapInfo.h	/^   typedef double _height_type;$/;"	t	struct:map_msgs::ProjectedMapInfo_
_l_x_type	include/map_msgs/GetMapROIRequest.h	/^   typedef double _l_x_type;$/;"	t	struct:map_msgs::GetMapROIRequest_
_l_x_type	include/map_msgs/GetPointMapROIRequest.h	/^   typedef double _l_x_type;$/;"	t	struct:map_msgs::GetPointMapROIRequest_
_l_y_type	include/map_msgs/GetMapROIRequest.h	/^   typedef double _l_y_type;$/;"	t	struct:map_msgs::GetMapROIRequest_
_l_y_type	include/map_msgs/GetPointMapROIRequest.h	/^   typedef double _l_y_type;$/;"	t	struct:map_msgs::GetPointMapROIRequest_
_l_z_type	include/map_msgs/GetPointMapROIRequest.h	/^   typedef double _l_z_type;$/;"	t	struct:map_msgs::GetPointMapROIRequest_
_map_type	include/map_msgs/GetPointMapResponse.h	/^   typedef  ::sensor_msgs::PointCloud2_<ContainerAllocator>  _map_type;$/;"	t	struct:map_msgs::GetPointMapResponse_
_map_type	include/map_msgs/ProjectedMap.h	/^   typedef  ::nav_msgs::OccupancyGrid_<ContainerAllocator>  _map_type;$/;"	t	struct:map_msgs::ProjectedMap_
_max_z_type	include/map_msgs/ProjectedMap.h	/^   typedef double _max_z_type;$/;"	t	struct:map_msgs::ProjectedMap_
_max_z_type	include/map_msgs/ProjectedMapInfo.h	/^   typedef double _max_z_type;$/;"	t	struct:map_msgs::ProjectedMapInfo_
_min_z_type	include/map_msgs/ProjectedMap.h	/^   typedef double _min_z_type;$/;"	t	struct:map_msgs::ProjectedMap_
_min_z_type	include/map_msgs/ProjectedMapInfo.h	/^   typedef double _min_z_type;$/;"	t	struct:map_msgs::ProjectedMapInfo_
_padding	include/pcl/io/tar.h	/^      char _padding[12];$/;"	m	struct:pcl::io::TARHeader
_points_type	include/map_msgs/PointCloud2Update.h	/^   typedef  ::sensor_msgs::PointCloud2_<ContainerAllocator>  _points_type;$/;"	t	struct:map_msgs::PointCloud2Update_
_projected_maps_info_type	include/map_msgs/ProjectedMapsInfoRequest.h	/^   typedef std::vector< ::map_msgs::ProjectedMapInfo_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::map_msgs::ProjectedMapInfo_<ContainerAllocator> >::other >  _projected_maps_info_type;$/;"	t	struct:map_msgs::ProjectedMapsInfoRequest_
_projected_maps_info_type	include/map_msgs/SetMapProjectionsResponse.h	/^   typedef std::vector< ::map_msgs::ProjectedMapInfo_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::map_msgs::ProjectedMapInfo_<ContainerAllocator> >::other >  _projected_maps_info_type;$/;"	t	struct:map_msgs::SetMapProjectionsResponse_
_r_type	include/map_msgs/GetPointMapROIRequest.h	/^   typedef double _r_type;$/;"	t	struct:map_msgs::GetPointMapROIRequest_
_sub_map_type	include/map_msgs/GetMapROIResponse.h	/^   typedef  ::nav_msgs::OccupancyGrid_<ContainerAllocator>  _sub_map_type;$/;"	t	struct:map_msgs::GetMapROIResponse_
_sub_map_type	include/map_msgs/GetPointMapROIResponse.h	/^   typedef  ::sensor_msgs::PointCloud2_<ContainerAllocator>  _sub_map_type;$/;"	t	struct:map_msgs::GetPointMapROIResponse_
_type_type	include/map_msgs/PointCloud2Update.h	/^   typedef uint32_t _type_type;$/;"	t	struct:map_msgs::PointCloud2Update_
_width_type	include/map_msgs/OccupancyGridUpdate.h	/^   typedef uint32_t _width_type;$/;"	t	struct:map_msgs::OccupancyGridUpdate_
_width_type	include/map_msgs/ProjectedMapInfo.h	/^   typedef double _width_type;$/;"	t	struct:map_msgs::ProjectedMapInfo_
_x_type	include/map_msgs/GetMapROIRequest.h	/^   typedef double _x_type;$/;"	t	struct:map_msgs::GetMapROIRequest_
_x_type	include/map_msgs/GetPointMapROIRequest.h	/^   typedef double _x_type;$/;"	t	struct:map_msgs::GetPointMapROIRequest_
_x_type	include/map_msgs/OccupancyGridUpdate.h	/^   typedef int32_t _x_type;$/;"	t	struct:map_msgs::OccupancyGridUpdate_
_x_type	include/map_msgs/ProjectedMapInfo.h	/^   typedef double _x_type;$/;"	t	struct:map_msgs::ProjectedMapInfo_
_y_type	include/map_msgs/GetMapROIRequest.h	/^   typedef double _y_type;$/;"	t	struct:map_msgs::GetMapROIRequest_
_y_type	include/map_msgs/GetPointMapROIRequest.h	/^   typedef double _y_type;$/;"	t	struct:map_msgs::GetPointMapROIRequest_
_y_type	include/map_msgs/OccupancyGridUpdate.h	/^   typedef int32_t _y_type;$/;"	t	struct:map_msgs::OccupancyGridUpdate_
_y_type	include/map_msgs/ProjectedMapInfo.h	/^   typedef double _y_type;$/;"	t	struct:map_msgs::ProjectedMapInfo_
_z_type	include/map_msgs/GetPointMapROIRequest.h	/^   typedef double _z_type;$/;"	t	struct:map_msgs::GetPointMapROIRequest_
a	include/pcl/common/impl/accumulators.hpp	/^      float r, g, b, a;$/;"	m	struct:pcl::detail::AccumulatorRGBA
a_	include/pcl/io/ply_io.h	/^      uint32_t a_, rgba_;$/;"	m	class:pcl::PLYReader
absolute	include/tf/LinearMath/Matrix3x3.h	/^Matrix3x3::absolute() const$/;"	f	class:tf::Matrix3x3
absolute	include/tf/LinearMath/Vector3.h	/^	TFSIMD_FORCE_INLINE Vector3 absolute() const $/;"	f	class:tf::Vector3
absolute4	include/tf/LinearMath/Vector3.h	/^	TFSIMD_FORCE_INLINE tfVector4 absolute4() const $/;"	f	class:tf::tfVector4
access_	include/costmap_2d/costmap_2d.h	/^  mutex_t* access_;$/;"	m	class:costmap_2d::Costmap2D
accumulatedWeight_	include/pcl/common/vector_average.h	/^        real accumulatedWeight_;$/;"	m	class:pcl::VectorAverage
accumulated_weight_	include/pcl/common/transformation_from_correspondences.h	/^        float accumulated_weight_;$/;"	m	class:pcl::TransformationFromCorrespondences
accumulators_	include/pcl/common/centroid.h	/^      typename pcl::detail::Accumulators<PointT>::type accumulators_;$/;"	m	class:pcl::CentroidPoint
activate	include/costmap_2d/layer.h	/^  virtual void activate() {}$/;"	f	class:costmap_2d::Layer
activate	src/obstacle_layer.cpp	/^void ObstacleLayer::activate()$/;"	f	class:costmap_2d::ObstacleLayer
activate	src/static_layer.cpp	/^void StaticLayer::activate()$/;"	f	class:costmap_2d::StaticLayer
add	include/pcl/common/centroid.h	/^      add (const PointT& point)$/;"	f	class:pcl::CentroidPoint
add	include/pcl/common/impl/accumulators.hpp	/^      add (const PointT& t) { curvature += t.curvature; }$/;"	f	struct:pcl::detail::AccumulatorCurvature
add	include/pcl/common/impl/accumulators.hpp	/^      add (const PointT& t) { intensity += t.intensity; }$/;"	f	struct:pcl::detail::AccumulatorIntensity
add	include/pcl/common/impl/accumulators.hpp	/^      add (const PointT& t) { normal += t.getNormalVector4fMap (); }$/;"	f	struct:pcl::detail::AccumulatorNormal
add	include/pcl/common/impl/accumulators.hpp	/^      add (const PointT& t) { xyz += t.getVector3fMap (); }$/;"	f	struct:pcl::detail::AccumulatorXYZ
add	include/pcl/common/impl/accumulators.hpp	/^      add (const PointT& t)$/;"	f	struct:pcl::detail::AccumulatorLabel
add	include/pcl/common/impl/accumulators.hpp	/^      add (const PointT& t)$/;"	f	struct:pcl::detail::AccumulatorRGBA
add	include/pcl/common/impl/intensity.hpp	/^      add (pcl::InterestPoint& p, float value) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
add	include/pcl/common/impl/intensity.hpp	/^      add (pcl::PointNormal& p, float value) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
add	include/pcl/common/impl/intensity.hpp	/^      add (pcl::PointSurfel& p, float value) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
add	include/pcl/common/impl/intensity.hpp	/^      add (pcl::PointWithRange& p, float value) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
add	include/pcl/common/impl/intensity.hpp	/^      add (pcl::PointWithScale& p, float value) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
add	include/pcl/common/impl/intensity.hpp	/^      add (pcl::PointWithViewpoint& p, float value) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
add	include/pcl/common/impl/intensity.hpp	/^      add (pcl::PointXYZ& p, float value) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
add	include/pcl/common/impl/intensity.hpp	/^      add (pcl::PointXYZHSV& p, float value) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
add	include/pcl/common/impl/intensity.hpp	/^      add (pcl::PointXYZL& p, float value) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
add	include/pcl/common/impl/intensity.hpp	/^      add (pcl::PointXYZLNormal& p, float value) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
add	include/pcl/common/impl/intensity.hpp	/^      add (pcl::PointXYZRGB& p, float value) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
add	include/pcl/common/impl/intensity.hpp	/^      add (pcl::PointXYZRGBA& p, float value) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
add	include/pcl/common/impl/intensity.hpp	/^      add (pcl::PointXYZRGBL& p, float value) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
add	include/pcl/common/impl/intensity.hpp	/^      add (pcl::PointXYZRGBNormal &p, float value) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
add	include/pcl/common/impl/transformation_from_correspondences.hpp	/^pcl::TransformationFromCorrespondences::add (const Eigen::Vector3f& point, const Eigen::Vector3f& corresponding_point,$/;"	f	class:pcl::TransformationFromCorrespondences
add	include/pcl/common/impl/vector_average.hpp	/^  inline void VectorAverage<real, dimension>::add(const Eigen::Matrix<real, dimension, 1>& sample, real weight) {$/;"	f	class:pcl::VectorAverage
add	include/pcl/common/intensity.h	/^      add (PointT& p, float value) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
add0	include/pcl/common/synchronizer.h	/^    add0 (const T1& t, unsigned long time)$/;"	f	class:pcl::Synchronizer
add1	include/pcl/common/synchronizer.h	/^    add1 (const T2& t, unsigned long time)$/;"	f	class:pcl::Synchronizer
addCallback	include/pcl/common/synchronizer.h	/^    addCallback (const CallbackFunction& callback)$/;"	f	class:pcl::Synchronizer
addExtraBounds	src/costmap_layer.cpp	/^void CostmapLayer::addExtraBounds(double mx0, double my0, double mx1, double my1)$/;"	f	class:costmap_2d::CostmapLayer
addInflationLayer	include/costmap_2d/testing_helper.h	/^costmap_2d::InflationLayer* addInflationLayer(costmap_2d::LayeredCostmap& layers, tf::TransformListener& tf)$/;"	f
addObservation	include/costmap_2d/testing_helper.h	/^void addObservation(costmap_2d::ObstacleLayer* olayer, double x, double y, double z = 0.0,$/;"	f
addObstacleLayer	include/costmap_2d/testing_helper.h	/^costmap_2d::ObstacleLayer* addObstacleLayer(costmap_2d::LayeredCostmap& layers, tf::TransformListener& tf)$/;"	f
addPlugin	include/costmap_2d/layered_costmap.h	/^  void addPlugin(boost::shared_ptr<Layer> plugin)$/;"	f	class:costmap_2d::LayeredCostmap
addStaticLayer	include/costmap_2d/testing_helper.h	/^void addStaticLayer(costmap_2d::LayeredCostmap& layers, tf::TransformListener& tf)$/;"	f
addStaticObservation	src/obstacle_layer.cpp	/^void ObstacleLayer::addStaticObservation(costmap_2d::Observation& obs, bool marking, bool clearing)$/;"	f	class:costmap_2d::ObstacleLayer
adjoint	include/tf/LinearMath/Matrix3x3.h	/^Matrix3x3::adjoint() const $/;"	f	class:tf::Matrix3x3
aligned_free	include/pcl/pcl_macros.h	/^aligned_free (void* ptr)$/;"	f
aligned_malloc	include/pcl/pcl_macros.h	/^aligned_malloc (size_t size)$/;"	f
allInOne	include/map_msgs/GetMapROIRequest.h	/^    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)$/;"	f	struct:ros::serialization::Serializer
allInOne	include/map_msgs/GetMapROIResponse.h	/^    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)$/;"	f	struct:ros::serialization::Serializer
allInOne	include/map_msgs/GetPointMapROIRequest.h	/^    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)$/;"	f	struct:ros::serialization::Serializer
allInOne	include/map_msgs/GetPointMapROIResponse.h	/^    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)$/;"	f	struct:ros::serialization::Serializer
allInOne	include/map_msgs/GetPointMapRequest.h	/^    template<typename Stream, typename T> inline static void allInOne(Stream&, T)$/;"	f	struct:ros::serialization::Serializer
allInOne	include/map_msgs/GetPointMapResponse.h	/^    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)$/;"	f	struct:ros::serialization::Serializer
allInOne	include/map_msgs/OccupancyGridUpdate.h	/^    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)$/;"	f	struct:ros::serialization::Serializer
allInOne	include/map_msgs/PointCloud2Update.h	/^    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)$/;"	f	struct:ros::serialization::Serializer
allInOne	include/map_msgs/ProjectedMap.h	/^    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)$/;"	f	struct:ros::serialization::Serializer
allInOne	include/map_msgs/ProjectedMapInfo.h	/^    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)$/;"	f	struct:ros::serialization::Serializer
allInOne	include/map_msgs/ProjectedMapsInfoRequest.h	/^    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)$/;"	f	struct:ros::serialization::Serializer
allInOne	include/map_msgs/ProjectedMapsInfoResponse.h	/^    template<typename Stream, typename T> inline static void allInOne(Stream&, T)$/;"	f	struct:ros::serialization::Serializer
allInOne	include/map_msgs/SaveMapRequest.h	/^    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)$/;"	f	struct:ros::serialization::Serializer
allInOne	include/map_msgs/SaveMapResponse.h	/^    template<typename Stream, typename T> inline static void allInOne(Stream&, T)$/;"	f	struct:ros::serialization::Serializer
allInOne	include/map_msgs/SetMapProjectionsRequest.h	/^    template<typename Stream, typename T> inline static void allInOne(Stream&, T)$/;"	f	struct:ros::serialization::Serializer
allInOne	include/map_msgs/SetMapProjectionsResponse.h	/^    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)$/;"	f	struct:ros::serialization::Serializer
alpha_	include/pcl/point_representation.h	/^      std::vector<float> alpha_;$/;"	m	class:pcl::PointRepresentation
alpha_m	include/pcl/impl/point_types.hpp	/^    float alpha_m;$/;"	m	struct:pcl::CPPFSignature
alpha_m	include/pcl/impl/point_types.hpp	/^    float alpha_m;$/;"	m	struct:pcl::PPFRGBSignature
alpha_m	include/pcl/impl/point_types.hpp	/^    float alpha_m;$/;"	m	struct:pcl::PPFSignature
angle	include/pcl/impl/point_types.hpp	/^    float angle;$/;"	m	struct:pcl::_PointWithScale
angle	include/tf/LinearMath/Quaternion.h	/^	tfScalar angle(const Quaternion& q) const $/;"	f	class:tf::Quaternion
angle	include/tf/LinearMath/Quaternion.h	/^angle(const Quaternion& q1, const Quaternion& q2) $/;"	f	namespace:tf
angle	include/tf/LinearMath/Vector3.h	/^	TFSIMD_FORCE_INLINE tfScalar angle(const Vector3& v) const $/;"	f	class:tf::Vector3
angleShortestPath	include/tf/LinearMath/Quaternion.h	/^	tfScalar angleShortestPath(const Quaternion& q) const $/;"	f	class:tf::Quaternion
angleShortestPath	include/tf/LinearMath/Quaternion.h	/^angleShortestPath(const Quaternion& q1, const Quaternion& q2) $/;"	f	namespace:tf
angular_resolution_x_	include/pcl/range_image/range_image.h	/^      float angular_resolution_x_;             \/**< Angular resolution of the range image in x direction in radians per pixel *\/$/;"	m	class:pcl::RangeImage
angular_resolution_x_reciprocal_	include/pcl/range_image/range_image.h	/^      float angular_resolution_x_reciprocal_;  \/**< 1.0\/angular_resolution_x_ - provided for better performace of$/;"	m	class:pcl::RangeImage
angular_resolution_y_	include/pcl/range_image/range_image.h	/^      float angular_resolution_y_;             \/**< Angular resolution of the range image in y direction in radians per pixel *\/$/;"	m	class:pcl::RangeImage
angular_resolution_y_reciprocal_	include/pcl/range_image/range_image.h	/^      float angular_resolution_y_reciprocal_;  \/**< 1.0\/angular_resolution_y_ - provided for better performace of$/;"	m	class:pcl::RangeImage
asEnum	include/pcl/point_traits.h	/^    template<> struct asEnum<double>   { static const uint8_t value = pcl::PCLPointField::FLOAT64; };$/;"	s	namespace:pcl::traits
asEnum	include/pcl/point_traits.h	/^    template<> struct asEnum<float>    { static const uint8_t value = pcl::PCLPointField::FLOAT32; };$/;"	s	namespace:pcl::traits
asEnum	include/pcl/point_traits.h	/^    template<> struct asEnum<int16_t>  { static const uint8_t value = pcl::PCLPointField::INT16;   };$/;"	s	namespace:pcl::traits
asEnum	include/pcl/point_traits.h	/^    template<> struct asEnum<int32_t>  { static const uint8_t value = pcl::PCLPointField::INT32;   };$/;"	s	namespace:pcl::traits
asEnum	include/pcl/point_traits.h	/^    template<> struct asEnum<int8_t>   { static const uint8_t value = pcl::PCLPointField::INT8;    };$/;"	s	namespace:pcl::traits
asEnum	include/pcl/point_traits.h	/^    template<> struct asEnum<uint16_t> { static const uint8_t value = pcl::PCLPointField::UINT16;  };$/;"	s	namespace:pcl::traits
asEnum	include/pcl/point_traits.h	/^    template<> struct asEnum<uint32_t> { static const uint8_t value = pcl::PCLPointField::UINT32;  };$/;"	s	namespace:pcl::traits
asEnum	include/pcl/point_traits.h	/^    template<> struct asEnum<uint8_t>  { static const uint8_t value = pcl::PCLPointField::UINT8;   };$/;"	s	namespace:pcl::traits
asEnum	include/pcl/point_traits.h	/^    template<typename T> struct asEnum {};$/;"	s	namespace:pcl::traits
asType	include/pcl/point_traits.h	/^    template<> struct asType<pcl::PCLPointField::FLOAT32> { typedef float    type; };$/;"	s	namespace:pcl::traits
asType	include/pcl/point_traits.h	/^    template<> struct asType<pcl::PCLPointField::FLOAT64> { typedef double   type; };$/;"	s	namespace:pcl::traits
asType	include/pcl/point_traits.h	/^    template<> struct asType<pcl::PCLPointField::INT16>   { typedef int16_t  type; };$/;"	s	namespace:pcl::traits
asType	include/pcl/point_traits.h	/^    template<> struct asType<pcl::PCLPointField::INT32>   { typedef int32_t  type; };$/;"	s	namespace:pcl::traits
asType	include/pcl/point_traits.h	/^    template<> struct asType<pcl::PCLPointField::INT8>    { typedef int8_t   type; };$/;"	s	namespace:pcl::traits
asType	include/pcl/point_traits.h	/^    template<> struct asType<pcl::PCLPointField::UINT16>  { typedef uint16_t type; };$/;"	s	namespace:pcl::traits
asType	include/pcl/point_traits.h	/^    template<> struct asType<pcl::PCLPointField::UINT32>  { typedef uint32_t type; };$/;"	s	namespace:pcl::traits
asType	include/pcl/point_traits.h	/^    template<> struct asType<pcl::PCLPointField::UINT8>   { typedef uint8_t  type; };$/;"	s	namespace:pcl::traits
asType	include/pcl/point_traits.h	/^    template<int> struct asType {};$/;"	s	namespace:pcl::traits
ascii_format	include/pcl/io/ply/ply.h	/^      enum format { ascii_format, binary_little_endian_format, binary_big_endian_format, unknown };  $/;"	e	enum:pcl::io::ply::format
asinLookUp	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::asinLookUp (float value)$/;"	f	class:pcl::RangeImage
asin_lookup_table	include/pcl/range_image/range_image.h	/^      static std::vector<float> asin_lookup_table;$/;"	m	class:pcl::RangeImage
at	include/pcl/io/file_grabber.h	/^    at (size_t idx) const$/;"	f	class:pcl::FileGrabber
at	include/pcl/io/ply/ply_parser.h	/^          at (const list_property_definition_callbacks_type& list_property_definition_callbacks)$/;"	f	class:pcl::io::ply::ply_parser
at	include/pcl/io/ply/ply_parser.h	/^          at (const scalar_property_definition_callbacks_type& scalar_property_definition_callbacks)$/;"	f	class:pcl::io::ply::ply_parser
at	include/pcl/io/ply/ply_parser.h	/^          at (list_property_definition_callbacks_type& list_property_definition_callbacks)$/;"	f	class:pcl::io::ply::ply_parser
at	include/pcl/io/ply/ply_parser.h	/^          at (scalar_property_definition_callbacks_type& scalar_property_definition_callbacks)$/;"	f	class:pcl::io::ply::ply_parser
at	include/pcl/point_cloud.h	/^      at (int column, int row) const$/;"	f	class:pcl::PointCloud
at	include/pcl/point_cloud.h	/^      at (int column, int row)$/;"	f	class:pcl::PointCloud
at	include/pcl/point_cloud.h	/^      inline PointT& at (size_t n) { return (points.at (n)); }$/;"	f	class:pcl::PointCloud
at	include/pcl/point_cloud.h	/^      inline const PointT& at (size_t n) const { return (points.at (n)); }$/;"	f	class:pcl::PointCloud
atan2LookUp	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::atan2LookUp (float y, float x)$/;"	f	class:pcl::RangeImage
atan_lookup_table	include/pcl/range_image/range_image.h	/^      static std::vector<float> atan_lookup_table;$/;"	m	class:pcl::RangeImage
available_depth_modes_	include/pcl/io/openni_camera/openni_device.h	/^      std::vector<XnMapOutputMode> available_depth_modes_;$/;"	m	class:openni_wrapper::OpenNIDevice
available_image_modes_	include/pcl/io/openni_camera/openni_device.h	/^      std::vector<XnMapOutputMode> available_image_modes_;$/;"	m	class:openni_wrapper::OpenNIDevice
azimuthCorrection	include/pcl/io/hdl_grabber.h	/^          double azimuthCorrection;$/;"	m	struct:pcl::HDLGrabber::HDLLaserCorrection
b	include/pcl/TextureMesh.h	/^      float b;$/;"	m	struct:pcl::TexMaterial::RGB
b	include/pcl/common/impl/accumulators.hpp	/^      float r, g, b, a;$/;"	m	struct:pcl::detail::AccumulatorRGBA
b	include/pcl/io/image_rgb24.h	/^          uint8_t b;$/;"	m	struct:pcl::io::ImageRGB24::__anon3
b_	include/pcl/io/ply_io.h	/^      int32_t r_, g_, b_;$/;"	m	class:pcl::PLYReader
b_ratio	include/pcl/impl/point_types.hpp	/^    float r_ratio, g_ratio, b_ratio;$/;"	m	struct:pcl::PPFRGBSignature
back	include/pcl/point_cloud.h	/^      inline PointT& back () { return (points.back ()); }$/;"	f	class:pcl::PointCloud
back	include/pcl/point_cloud.h	/^      inline const PointT& back () const { return (points.back ()); }$/;"	f	class:pcl::PointCloud
baseline_	include/pcl/io/image_depth.h	/^        float baseline_;$/;"	m	class:pcl::io::DepthImage
baseline_	include/pcl/io/openni2/openni2_device.h	/^          float baseline_;$/;"	m	class:pcl::io::openni2::OpenNI2Device
baseline_	include/pcl/io/openni_camera/openni_depth_image.h	/^      float baseline_;$/;"	m	class:openni_wrapper::DepthImage
baseline_	include/pcl/io/openni_camera/openni_device.h	/^      float baseline_;$/;"	m	class:openni_wrapper::OpenNIDevice
basis_only_	include/pcl/common/pca.h	/^      bool basis_only_;$/;"	m	class:pcl::PCA
begin	include/pcl/point_cloud.h	/^      inline const_iterator begin () const { return (points.begin ()); }$/;"	f	class:pcl::PointCloud
begin	include/pcl/point_cloud.h	/^      inline iterator begin () { return (points.begin ()); }$/;"	f	class:pcl::PointCloud
begin_callback	include/pcl/io/ply/ply_parser.h	/^            begin_callback_type begin_callback;$/;"	m	struct:pcl::io::ply::ply_parser::list_property
begin_callback_type	include/pcl/io/ply/ply_parser.h	/^            typedef typename list_property_begin_callback_type<size_type, scalar_type>::type begin_callback_type;$/;"	t	struct:pcl::io::ply::ply_parser::list_property
begin_element_callback	include/pcl/io/ply/ply_parser.h	/^            begin_element_callback_type begin_element_callback;$/;"	m	struct:pcl::io::ply::ply_parser::element
begin_element_callback_type	include/pcl/io/ply/ply_parser.h	/^          typedef boost::function<void ()> begin_element_callback_type;$/;"	t	class:pcl::io::ply::ply_parser
big_endian_byte_order	include/pcl/io/ply/byte_order.h	/^        big_endian_byte_order,$/;"	e	enum:pcl::io::ply::byte_order
binary_big_endian_format	include/pcl/io/ply/ply.h	/^      enum format { ascii_format, binary_little_endian_format, binary_big_endian_format, unknown };  $/;"	e	enum:pcl::io::ply::format
binary_little_endian_format	include/pcl/io/ply/ply.h	/^      enum format { ascii_format, binary_little_endian_format, binary_big_endian_format, unknown };  $/;"	e	enum:pcl::io::ply::format
bivariatePolynomialApproximation	include/pcl/common/impl/polynomial_calculations.hpp	/^  pcl::PolynomialCalculationsT<real>::bivariatePolynomialApproximation ($/;"	f	class:pcl::PolynomialCalculationsT
blockIdentifier	include/pcl/io/hdl_grabber.h	/^          unsigned short blockIdentifier;$/;"	m	struct:pcl::HDLGrabber::HDLFiringData
block_signal	include/pcl/io/grabber.h	/^  Grabber::block_signal ()$/;"	f	class:pcl::Grabber
block_signals	include/pcl/io/grabber.h	/^  Grabber::block_signals ()$/;"	f	class:pcl::Grabber
boundary_point	include/pcl/impl/point_types.hpp	/^    uint8_t boundary_point;$/;"	m	struct:pcl::Boundary
bresenham2D	include/costmap_2d/costmap_2d.h	/^    inline void bresenham2D(ActionType at, unsigned int abs_da, unsigned int abs_db, int error_b, int offset_a,$/;"	f	class:costmap_2d::Costmap2D
bufferCloud	src/observation_buffer.cpp	/^void ObservationBuffer::bufferCloud(const pcl::PointCloud<pcl::PointXYZ>& cloud)$/;"	f	class:costmap_2d::ObservationBuffer
buffer_	include/pcl/io/openni2/openni2_timer_filter.h	/^          std::deque<double> buffer_;$/;"	m	class:pcl::io::openni2::OpenNI2TimerFilter
buffer_traits	include/pcl/io/impl/buffers.hpp	/^struct buffer_traits <double>$/;"	s
buffer_traits	include/pcl/io/impl/buffers.hpp	/^struct buffer_traits <float>$/;"	s
buffer_traits	include/pcl/io/impl/buffers.hpp	/^struct buffer_traits$/;"	s
bulk_ep_	include/pcl/io/dinast_grabber.h	/^      unsigned char bulk_ep_;$/;"	m	class:pcl::DinastGrabber
bus_map_	include/pcl/io/openni_camera/openni_driver.h	/^    std::map< unsigned char, std::map<unsigned char, unsigned > > bus_map_;$/;"	m	class:openni_wrapper::OpenNIDriver
bx0_	include/costmap_2d/layered_costmap.h	/^  unsigned int bx0_, bxn_, by0_, byn_;$/;"	m	class:costmap_2d::LayeredCostmap
bxn_	include/costmap_2d/layered_costmap.h	/^  unsigned int bx0_, bxn_, by0_, byn_;$/;"	m	class:costmap_2d::LayeredCostmap
by0_	include/costmap_2d/layered_costmap.h	/^  unsigned int bx0_, bxn_, by0_, byn_;$/;"	m	class:costmap_2d::LayeredCostmap
byn_	include/costmap_2d/layered_costmap.h	/^  unsigned int bx0_, bxn_, by0_, byn_;$/;"	m	class:costmap_2d::LayeredCostmap
byte_order	include/pcl/io/ply/byte_order.h	/^      enum byte_order$/;"	g	namespace:pcl::io::ply
cached_cell_inflation_radius_	include/costmap_2d/inflation_layer.h	/^  unsigned int cached_cell_inflation_radius_;$/;"	m	class:costmap_2d::InflationLayer
cached_costs_	include/costmap_2d/inflation_layer.h	/^  unsigned char** cached_costs_;$/;"	m	class:costmap_2d::InflationLayer
cached_distances_	include/costmap_2d/inflation_layer.h	/^  double** cached_distances_;$/;"	m	class:costmap_2d::InflationLayer
calculate3DPoint	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::calculate3DPoint (float image_x, float image_y, Eigen::Vector3f& point) const$/;"	f	class:pcl::RangeImage
calculate3DPoint	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::calculate3DPoint (float image_x, float image_y, PointWithRange& point) const$/;"	f	class:pcl::RangeImage
calculate3DPoint	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::calculate3DPoint (float image_x, float image_y, float range, Eigen::Vector3f& point) const $/;"	f	class:pcl::RangeImage
calculate3DPoint	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::calculate3DPoint (float image_x, float image_y, float range, PointWithRange& point) const {$/;"	f	class:pcl::RangeImage
calculate3DPoint	include/pcl/range_image/impl/range_image_planar.hpp	/^RangeImagePlanar::calculate3DPoint (float image_x, float image_y, float range, Eigen::Vector3f& point) const$/;"	f	class:pcl::RangeImagePlanar
calculate3DPoint	include/pcl/range_image/impl/range_image_spherical.hpp	/^RangeImageSpherical::calculate3DPoint (float image_x, float image_y, float range, Eigen::Vector3f& point) const$/;"	f	class:pcl::RangeImageSpherical
calculateGradient	include/pcl/common/impl/bivariate_polynomial.hpp	/^pcl::BivariatePolynomialT<real>::calculateGradient (bool forceRecalc)$/;"	f	class:pcl::BivariatePolynomialT
calculateMinAndMaxDistances	src/footprint.cpp	/^void calculateMinAndMaxDistances(const std::vector<geometry_msgs::Point>& footprint, double& min_dist, double& max_dist)$/;"	f	namespace:costmap_2d
calculatePolygonArea	include/pcl/common/impl/common.hpp	/^pcl::calculatePolygonArea (const pcl::PointCloud<PointT> &polygon) $/;"	f	class:pcl
callback	include/pcl/io/ply/ply_parser.h	/^                typename list_property_definition_callback_type<size_type, scalar_type>::type callback;$/;"	m	struct:pcl::io::ply::ply_parser::list_property_definition_callbacks_type::callbacks_element
callback	include/pcl/io/ply/ply_parser.h	/^                typename scalar_property_definition_callback_type<scalar_type>::type callback;$/;"	m	struct:pcl::io::ply::ply_parser::scalar_property_definition_callbacks_type::callbacks_element
callback	include/pcl/io/ply/ply_parser.h	/^            callback_type callback;$/;"	m	struct:pcl::io::ply::ply_parser::scalar_property
callback_	include/pcl/io/openni2/openni2_frame_listener.h	/^          StreamCallbackFunction callback_;$/;"	m	class:pcl::io::openni2::OpenNI2FrameListener
callback_counter	include/pcl/common/synchronizer.h	/^    int callback_counter;$/;"	m	class:pcl::Synchronizer
callback_type	include/pcl/common/time_trigger.h	/^      typedef boost::function<void() > callback_type;$/;"	t	class:pcl::TimeTrigger
callback_type	include/pcl/io/ply/ply_parser.h	/^            typedef typename scalar_property_callback_type<scalar_type>::type callback_type;$/;"	t	struct:pcl::io::ply::ply_parser::scalar_property
callbacks	include/pcl/io/ply/ply_parser.h	/^                >::type callbacks;$/;"	t	class:pcl::io::ply::ply_parser::scalar_property_definition_callbacks_type
callbacks	include/pcl/io/ply/ply_parser.h	/^              typedef boost::mpl::inherit_linearly<sequence_product<size_types, scalar_types>::type, boost::mpl::inherit<boost::mpl::_1, callbacks_element<boost::mpl::_2> > >::type callbacks;$/;"	t	class:pcl::io::ply::ply_parser::list_property_definition_callbacks_type
callbacks_	include/pcl/common/time_trigger.h	/^      boost::signals2::signal <void() > callbacks_;$/;"	m	class:pcl::TimeTrigger
callbacks_	include/pcl/io/ply/ply_parser.h	/^              callbacks callbacks_;$/;"	m	class:pcl::io::ply::ply_parser::list_property_definition_callbacks_type
callbacks_	include/pcl/io/ply/ply_parser.h	/^              callbacks callbacks_;$/;"	m	class:pcl::io::ply::ply_parser::scalar_property_definition_callbacks_type
callbacks_element	include/pcl/io/ply/ply_parser.h	/^              struct callbacks_element$/;"	s	class:pcl::io::ply::ply_parser::list_property_definition_callbacks_type
callbacks_element	include/pcl/io/ply/ply_parser.h	/^              struct callbacks_element$/;"	s	class:pcl::io::ply::ply_parser::scalar_property_definition_callbacks_type
camera_	include/pcl/io/ensenso_grabber.h	/^      NxLibItem camera_;$/;"	m	class:pcl::EnsensoGrabber
capture_	include/pcl/io/real_sense/real_sense_device_manager.h	/^          boost::shared_ptr<PXCCapture> capture_;$/;"	m	class:pcl::io::real_sense::RealSenseDevice
capture_manager_	include/pcl/io/real_sense/real_sense_device_manager.h	/^          boost::shared_ptr<PXCCaptureManager> capture_manager_;$/;"	m	class:pcl::io::real_sense::RealSenseDeviceManager
capture_mutex_	include/pcl/io/dinast_grabber.h	/^      mutable boost::mutex capture_mutex_;$/;"	m	class:pcl::DinastGrabber
capture_thread_	include/pcl/io/dinast_grabber.h	/^      boost::thread capture_thread_;$/;"	m	class:pcl::DinastGrabber
captured_devices_	include/pcl/io/depth_sense/depth_sense_device_manager.h	/^          std::map<std::string, CapturedDevice> captured_devices_;$/;"	m	class:pcl::io::depth_sense::DepthSenseDeviceManager
cb_	include/pcl/common/synchronizer.h	/^    std::map<int, CallbackFunction> cb_;$/;"	m	class:pcl::Synchronizer
cellDistance	include/costmap_2d/inflation_layer.h	/^  unsigned int cellDistance(double world_dist)$/;"	f	class:costmap_2d::InflationLayer
cellDistance	src/costmap_2d.cpp	/^unsigned int Costmap2D::cellDistance(double world_dist)$/;"	f	class:costmap_2d::Costmap2D
cell_inflation_radius_	include/costmap_2d/inflation_layer.h	/^  unsigned int cell_inflation_radius_;$/;"	m	class:costmap_2d::InflationLayer
cells_	include/costmap_2d/costmap_2d.h	/^    std::vector<MapLocation>& cells_;$/;"	m	class:costmap_2d::Costmap2D::PolygonOutlineCells
center_x_	include/pcl/range_image/range_image_planar.h	/^      float center_x_, center_y_;      \/\/!< The principle point of the image$/;"	m	class:pcl::RangeImagePlanar
center_y_	include/pcl/range_image/range_image_planar.h	/^      float center_x_, center_y_;      \/\/!< The principle point of the image$/;"	m	class:pcl::RangeImagePlanar
centroid_	include/pcl/common/centroid.h	/^      Eigen::Matrix<Scalar, Eigen::Dynamic, 1> &centroid_;$/;"	m	struct:pcl::NdCentroidFunctor
char_map_	include/costmap_2d/costmap_2d.h	/^    const unsigned char* char_map_;$/;"	m	class:costmap_2d::Costmap2D::PolygonOutlineCells
checkCoordinateSystem	include/pcl/common/eigen.h	/^  checkCoordinateSystem (const Eigen::Matrix<Scalar, 3, 1> &origin,$/;"	f	namespace:pcl
checkCoordinateSystem	include/pcl/common/eigen.h	/^  checkCoordinateSystem (const Eigen::Matrix<double, 3, 1> &origin,$/;"	f	namespace:pcl
checkCoordinateSystem	include/pcl/common/eigen.h	/^  checkCoordinateSystem (const Eigen::Matrix<double, Eigen::Dynamic, 1> &line_x,$/;"	f	namespace:pcl
checkCoordinateSystem	include/pcl/common/eigen.h	/^  checkCoordinateSystem (const Eigen::Matrix<float, 3, 1> &origin,$/;"	f	namespace:pcl
checkCoordinateSystem	include/pcl/common/eigen.h	/^  checkCoordinateSystem (const Eigen::Matrix<float, Eigen::Dynamic, 1> &line_x,$/;"	f	namespace:pcl
checkCoordinateSystem	include/pcl/common/impl/eigen.hpp	/^pcl::checkCoordinateSystem (const Eigen::Matrix<Scalar, Eigen::Dynamic, 1> &line_x,$/;"	f	class:pcl
checkPoint	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::checkPoint (const Eigen::Vector3f& point, PointWithRange& point_in_image) const$/;"	f	class:pcl::RangeImage
chksum	include/pcl/io/tar.h	/^      char chksum[8];$/;"	m	struct:pcl::io::TARHeader
circumscribed_radius_	include/costmap_2d/layered_costmap.h	/^  double circumscribed_radius_, inscribed_radius_;$/;"	m	class:costmap_2d::LayeredCostmap
clear	include/pcl/point_cloud.h	/^      clear ()$/;"	f	class:pcl::PointCloud
clearStaticObservations	src/obstacle_layer.cpp	/^void ObstacleLayer::clearStaticObservations(bool marking, bool clearing)$/;"	f	class:costmap_2d::ObstacleLayer
clearing_buffers_	include/costmap_2d/obstacle_layer.h	/^  std::vector<boost::shared_ptr<costmap_2d::ObservationBuffer> > clearing_buffers_;  \/\/\/< @brief Used to store observation buffers used for clearing obstacles$/;"	m	class:costmap_2d::ObstacleLayer
client_connected_	include/pcl/io/davidsdk_grabber.h	/^      bool client_connected_;$/;"	m	class:pcl::DavidSDKGrabber
closestAxis	include/tf/LinearMath/Vector3.h	/^	TFSIMD_FORCE_INLINE int closestAxis() const $/;"	f	class:tf::Vector3
closestAxis4	include/tf/LinearMath/Vector3.h	/^	TFSIMD_FORCE_INLINE int closestAxis4() const $/;"	f	class:tf::tfVector4
cloud	include/pcl/PolygonMesh.h	/^    ::pcl::PCLPointCloud2 cloud;$/;"	m	struct:pcl::PolygonMesh
cloud	include/pcl/TextureMesh.h	/^    pcl::PCLPointCloud2  cloud;$/;"	m	struct:pcl::TextureMesh
cloudHeightCallback	include/pcl/io/ply_io.h	/^      cloudHeightCallback (const int &height) { cloud_->height = height; }$/;"	f	class:pcl::PLYReader
cloudWidthCallback	include/pcl/io/ply_io.h	/^      cloudWidthCallback (const int &width) { cloud_->width = width; }$/;"	f	class:pcl::PLYReader
cloud_	include/costmap_2d/observation.h	/^  pcl::PointCloud<pcl::PointXYZ>* cloud_;$/;"	m	class:costmap_2d::Observation
cloud_	include/pcl/impl/cloud_iterator.hpp	/^        PointCloud<PointT>& cloud_;$/;"	m	class:pcl::IteratorIdx
cloud_	include/pcl/impl/cloud_iterator.hpp	/^        const PointCloud<PointT>& cloud_;$/;"	m	class:pcl::ConstCloudIterator::ConstIteratorIdx
cloud_	include/pcl/impl/cloud_iterator.hpp	/^      PointCloud<PointT>& cloud_;$/;"	m	class:pcl::DefaultIterator
cloud_	include/pcl/impl/cloud_iterator.hpp	/^      const PointCloud<PointT>& cloud_;$/;"	m	class:pcl::ConstCloudIterator::DefaultConstIterator
cloud_	include/pcl/io/ply_io.h	/^      pcl::PCLPointCloud2 *cloud_;$/;"	m	class:pcl::PLYReader
coefficients_	include/pcl/common/pca.h	/^      Eigen::MatrixXf coefficients_;$/;"	m	class:pcl::PCA
cofac	include/tf/LinearMath/Matrix3x3.h	/^	tfScalar cofac(int r1, int c1, int r2, int c2) const $/;"	f	class:tf::Matrix3x3
color_data_	include/pcl/io/depth_sense/depth_sense_grabber_impl.h	/^        std::vector<uint8_t> color_data_;$/;"	m	struct:pcl::io::depth_sense::DepthSenseGrabberImpl
color_frame_listener	include/pcl/io/openni2/openni2_device.h	/^          boost::shared_ptr<OpenNI2FrameListener> color_frame_listener;$/;"	m	class:pcl::io::openni2::OpenNI2Device
color_height	include/pcl/io/real_sense_grabber.h	/^        unsigned int color_height;$/;"	m	struct:pcl::RealSenseGrabber::Mode
color_mode_	include/pcl/io/point_cloud_image_extractors.h	/^        ColorMode color_mode_;$/;"	m	class:pcl::io::PointCloudImageExtractorFromLabelField
color_node	include/pcl/io/depth_sense/depth_sense_device_manager.h	/^            DepthSense::ColorNode color_node;$/;"	m	struct:pcl::io::depth_sense::DepthSenseDeviceManager::CapturedDevice
color_resize_buffer_	include/pcl/io/openni2_grabber.h	/^        std::vector<uint8_t> color_resize_buffer_;$/;"	m	class:pcl::io::OpenNI2Grabber
color_video_modes_	include/pcl/io/openni2/openni2_device.h	/^          mutable std::vector<OpenNI2VideoMode> color_video_modes_;$/;"	m	class:pcl::io::openni2::OpenNI2Device
color_video_started_	include/pcl/io/openni2/openni2_device.h	/^          bool color_video_started_;$/;"	m	class:pcl::io::openni2::OpenNI2Device
color_video_stream_	include/pcl/io/openni2/openni2_device.h	/^          mutable boost::shared_ptr<openni::VideoStream> color_video_stream_;$/;"	m	class:pcl::io::openni2::OpenNI2Device
color_width	include/pcl/io/real_sense_grabber.h	/^        unsigned int color_width;$/;"	m	struct:pcl::RealSenseGrabber::Mode
combination_method_	include/costmap_2d/obstacle_layer.h	/^  int combination_method_;$/;"	m	class:costmap_2d::ObstacleLayer
comment_callback	include/pcl/io/ply/ply_parser.h	/^inline void pcl::io::ply::ply_parser::comment_callback (const comment_callback_type& comment_callback)$/;"	f	class:pcl::io::ply::ply_parser
comment_callback_	include/pcl/io/ply/ply_parser.h	/^          comment_callback_type comment_callback_;$/;"	m	class:pcl::io::ply::ply_parser
comment_callback_type	include/pcl/io/ply/ply_parser.h	/^          typedef boost::function<void (const std::string&)> comment_callback_type;$/;"	t	class:pcl::io::ply::ply_parser
common	include/pcl/common/generate.h	/^  namespace common$/;"	n	namespace:pcl
common	include/pcl/common/impl/intensity.hpp	/^  namespace common$/;"	n	namespace:pcl
common	include/pcl/common/impl/projection_matrix.hpp	/^  namespace common$/;"	n	namespace:pcl
common	include/pcl/common/intensity.h	/^  namespace common$/;"	n	namespace:pcl
common	include/pcl/common/random.h	/^  namespace common $/;"	n	namespace:pcl
common	include/pcl/common/spring.h	/^  namespace common$/;"	n	namespace:pcl
companions_	include/pcl/io/obj_io.h	/^      std::vector<pcl::MTLReader> companions_;$/;"	m	class:pcl::OBJReader
compare	include/pcl/io/impl/buffers.hpp	/^pcl::io::MedianBuffer<T>::compare (T a, T b)$/;"	f	class:pcl::io::MedianBuffer
compute3DCentroid	include/pcl/common/centroid.h	/^  compute3DCentroid (ConstCloudIterator<PointT> &cloud_iterator,$/;"	f	namespace:pcl
compute3DCentroid	include/pcl/common/centroid.h	/^  compute3DCentroid (const pcl::PointCloud<PointT> &cloud, $/;"	f	namespace:pcl
compute3DCentroid	include/pcl/common/centroid.h	/^  compute3DCentroid (const pcl::PointCloud<PointT> &cloud,$/;"	f	namespace:pcl
compute3DCentroid	include/pcl/common/impl/centroid.hpp	/^pcl::compute3DCentroid (ConstCloudIterator<PointT> &cloud_iterator,$/;"	f	class:pcl
compute3DCentroid	include/pcl/common/impl/centroid.hpp	/^pcl::compute3DCentroid (const pcl::PointCloud<PointT> &cloud, $/;"	f	class:pcl
compute3DCentroid	include/pcl/common/impl/centroid.hpp	/^pcl::compute3DCentroid (const pcl::PointCloud<PointT> &cloud,$/;"	f	class:pcl
computeCaches	src/inflation_layer.cpp	/^void InflationLayer::computeCaches()$/;"	f	class:costmap_2d::InflationLayer
computeCentroid	include/pcl/common/impl/centroid.hpp	/^pcl::computeCentroid (const pcl::PointCloud<PointInT>& cloud,$/;"	f	class:pcl
computeCorrespondingEigenVector	include/pcl/common/impl/eigen.hpp	/^pcl::computeCorrespondingEigenVector (const Matrix& mat, const typename Matrix::Scalar& eigenvalue, Vector& eigenvector)$/;"	f	class:pcl
computeCost	include/costmap_2d/inflation_layer.h	/^  inline unsigned char computeCost(double distance) const$/;"	f	class:costmap_2d::InflationLayer
computeCovarianceMatrix	include/pcl/common/centroid.h	/^  computeCovarianceMatrix (const pcl::PointCloud<PointT> &cloud,$/;"	f	namespace:pcl
computeCovarianceMatrix	include/pcl/common/impl/centroid.hpp	/^pcl::computeCovarianceMatrix (const pcl::PointCloud<PointT> &cloud,$/;"	f	class:pcl
computeCovarianceMatrixNormalized	include/pcl/common/centroid.h	/^  computeCovarianceMatrixNormalized (const pcl::PointCloud<PointT> &cloud,$/;"	f	namespace:pcl
computeCovarianceMatrixNormalized	include/pcl/common/impl/centroid.hpp	/^pcl::computeCovarianceMatrixNormalized (const pcl::PointCloud<PointT> &cloud,$/;"	f	class:pcl
computeGradients	include/pcl/common/gaussian.h	/^      computeGradients (const pcl::PointCloud<PointT> &input,$/;"	f	class:pcl::GaussianKernel
computeGradients	include/pcl/common/gaussian.h	/^      computeGradients (const pcl::PointCloud<float> &input,$/;"	f	class:pcl::GaussianKernel
computeMeanAndCovarianceMatrix	include/pcl/common/centroid.h	/^  computeMeanAndCovarianceMatrix (const pcl::PointCloud<PointT> &cloud,$/;"	f	namespace:pcl
computeMeanAndCovarianceMatrix	include/pcl/common/impl/centroid.hpp	/^pcl::computeMeanAndCovarianceMatrix (const pcl::PointCloud<PointT> &cloud,$/;"	f	class:pcl
computeNDCentroid	include/pcl/common/centroid.h	/^  computeNDCentroid (const pcl::PointCloud<PointT> &cloud, $/;"	f	namespace:pcl
computeNDCentroid	include/pcl/common/impl/centroid.hpp	/^pcl::computeNDCentroid (const pcl::PointCloud<PointT> &cloud, $/;"	f	class:pcl
computeNDCentroid	include/pcl/common/impl/centroid.hpp	/^pcl::computeNDCentroid (const pcl::PointCloud<PointT> &cloud,$/;"	f	class:pcl
computeRoots	include/pcl/common/impl/eigen.hpp	/^pcl::computeRoots (const Matrix& m, Roots& roots)$/;"	f	class:pcl
computeRoots2	include/pcl/common/impl/eigen.hpp	/^pcl::computeRoots2 (const Scalar& b, const Scalar& c, Roots& roots)$/;"	f	class:pcl
compute_done_	include/pcl/common/pca.h	/^      bool compute_done_;$/;"	m	class:pcl::PCA
concatenateFields	include/pcl/common/impl/io.hpp	/^pcl::concatenateFields (const pcl::PointCloud<PointIn1T> &cloud1_in,$/;"	f	class:pcl
cond_	include/pcl/io/impl/synchronized_queue.hpp	/^      boost::condition_variable cond_;   \/\/ The condition to wait for$/;"	m	class:pcl::SynchronizedQueue
condition_	include/pcl/common/time_trigger.h	/^      boost::condition_variable condition_;$/;"	m	class:pcl::TimeTrigger
condition_mutex_	include/pcl/common/time_trigger.h	/^      boost::mutex condition_mutex_;$/;"	m	class:pcl::TimeTrigger
confidence	include/pcl/impl/point_types.hpp	/^        float confidence;$/;"	m	struct:pcl::_PointSurfel::__anon44::__anon45
confidence_threshold_	include/pcl/io/depth_sense/depth_sense_grabber_impl.h	/^        int confidence_threshold_;$/;"	m	struct:pcl::io::depth_sense::DepthSenseGrabberImpl
confidence_threshold_	include/pcl/io/real_sense_grabber.h	/^      unsigned int confidence_threshold_;$/;"	m	class:pcl::RealSenseGrabber
config2oni_map_	include/pcl/io/openni2_grabber.h	/^        std::map<int, pcl::io::openni2::OpenNI2VideoMode> config2oni_map_;$/;"	m	class:pcl::io::OpenNI2Grabber
config2xn_map_	include/pcl/io/openni_grabber.h	/^      std::map<int, XnMapOutputMode> config2xn_map_;$/;"	m	class:pcl::OpenNIGrabber
configuration_mutex_	include/costmap_2d/costmap_2d_ros.h	/^  boost::recursive_mutex configuration_mutex_;$/;"	m	class:costmap_2d::Costmap2DROS
connection_string_map_	include/pcl/io/openni_camera/openni_driver.h	/^    std::map< std::string, unsigned > connection_string_map_;$/;"	m	class:openni_wrapper::OpenNIDriver
connections_	include/pcl/io/grabber.h	/^      std::map<std::string, std::vector<boost::signals2::connection> > connections_;$/;"	m	class:pcl::Grabber
console	include/pcl/console/parse.h	/^  namespace console$/;"	n	namespace:pcl
console	include/pcl/console/print.h	/^  namespace console$/;"	n	namespace:pcl
console	include/pcl/console/time.h	/^  namespace console$/;"	n	namespace:pcl
const_iterator	include/pcl/point_cloud.h	/^      typedef typename VectorType::const_iterator const_iterator;$/;"	t	class:pcl::PointCloud
const_shift_	include/pcl/io/openni_camera/openni_device.h	/^        XnUInt32 const_shift_;$/;"	m	struct:openni_wrapper::OpenNIDevice::ShiftConversion
consumer_thread_	include/pcl/io/robot_eye_grabber.h	/^      boost::shared_ptr<boost::thread> consumer_thread_;$/;"	m	class:pcl::RobotEyeGrabber
context_	include/pcl/io/depth_sense/depth_sense_device_manager.h	/^          DepthSense::Context context_;$/;"	m	class:pcl::io::depth_sense::DepthSenseDeviceManager
context_	include/pcl/io/dinast_grabber.h	/^      libusb_context *context_;$/;"	m	class:pcl::DinastGrabber
context_	include/pcl/io/openni_camera/openni_device.h	/^      xn::Context& context_;$/;"	m	class:openni_wrapper::OpenNIDevice
context_	include/pcl/io/openni_camera/openni_driver.h	/^    mutable xn::Context context_;$/;"	m	class:openni_wrapper::OpenNIDriver
convertShiftToDepth	include/pcl/io/openni_grabber.h	/^      convertShiftToDepth ($/;"	f	class:pcl::OpenNIGrabber
convexFillCells	src/costmap_2d.cpp	/^void Costmap2D::convexFillCells(const std::vector<MapLocation>& polygon, std::vector<MapLocation>& polygon_cells)$/;"	f	class:costmap_2d::Costmap2D
convolve	include/pcl/common/gaussian.h	/^      convolve (const pcl::PointCloud<PointT> &input,$/;"	f	class:pcl::GaussianKernel
convolve	include/pcl/common/gaussian.h	/^      convolve (const pcl::PointCloud<float> &input,$/;"	f	class:pcl::GaussianKernel
convolveCols	include/pcl/common/impl/gaussian.hpp	/^pcl::GaussianKernel::convolveCols(const pcl::PointCloud<PointT> &input,$/;"	f	class:pcl::GaussianKernel
convolveRows	include/pcl/common/impl/gaussian.hpp	/^pcl::GaussianKernel::convolveRows(const pcl::PointCloud<PointT> &input,$/;"	f	class:pcl::GaussianKernel
copyCostmapWindow	src/costmap_2d.cpp	/^bool Costmap2D::copyCostmapWindow(const Costmap2D& map, double win_origin_x, double win_origin_y, double win_size_x,$/;"	f	class:costmap_2d::Costmap2D
copyMapRegion	include/costmap_2d/costmap_2d.h	/^    void copyMapRegion(data_type* source_map, unsigned int sm_lower_left_x, unsigned int sm_lower_left_y,$/;"	f	class:costmap_2d::Costmap2D
copyPoint	include/pcl/common/impl/copy_point.hpp	/^pcl::copyPoint (const PointInT& point_in, PointOutT& point_out)$/;"	f	class:pcl
copyPoint	include/pcl/point_representation.h	/^        static void copyPoint (const Pod &p1, float * p2, int &f_idx)$/;"	f	struct:pcl::DefaultFeatureRepresentation::NdCopyPointFunctor::Helper
copyPointCloud	include/pcl/common/impl/io.hpp	/^pcl::copyPointCloud (const pcl::PointCloud<PointInT> &cloud_in, $/;"	f	class:pcl
copyPointCloud	include/pcl/common/impl/io.hpp	/^pcl::copyPointCloud (const pcl::PointCloud<PointInT> &cloud_in,$/;"	f	class:pcl
copyPointCloud	include/pcl/common/impl/io.hpp	/^pcl::copyPointCloud (const pcl::PointCloud<PointT> &cloud_in, $/;"	f	class:pcl
copyPointCloud	include/pcl/common/impl/io.hpp	/^pcl::copyPointCloud (const pcl::PointCloud<PointT> &cloud_in, pcl::PointCloud<PointT> &cloud_out,$/;"	f	class:pcl
copyStringValue	include/pcl/io/file_io.h	/^  copyStringValue (const std::string &st, pcl::PCLPointCloud2 &cloud,$/;"	f	namespace:pcl
copyStringValue	include/pcl/io/file_io.h	/^  copyStringValue<int8_t> (const std::string &st, pcl::PCLPointCloud2 &cloud,$/;"	f	namespace:pcl
copyStringValue	include/pcl/io/file_io.h	/^  copyStringValue<uint8_t> (const std::string &st, pcl::PCLPointCloud2 &cloud,$/;"	f	namespace:pcl
copyToFloatArray	include/pcl/point_representation.h	/^      copyToFloatArray (const Narf36 &p, float * out) const$/;"	f	class:pcl::DefaultPointRepresentation
copyToFloatArray	include/pcl/point_representation.h	/^      copyToFloatArray (const PPFSignature &p, float * out) const$/;"	f	class:pcl::DefaultPointRepresentation
copyToFloatArray	include/pcl/point_representation.h	/^      copyToFloatArray (const PointDefault &p, float * out) const$/;"	f	class:pcl::DefaultFeatureRepresentation
copyToFloatArray	include/pcl/point_representation.h	/^      copyToFloatArray (const PointDefault &p, float * out) const$/;"	f	class:pcl::DefaultPointRepresentation
copyToFloatArray	include/pcl/point_representation.h	/^      copyToFloatArray (const PointDefault &p, float *out) const$/;"	f	class:pcl::CustomPointRepresentation
copyToFloatArray	include/pcl/point_representation.h	/^      copyToFloatArray (const PointNormal &p, float * out) const$/;"	f	class:pcl::DefaultPointRepresentation
copyToFloatArray	include/pcl/point_representation.h	/^      copyToFloatArray (const PointXYZ &p, float * out) const$/;"	f	class:pcl::DefaultPointRepresentation
copyToFloatArray	include/pcl/point_representation.h	/^      copyToFloatArray (const PointXYZI &p, float * out) const$/;"	f	class:pcl::DefaultPointRepresentation
copyToFloatArray	include/pcl/point_representation.h	/^      copyToFloatArray (const SHOT1344 &p, float * out) const$/;"	f	class:pcl::DefaultPointRepresentation
copyToFloatArray	include/pcl/point_representation.h	/^      copyToFloatArray (const SHOT352 &p, float * out) const$/;"	f	class:pcl::DefaultPointRepresentation
copyToFloatArray	include/pcl/point_representation.h	/^      copyToFloatArray (const ShapeContext1980 &p, float * out) const$/;"	f	class:pcl::DefaultPointRepresentation
copyToFloatArray	include/pcl/point_representation.h	/^      copyToFloatArray (const UniqueShapeContext1960 &p, float * out) const$/;"	f	class:pcl::DefaultPointRepresentation
copyValueString	include/pcl/io/file_io.h	/^  copyValueString (const pcl::PCLPointCloud2 &cloud,$/;"	f	namespace:pcl
copyValueString	include/pcl/io/file_io.h	/^  copyValueString<int8_t> (const pcl::PCLPointCloud2 &cloud,$/;"	f	namespace:pcl
copyValueString	include/pcl/io/file_io.h	/^  copyValueString<uint8_t> (const pcl::PCLPointCloud2 &cloud,$/;"	f	namespace:pcl
correspondence_indices	include/pcl/common/poses_from_matches.h	/^        std::vector<int> correspondence_indices;  \/\/!< The indices of the used correspondences$/;"	m	struct:pcl::PosesFromMatches::PoseEstimate
cosLookUp	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::cosLookUp (float value)$/;"	f	class:pcl::RangeImage
cosVertCorrection	include/pcl/io/hdl_grabber.h	/^          double cosVertCorrection;$/;"	m	struct:pcl::HDLGrabber::HDLLaserCorrection
cosVertOffsetCorrection	include/pcl/io/hdl_grabber.h	/^          double cosVertOffsetCorrection;$/;"	m	struct:pcl::HDLGrabber::HDLLaserCorrection
cos_lookup_table	include/pcl/range_image/range_image.h	/^      static std::vector<float> cos_lookup_table;$/;"	m	class:pcl::RangeImage
cos_lookup_table_	include/pcl/io/hdl_grabber.h	/^      static double *cos_lookup_table_;$/;"	m	class:pcl::HDLGrabber
costLookup	include/costmap_2d/inflation_layer.h	/^  inline unsigned char costLookup(int mx, int my, int src_x, int src_y)$/;"	f	class:costmap_2d::InflationLayer
costmap_	include/costmap_2d/costmap_2d.h	/^    const Costmap2D& costmap_;$/;"	m	class:costmap_2d::Costmap2D::PolygonOutlineCells
costmap_	include/costmap_2d/costmap_2d.h	/^    unsigned char* costmap_;$/;"	m	class:costmap_2d::Costmap2D::MarkCell
costmap_	include/costmap_2d/costmap_2d.h	/^  unsigned char* costmap_;$/;"	m	class:costmap_2d::Costmap2D
costmap_	include/costmap_2d/layered_costmap.h	/^  Costmap2D costmap_;$/;"	m	class:costmap_2d::LayeredCostmap
costmap_2d	include/costmap_2d/array_parser.h	/^namespace costmap_2d$/;"	n
costmap_2d	include/costmap_2d/cost_values.h	/^namespace costmap_2d$/;"	n
costmap_2d	include/costmap_2d/costmap_2d.h	/^namespace costmap_2d$/;"	n
costmap_2d	include/costmap_2d/costmap_2d_ros.h	/^namespace costmap_2d$/;"	n
costmap_2d	include/costmap_2d/costmap_layer.h	/^namespace costmap_2d$/;"	n
costmap_2d	include/costmap_2d/costmap_settings.h	/^namespace costmap_2d$/;"	n
costmap_2d	include/costmap_2d/footprint.h	/^namespace costmap_2d$/;"	n
costmap_2d	include/costmap_2d/inflation_layer.h	/^namespace costmap_2d$/;"	n
costmap_2d	include/costmap_2d/layer.h	/^namespace costmap_2d$/;"	n
costmap_2d	include/costmap_2d/layered_costmap.h	/^namespace costmap_2d$/;"	n
costmap_2d	include/costmap_2d/map_loader.h	/^namespace costmap_2d$/;"	n
costmap_2d	include/costmap_2d/observation.h	/^namespace costmap_2d$/;"	n
costmap_2d	include/costmap_2d/observation_buffer.h	/^namespace costmap_2d$/;"	n
costmap_2d	include/costmap_2d/obstacle_layer.h	/^namespace costmap_2d$/;"	n
costmap_2d	include/costmap_2d/static_layer.h	/^namespace costmap_2d$/;"	n
costmap_2d	src/array_parser.cpp	/^namespace costmap_2d$/;"	n	file:
costmap_2d	src/costmap_2d.cpp	/^namespace costmap_2d$/;"	n	file:
costmap_2d	src/costmap_2d_ros.cpp	/^namespace costmap_2d$/;"	n	file:
costmap_2d	src/costmap_layer.cpp	/^namespace costmap_2d$/;"	n	file:
costmap_2d	src/costmap_settings.cpp	/^namespace costmap_2d$/;"	n	file:
costmap_2d	src/footprint.cpp	/^namespace costmap_2d$/;"	n	file:
costmap_2d	src/inflation_layer.cpp	/^namespace costmap_2d$/;"	n	file:
costmap_2d	src/layer.cpp	/^namespace costmap_2d$/;"	n	file:
costmap_2d	src/layered_costmap.cpp	/^namespace costmap_2d$/;"	n	file:
costmap_2d	src/observation_buffer.cpp	/^namespace costmap_2d$/;"	n	file:
costmap_2d	src/obstacle_layer.cpp	/^namespace costmap_2d$/;"	n	file:
costmap_2d	src/static_layer.cpp	/^namespace costmap_2d$/;"	n	file:
count	include/pcl/PCLPointField.h	/^    pcl::uint32_t count;$/;"	m	struct:pcl::PCLPointField
count	include/pcl/io/ply/ply_parser.h	/^            std::size_t count;$/;"	m	struct:pcl::io::ply::ply_parser::element
countValues	include/costmap_2d/testing_helper.h	/^unsigned int countValues(costmap_2d::Costmap2D& costmap, unsigned char value, bool equal = true)$/;"	f
covariance_	include/pcl/common/transformation_from_correspondences.h	/^        Eigen::Matrix<float, 3, 3> covariance_;$/;"	m	class:pcl::TransformationFromCorrespondences
covariance_	include/pcl/common/vector_average.h	/^        Eigen::Matrix<real, dimension, dimension> covariance_;$/;"	m	class:pcl::VectorAverage
createDetailedMessage	include/pcl/exceptions.h	/^      createDetailedMessage (const std::string& error_description,$/;"	f	class:pcl::PCLException
createFromPointCloud	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::createFromPointCloud (const PointCloudType& point_cloud, float angular_resolution,$/;"	f	class:pcl::RangeImage
createFromPointCloud	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::createFromPointCloud (const PointCloudType& point_cloud,$/;"	f	class:pcl::RangeImage
createFromPointCloudWithFixedSize	include/pcl/range_image/impl/range_image_planar.hpp	/^RangeImagePlanar::createFromPointCloudWithFixedSize (const PointCloudType& point_cloud,$/;"	f	class:pcl::RangeImagePlanar
createFromPointCloudWithKnownSize	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::createFromPointCloudWithKnownSize (const PointCloudType& point_cloud, float angular_resolution,$/;"	f	class:pcl::RangeImage
createFromPointCloudWithKnownSize	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::createFromPointCloudWithKnownSize (const PointCloudType& point_cloud,$/;"	f	class:pcl::RangeImage
createFromPointCloudWithViewpoints	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::createFromPointCloudWithViewpoints (const PointCloudTypeWithViewpoints& point_cloud,$/;"	f	class:pcl::RangeImage
createMapping	include/pcl/conversions.h	/^  createMapping (const std::vector<pcl::PCLPointField>& msg_fields, MsgFieldMap& field_map)$/;"	f	namespace:pcl
createSignal	include/pcl/io/grabber.h	/^  Grabber::createSignal ()$/;"	f	class:pcl::Grabber
cross	include/tf/LinearMath/Vector3.h	/^	TFSIMD_FORCE_INLINE Vector3 cross(const Vector3& v) const$/;"	f	class:tf::Vector3
current_	include/costmap_2d/layer.h	/^  bool current_;$/;"	m	class:costmap_2d::Layer
current_	include/costmap_2d/layered_costmap.h	/^  bool current_;$/;"	m	class:costmap_2d::LayeredCostmap
current_element_	include/pcl/io/ply/ply_parser.h	/^          element* current_element_;$/;"	m	class:pcl::io::ply::ply_parser
current_scan_xyz_	include/pcl/io/hdl_grabber.h	/^      boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> > current_scan_xyz_, current_sweep_xyz_;$/;"	m	class:pcl::HDLGrabber
current_scan_xyzi_	include/pcl/io/hdl_grabber.h	/^      boost::shared_ptr<pcl::PointCloud<pcl::PointXYZI> > current_scan_xyzi_, current_sweep_xyzi_;$/;"	m	class:pcl::HDLGrabber
current_scan_xyzrgb_	include/pcl/io/hdl_grabber.h	/^      boost::shared_ptr<pcl::PointCloud<pcl::PointXYZRGBA> > current_scan_xyzrgb_, current_sweep_xyzrgb_;$/;"	m	class:pcl::HDLGrabber
current_sweep_xyz_	include/pcl/io/hdl_grabber.h	/^      boost::shared_ptr<pcl::PointCloud<pcl::PointXYZ> > current_scan_xyz_, current_sweep_xyz_;$/;"	m	class:pcl::HDLGrabber
current_sweep_xyzi_	include/pcl/io/hdl_grabber.h	/^      boost::shared_ptr<pcl::PointCloud<pcl::PointXYZI> > current_scan_xyzi_, current_sweep_xyzi_;$/;"	m	class:pcl::HDLGrabber
current_sweep_xyzrgb_	include/pcl/io/hdl_grabber.h	/^      boost::shared_ptr<pcl::PointCloud<pcl::PointXYZRGBA> > current_scan_xyzrgb_, current_sweep_xyzrgb_;$/;"	m	class:pcl::HDLGrabber
curvature	include/pcl/common/impl/accumulators.hpp	/^      float curvature;$/;"	m	struct:pcl::detail::AccumulatorCurvature
curvature	include/pcl/impl/point_types.hpp	/^        float curvature;$/;"	m	struct:pcl::_Normal::__anon23::__anon24
curvature	include/pcl/impl/point_types.hpp	/^        float curvature;$/;"	m	struct:pcl::_PointNormal::__anon25::__anon26
curvature	include/pcl/impl/point_types.hpp	/^        float curvature;$/;"	m	struct:pcl::_PointSurfel::__anon44::__anon45
curvature	include/pcl/impl/point_types.hpp	/^        float curvature;$/;"	m	struct:pcl::_PointXYZINormal::__anon29::__anon30
curvature	include/pcl/impl/point_types.hpp	/^        float curvature;$/;"	m	struct:pcl::_PointXYZLNormal::__anon31::__anon32
curvature	include/pcl/impl/point_types.hpp	/^        float curvature;$/;"	m	struct:pcl::_PointXYZRGBNormal::__anon27::__anon28
data	include/map_msgs/OccupancyGridUpdate.h	/^  _data_type data;$/;"	m	struct:map_msgs::OccupancyGridUpdate_
data	include/pcl/PCLImage.h	/^    std::vector<pcl::uint8_t> data;$/;"	m	struct:pcl::PCLImage
data	include/pcl/PCLPointCloud2.h	/^    std::vector<pcl::uint8_t> data;$/;"	m	struct:pcl::PCLPointCloud2
data_	include/pcl/io/buffers.h	/^        std::vector<T> data_;$/;"	m	class:pcl::io::SingleBuffer
data_	include/pcl/io/buffers.h	/^        std::vector<std::vector<T> > data_;$/;"	m	class:pcl::io::AverageBuffer
data_	include/pcl/io/buffers.h	/^        std::vector<std::vector<T> > data_;$/;"	m	class:pcl::io::MedianBuffer
data_argsort_indices_	include/pcl/io/buffers.h	/^        std::vector<std::vector<unsigned char> > data_argsort_indices_;$/;"	m	class:pcl::io::MedianBuffer
data_c	include/pcl/impl/point_types.hpp	/^      float data_c[4];$/;"	m	union:pcl::InterestPoint::__anon21
data_c	include/pcl/impl/point_types.hpp	/^      float data_c[4];$/;"	m	union:pcl::_Normal::__anon23
data_c	include/pcl/impl/point_types.hpp	/^      float data_c[4];$/;"	m	union:pcl::_PointNormal::__anon25
data_c	include/pcl/impl/point_types.hpp	/^      float data_c[4];$/;"	m	union:pcl::_PointSurfel::__anon44
data_c	include/pcl/impl/point_types.hpp	/^      float data_c[4];$/;"	m	union:pcl::_PointWithRange::__anon33
data_c	include/pcl/impl/point_types.hpp	/^      float data_c[4];$/;"	m	union:pcl::_PointWithViewpoint::__anon35
data_c	include/pcl/impl/point_types.hpp	/^      float data_c[4];$/;"	m	union:pcl::_PointXYZHSV::__anon19
data_c	include/pcl/impl/point_types.hpp	/^      float data_c[4];$/;"	m	union:pcl::_PointXYZI::__anon17
data_c	include/pcl/impl/point_types.hpp	/^      float data_c[4];$/;"	m	union:pcl::_PointXYZINormal::__anon29
data_c	include/pcl/impl/point_types.hpp	/^      float data_c[4];$/;"	m	union:pcl::_PointXYZLNormal::__anon31
data_c	include/pcl/impl/point_types.hpp	/^      float data_c[4];$/;"	m	union:pcl::_PointXYZRGBNormal::__anon27
data_current_idx_	include/pcl/io/buffers.h	/^        unsigned char data_current_idx_;$/;"	m	class:pcl::io::AverageBuffer
data_current_idx_	include/pcl/io/buffers.h	/^        unsigned char data_current_idx_;$/;"	m	class:pcl::io::MedianBuffer
data_invalid_count_	include/pcl/io/buffers.h	/^        std::vector<unsigned char> data_invalid_count_;$/;"	m	class:pcl::io::AverageBuffer
data_invalid_count_	include/pcl/io/buffers.h	/^        std::vector<unsigned char> data_invalid_count_;$/;"	m	class:pcl::io::MedianBuffer
data_mutex_	include/pcl/io/buffers.h	/^        mutable boost::mutex data_mutex_;$/;"	m	class:pcl::io::AverageBuffer
data_mutex_	include/pcl/io/buffers.h	/^        mutable boost::mutex data_mutex_;$/;"	m	class:pcl::io::MedianBuffer
data_mutex_	include/pcl/io/buffers.h	/^        mutable boost::mutex data_mutex_;$/;"	m	class:pcl::io::SingleBuffer
data_points_	include/pcl/common/piecewise_linear_function.h	/^      std::vector<float> data_points_;$/;"	m	class:pcl::PiecewiseLinearFunction
data_port_	include/pcl/io/robot_eye_grabber.h	/^      unsigned short data_port_;$/;"	m	class:pcl::RobotEyeGrabber
data_size_	include/pcl/io/robot_eye_grabber.h	/^      unsigned int data_size_;$/;"	m	class:pcl::RobotEyeGrabber
data_sum_	include/pcl/io/buffers.h	/^        std::vector<T> data_sum_;$/;"	m	class:pcl::io::AverageBuffer
datatype	include/pcl/PCLPointField.h	/^    pcl::uint8_t datatype;$/;"	m	struct:pcl::PCLPointField
datatype	include/pcl/point_traits.h	/^    struct datatype : datatype<typename POD<PointT>::type, Tag>$/;"	s	namespace:pcl::traits
david_	include/pcl/io/davidsdk_grabber.h	/^      david::Client david_;$/;"	m	class:pcl::DavidSDKGrabber
deSerialize	include/tf/LinearMath/Matrix3x3.h	/^TFSIMD_FORCE_INLINE	void	Matrix3x3::deSerialize(const struct	Matrix3x3Data& dataIn)$/;"	f	class:tf::Matrix3x3
deSerialize	include/tf/LinearMath/Transform.h	/^TFSIMD_FORCE_INLINE	void	Transform::deSerialize(const TransformData& dataIn)$/;"	f	class:tf::Transform
deSerialize	include/tf/LinearMath/Vector3.h	/^TFSIMD_FORCE_INLINE void	Vector3::deSerialize(const struct	Vector3Data& dataIn)$/;"	f	class:tf::Vector3
deSerializeDouble	include/tf/LinearMath/Matrix3x3.h	/^TFSIMD_FORCE_INLINE	void	Matrix3x3::deSerializeDouble(const struct	Matrix3x3DoubleData& dataIn)$/;"	f	class:tf::Matrix3x3
deSerializeDouble	include/tf/LinearMath/Transform.h	/^TFSIMD_FORCE_INLINE	void	Transform::deSerializeDouble(const TransformDoubleData& dataIn)$/;"	f	class:tf::Transform
deSerializeDouble	include/tf/LinearMath/Vector3.h	/^TFSIMD_FORCE_INLINE void	Vector3::deSerializeDouble(const struct	Vector3DoubleData& dataIn)$/;"	f	class:tf::Vector3
deSerializeFloat	include/tf/LinearMath/Matrix3x3.h	/^TFSIMD_FORCE_INLINE	void	Matrix3x3::deSerializeFloat(const struct	Matrix3x3FloatData& dataIn)$/;"	f	class:tf::Matrix3x3
deSerializeFloat	include/tf/LinearMath/Transform.h	/^TFSIMD_FORCE_INLINE	void	Transform::deSerializeFloat(const TransformFloatData& dataIn)$/;"	f	class:tf::Transform
deSerializeFloat	include/tf/LinearMath/Vector3.h	/^TFSIMD_FORCE_INLINE void	Vector3::deSerializeFloat(const struct	Vector3FloatData& dataIn)$/;"	f	class:tf::Vector3
deactivate	include/costmap_2d/layer.h	/^  virtual void deactivate() {}$/;"	f	class:costmap_2d::Layer
deactivate	src/obstacle_layer.cpp	/^void ObstacleLayer::deactivate()$/;"	f	class:costmap_2d::ObstacleLayer
deactivate	src/static_layer.cpp	/^void StaticLayer::deactivate()$/;"	f	class:costmap_2d::StaticLayer
debayering_method_	include/pcl/io/openni_camera/openni_device_kinect.h	/^    ImageBayerGRBG::DebayeringMethod debayering_method_;$/;"	m	class:openni_wrapper::DeviceKinect
debayering_method_	include/pcl/io/openni_camera/openni_image_bayer_grbg.h	/^      DebayeringMethod debayering_method_;$/;"	m	class:openni_wrapper::ImageBayerGRBG
debug	include/pcl/range_image/range_image.h	/^      static bool debug; \/**< Just for... well... debugging purposes. :-) *\/$/;"	m	class:pcl::RangeImage
decomposeArray	include/pcl/point_traits.h	/^    template<typename T> struct decomposeArray$/;"	s	namespace:pcl::traits
deepCopy	include/pcl/common/impl/bivariate_polynomial.hpp	/^pcl::BivariatePolynomialT<real>::deepCopy (const pcl::BivariatePolynomialT<real>& other)$/;"	f	class:pcl::BivariatePolynomialT
default_value_	include/costmap_2d/costmap_2d.h	/^  unsigned char default_value_;$/;"	m	class:costmap_2d::Costmap2D
deg2rad	include/pcl/common/impl/angles.hpp	/^  deg2rad (double alpha)$/;"	f	namespace:pcl
deg2rad	include/pcl/common/impl/angles.hpp	/^  deg2rad (float alpha)$/;"	f	namespace:pcl
degree	include/pcl/common/bivariate_polynomial.h	/^      int degree;$/;"	m	class:pcl::BivariatePolynomialT
deinitCompute	include/pcl/impl/pcl_base.hpp	/^pcl::PCLBase<PointT>::deinitCompute ()$/;"	f	class:pcl::PCLBase
deleteCols	include/pcl/common/impl/spring.hpp	/^pcl::common::deleteCols (const PointCloud<PointT>& input, PointCloud<PointT>& output,$/;"	f	class:pcl::common
deleteKernels	src/inflation_layer.cpp	/^void InflationLayer::deleteKernels()$/;"	f	class:costmap_2d::InflationLayer
deleteMaps	src/costmap_2d.cpp	/^void Costmap2D::deleteMaps()$/;"	f	class:costmap_2d::Costmap2D
deleteRows	include/pcl/common/impl/spring.hpp	/^pcl::common::deleteRows (const PointCloud<PointT>& input, PointCloud<PointT>& output,$/;"	f	class:pcl::common
demean	include/pcl/common/impl/intensity.hpp	/^      demean (pcl::InterestPoint& p, float value) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
demean	include/pcl/common/impl/intensity.hpp	/^      demean (pcl::PointNormal& p, float value) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
demean	include/pcl/common/impl/intensity.hpp	/^      demean (pcl::PointSurfel& p, float value) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
demean	include/pcl/common/impl/intensity.hpp	/^      demean (pcl::PointWithRange& p, float value) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
demean	include/pcl/common/impl/intensity.hpp	/^      demean (pcl::PointWithScale& p, float value) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
demean	include/pcl/common/impl/intensity.hpp	/^      demean (pcl::PointWithViewpoint& p, float value) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
demean	include/pcl/common/impl/intensity.hpp	/^      demean (pcl::PointXYZ& p, float value) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
demean	include/pcl/common/impl/intensity.hpp	/^      demean (pcl::PointXYZHSV& p, float value) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
demean	include/pcl/common/impl/intensity.hpp	/^      demean (pcl::PointXYZL& p, float value) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
demean	include/pcl/common/impl/intensity.hpp	/^      demean (pcl::PointXYZLNormal& p, float value) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
demean	include/pcl/common/impl/intensity.hpp	/^      demean (pcl::PointXYZRGB& p, float value) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
demean	include/pcl/common/impl/intensity.hpp	/^      demean (pcl::PointXYZRGBA& p, float value) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
demean	include/pcl/common/impl/intensity.hpp	/^      demean (pcl::PointXYZRGBL& p, float value) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
demean	include/pcl/common/impl/intensity.hpp	/^      demean (pcl::PointXYZRGBNormal &p, float value) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
demean	include/pcl/common/intensity.h	/^      demean (PointT& p, float value) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
demeanPointCloud	include/pcl/common/centroid.h	/^  demeanPointCloud (ConstCloudIterator<PointT> &cloud_iterator,$/;"	f	namespace:pcl
demeanPointCloud	include/pcl/common/centroid.h	/^  demeanPointCloud (const pcl::PointCloud<PointT> &cloud_in,$/;"	f	namespace:pcl
demeanPointCloud	include/pcl/common/impl/centroid.hpp	/^pcl::demeanPointCloud (ConstCloudIterator<PointT> &cloud_iterator,$/;"	f	class:pcl
demeanPointCloud	include/pcl/common/impl/centroid.hpp	/^pcl::demeanPointCloud (const pcl::PointCloud<PointT> &cloud_in,$/;"	f	class:pcl
depth_buffer_	include/pcl/io/depth_sense/depth_sense_grabber_impl.h	/^        boost::shared_ptr<pcl::io::Buffer<float> > depth_buffer_;$/;"	m	struct:pcl::io::depth_sense::DepthSenseGrabberImpl
depth_buffer_	include/pcl/io/openni_grabber.h	/^      mutable boost::shared_array<unsigned short> depth_buffer_;$/;"	m	class:pcl::OpenNIGrabber
depth_buffer_	include/pcl/io/real_sense_grabber.h	/^      boost::shared_ptr<pcl::io::Buffer<unsigned short> > depth_buffer_;$/;"	m	class:pcl::RealSenseGrabber
depth_buffer_size_	include/pcl/io/openni_grabber.h	/^      mutable unsigned depth_buffer_size_;$/;"	m	class:pcl::OpenNIGrabber
depth_callback_	include/pcl/io/openni_camera/openni_device.h	/^      std::map<CallbackHandle, ActualDepthImageCallbackFunction> depth_callback_;$/;"	m	class:openni_wrapper::OpenNIDevice
depth_callback_handle	include/pcl/io/oni_grabber.h	/^      openni_wrapper::OpenNIDevice::CallbackHandle depth_callback_handle;$/;"	m	class:pcl::ONIGrabber
depth_callback_handle	include/pcl/io/openni_grabber.h	/^      openni_wrapper::OpenNIDevice::CallbackHandle depth_callback_handle;$/;"	m	class:pcl::OpenNIGrabber
depth_callback_handle_	include/pcl/io/openni2_grabber.h	/^        pcl::io::openni2::OpenNI2Device::CallbackHandle depth_callback_handle_;$/;"	m	class:pcl::io::OpenNI2Grabber
depth_callback_handle_	include/pcl/io/openni_camera/openni_device.h	/^      XnCallbackHandle depth_callback_handle_;$/;"	m	class:openni_wrapper::OpenNIDevice
depth_callback_handle_counter_	include/pcl/io/openni_camera/openni_device.h	/^      OpenNIDevice::CallbackHandle depth_callback_handle_counter_;$/;"	m	class:openni_wrapper::OpenNIDevice
depth_condition_	include/pcl/io/openni_camera/openni_device.h	/^      boost::condition_variable depth_condition_;$/;"	m	class:openni_wrapper::OpenNIDevice
depth_focal_length_SXGA_	include/pcl/io/openni_camera/openni_device.h	/^      float depth_focal_length_SXGA_;$/;"	m	class:openni_wrapper::OpenNIDevice
depth_focal_length_x_	include/pcl/io/openni_grabber.h	/^      double depth_focal_length_x_;$/;"	m	class:pcl::OpenNIGrabber
depth_focal_length_y_	include/pcl/io/openni_grabber.h	/^      double depth_focal_length_y_;$/;"	m	class:pcl::OpenNIGrabber
depth_frame_id_	include/pcl/io/oni_grabber.h	/^      std::string depth_frame_id_;$/;"	m	class:pcl::ONIGrabber
depth_frame_id_	include/pcl/io/openni2_grabber.h	/^        std::string depth_frame_id_;$/;"	m	class:pcl::io::OpenNI2Grabber
depth_frame_id_	include/pcl/io/openni_grabber.h	/^      std::string depth_frame_id_;$/;"	m	class:pcl::OpenNIGrabber
depth_frame_listener	include/pcl/io/openni2/openni2_device.h	/^          boost::shared_ptr<OpenNI2FrameListener> depth_frame_listener;$/;"	m	class:pcl::io::openni2::OpenNI2Device
depth_generator_	include/pcl/io/openni_camera/openni_device.h	/^      xn::DepthGenerator depth_generator_;$/;"	m	class:openni_wrapper::OpenNIDevice
depth_height	include/pcl/io/real_sense_grabber.h	/^        unsigned int depth_height;$/;"	m	struct:pcl::RealSenseGrabber::Mode
depth_height_	include/pcl/io/oni_grabber.h	/^      unsigned depth_height_;$/;"	m	class:pcl::ONIGrabber
depth_height_	include/pcl/io/openni2_grabber.h	/^        unsigned depth_height_;$/;"	m	class:pcl::io::OpenNI2Grabber
depth_height_	include/pcl/io/openni_grabber.h	/^      unsigned depth_height_;$/;"	m	class:pcl::OpenNIGrabber
depth_image_signal_	include/pcl/io/oni_grabber.h	/^      boost::signals2::signal<sig_cb_openni_depth_image >*      depth_image_signal_;$/;"	m	class:pcl::ONIGrabber
depth_image_signal_	include/pcl/io/openni2_grabber.h	/^        boost::signals2::signal<sig_cb_openni_depth_image>* depth_image_signal_;$/;"	m	class:pcl::io::OpenNI2Grabber
depth_image_signal_	include/pcl/io/openni_grabber.h	/^      boost::signals2::signal<sig_cb_openni_depth_image>* depth_image_signal_;$/;"	m	class:pcl::OpenNIGrabber
depth_image_signal_	include/pcl/io/pcd_grabber.h	/^      boost::signals2::signal<void (const boost::shared_ptr<openni_wrapper::DepthImage>&)>*     depth_image_signal_;$/;"	m	class:pcl::PCDGrabber
depth_md_	include/pcl/io/openni_camera/openni_depth_image.h	/^      boost::shared_ptr<xn::DepthMetaData> depth_md_;$/;"	m	class:openni_wrapper::DepthImage
depth_mutex_	include/pcl/io/openni_camera/openni_device.h	/^      mutable boost::mutex depth_mutex_;$/;"	m	class:openni_wrapper::OpenNIDevice
depth_node	include/pcl/io/depth_sense/depth_sense_device_manager.h	/^            DepthSense::DepthNode depth_node;$/;"	m	struct:pcl::io::depth_sense::DepthSenseDeviceManager::CapturedDevice
depth_node	include/pcl/io/openni_camera/openni_driver.h	/^      boost::shared_ptr<xn::NodeInfo> depth_node;$/;"	m	struct:openni_wrapper::OpenNIDriver::DeviceContext
depth_parameters_	include/pcl/io/openni2_grabber.h	/^        CameraParameters depth_parameters_;$/;"	m	class:pcl::io::OpenNI2Grabber
depth_principal_point_x_	include/pcl/io/openni_grabber.h	/^      double depth_principal_point_x_;$/;"	m	class:pcl::OpenNIGrabber
depth_principal_point_y_	include/pcl/io/openni_grabber.h	/^      double depth_principal_point_y_;$/;"	m	class:pcl::OpenNIGrabber
depth_required_	include/pcl/io/openni2_grabber.h	/^        bool depth_required_;$/;"	m	class:pcl::io::OpenNI2Grabber
depth_required_	include/pcl/io/openni_grabber.h	/^      bool depth_required_;$/;"	m	class:pcl::OpenNIGrabber
depth_resize_buffer_	include/pcl/io/openni2_grabber.h	/^        std::vector<uint16_t> depth_resize_buffer_;$/;"	m	class:pcl::io::OpenNI2Grabber
depth_sense	include/pcl/io/depth_sense/depth_sense_device_manager.h	/^    namespace depth_sense$/;"	n	namespace:pcl::io
depth_sense	include/pcl/io/depth_sense/depth_sense_grabber_impl.h	/^    namespace depth_sense$/;"	n	namespace:pcl::io
depth_sense	include/pcl/io/depth_sense_grabber.h	/^  namespace io { namespace depth_sense { struct DepthSenseGrabberImpl; } }$/;"	n	namespace:pcl::io
depth_sense_thread_	include/pcl/io/depth_sense/depth_sense_device_manager.h	/^          boost::thread depth_sense_thread_;$/;"	m	class:pcl::io::depth_sense::DepthSenseDeviceManager
depth_stream_running_	include/pcl/io/openni_camera/openni_device_oni.h	/^    bool depth_stream_running_;$/;"	m	class:openni_wrapper::DeviceONI
depth_thread_	include/pcl/io/openni_camera/openni_device.h	/^      boost::thread depth_thread_;$/;"	m	class:openni_wrapper::OpenNIDevice
depth_video_modes_	include/pcl/io/openni2/openni2_device.h	/^          mutable std::vector<OpenNI2VideoMode> depth_video_modes_;$/;"	m	class:pcl::io::openni2::OpenNI2Device
depth_video_started_	include/pcl/io/openni2/openni2_device.h	/^          bool depth_video_started_;$/;"	m	class:pcl::io::openni2::OpenNI2Device
depth_video_stream_	include/pcl/io/openni2/openni2_device.h	/^          mutable boost::shared_ptr<openni::VideoStream> depth_video_stream_;$/;"	m	class:pcl::io::openni2::OpenNI2Device
depth_width	include/pcl/io/real_sense_grabber.h	/^        unsigned int depth_width;$/;"	m	struct:pcl::RealSenseGrabber::Mode
depth_width_	include/pcl/io/oni_grabber.h	/^      unsigned depth_width_;$/;"	m	class:pcl::ONIGrabber
depth_width_	include/pcl/io/openni2_grabber.h	/^        unsigned depth_width_;$/;"	m	class:pcl::io::OpenNI2Grabber
depth_width_	include/pcl/io/openni_grabber.h	/^      unsigned depth_width_;$/;"	m	class:pcl::OpenNIGrabber
dequeue	include/pcl/io/impl/synchronized_queue.hpp	/^      dequeue (T& result)$/;"	f	class:pcl::SynchronizedQueue
descriptor	include/pcl/impl/point_types.hpp	/^    float descriptor[1344];$/;"	m	struct:pcl::SHOT1344
descriptor	include/pcl/impl/point_types.hpp	/^    float descriptor[1960];$/;"	m	struct:pcl::UniqueShapeContext1960
descriptor	include/pcl/impl/point_types.hpp	/^    float descriptor[1980];$/;"	m	struct:pcl::ShapeContext1980
descriptor	include/pcl/impl/point_types.hpp	/^    float descriptor[352];$/;"	m	struct:pcl::SHOT352
descriptor	include/pcl/impl/point_types.hpp	/^    float descriptor[36];$/;"	m	struct:pcl::Narf36
descriptor	include/pcl/impl/point_types.hpp	/^    unsigned char descriptor[64];$/;"	m	struct:pcl::BRISKSignature512
descriptorSize	include/pcl/impl/point_types.hpp	/^    static int descriptorSize () { return 125; }$/;"	f	struct:pcl::PFHSignature125
descriptorSize	include/pcl/impl/point_types.hpp	/^    static int descriptorSize () { return 1344; }$/;"	f	struct:pcl::SHOT1344
descriptorSize	include/pcl/impl/point_types.hpp	/^    static int descriptorSize () { return 16; }$/;"	f	struct:pcl::GFPFHSignature16
descriptorSize	include/pcl/impl/point_types.hpp	/^    static int descriptorSize () { return 1960; }$/;"	f	struct:pcl::UniqueShapeContext1960
descriptorSize	include/pcl/impl/point_types.hpp	/^    static int descriptorSize () { return 1980; }$/;"	f	struct:pcl::ShapeContext1980
descriptorSize	include/pcl/impl/point_types.hpp	/^    static int descriptorSize () { return 21; }$/;"	f	struct:pcl::GRSDSignature21
descriptorSize	include/pcl/impl/point_types.hpp	/^    static int descriptorSize () { return 250; }$/;"	f	struct:pcl::PFHRGBSignature250
descriptorSize	include/pcl/impl/point_types.hpp	/^    static int descriptorSize () { return 308; }$/;"	f	struct:pcl::VFHSignature308
descriptorSize	include/pcl/impl/point_types.hpp	/^    static int descriptorSize () { return 33; }$/;"	f	struct:pcl::FPFHSignature33
descriptorSize	include/pcl/impl/point_types.hpp	/^    static int descriptorSize () { return 352; }$/;"	f	struct:pcl::SHOT352
descriptorSize	include/pcl/impl/point_types.hpp	/^    static int descriptorSize () { return 36; }$/;"	f	struct:pcl::Narf36
descriptorSize	include/pcl/impl/point_types.hpp	/^    static int descriptorSize () { return 640; }$/;"	f	struct:pcl::ESFSignature640
descriptorSize	include/pcl/impl/point_types.hpp	/^    static int descriptorSize () { return 64; }$/;"	f	struct:pcl::BRISKSignature512
descriptorSize	include/pcl/impl/point_types.hpp	/^    static int descriptorSize () { return N; }$/;"	f	struct:pcl::Histogram
detail	include/pcl/common/impl/accumulators.hpp	/^  namespace detail$/;"	n	namespace:pcl
detail	include/pcl/common/impl/copy_point.hpp	/^  namespace detail$/;"	n	namespace:pcl
detail	include/pcl/conversions.h	/^  namespace detail$/;"	n	namespace:pcl
detail	include/pcl/point_cloud.h	/^  namespace detail$/;"	n	namespace:pcl
detailedMessage	include/pcl/exceptions.h	/^      detailedMessage () const throw ()$/;"	f	class:pcl::PCLException
determinant	include/tf/LinearMath/Matrix3x3.h	/^Matrix3x3::determinant() const$/;"	f	class:tf::Matrix3x3
determinant3x3Matrix	include/pcl/common/impl/eigen.hpp	/^pcl::determinant3x3Matrix (const Matrix& matrix)$/;"	f	class:pcl
dev_major	include/pcl/io/tar.h	/^      char dev_major[8];$/;"	m	struct:pcl::io::TARHeader
dev_minor	include/pcl/io/tar.h	/^      char dev_minor[8];$/;"	m	struct:pcl::io::TARHeader
device	include/pcl/io/openni_camera/openni_driver.h	/^      boost::weak_ptr<OpenNIDevice> device;$/;"	m	struct:openni_wrapper::OpenNIDriver::DeviceContext
device_	include/pcl/io/oni_grabber.h	/^      boost::shared_ptr<openni_wrapper::DeviceONI> device_;$/;"	m	class:pcl::ONIGrabber
device_	include/pcl/io/openni2_grabber.h	/^        boost::shared_ptr<pcl::io::openni2::OpenNI2Device> device_;$/;"	m	class:pcl::io::OpenNI2Grabber
device_	include/pcl/io/openni_grabber.h	/^      boost::shared_ptr<openni_wrapper::OpenNIDevice> device_;$/;"	m	class:pcl::OpenNIGrabber
device_	include/pcl/io/real_sense/real_sense_device_manager.h	/^          boost::shared_ptr<PXCCapture::Device> device_;$/;"	m	class:pcl::io::real_sense::RealSenseDevice
device_	include/pcl/io/real_sense_grabber.h	/^      boost::shared_ptr<pcl::io::real_sense::RealSenseDevice> device_;$/;"	m	class:pcl::RealSenseGrabber
device_context_	include/pcl/io/openni_camera/openni_driver.h	/^    mutable std::vector<DeviceContext> device_context_;$/;"	m	class:openni_wrapper::OpenNIDriver
device_handle_	include/pcl/io/dinast_grabber.h	/^      struct libusb_device_handle *device_handle_;$/;"	m	class:pcl::DinastGrabber	typeref:struct:pcl::DinastGrabber::libusb_device_handle
device_id_	include/pcl/io/depth_sense/depth_sense_grabber_impl.h	/^        std::string device_id_;$/;"	m	struct:pcl::io::depth_sense::DepthSenseGrabberImpl
device_id_	include/pcl/io/real_sense/real_sense_device_manager.h	/^          std::string device_id_;$/;"	m	class:pcl::io::real_sense::RealSenseDevice
device_info_	include/pcl/io/openni2/openni2_device.h	/^          boost::shared_ptr<openni::DeviceInfo> device_info_;$/;"	m	class:pcl::io::openni2::OpenNI2Device
device_list_	include/pcl/io/real_sense/real_sense_device_manager.h	/^          std::vector<DeviceInfo> device_list_;$/;"	m	class:pcl::io::real_sense::RealSenseDeviceManager
device_listener_	include/pcl/io/openni2/openni2_device_manager.h	/^        boost::shared_ptr<OpenNI2DeviceListener> device_listener_;$/;"	m	class:pcl::io::openni2::OpenNI2DeviceManager
device_max_shift_	include/pcl/io/openni_camera/openni_device.h	/^        XnUInt32 device_max_shift_;$/;"	m	struct:openni_wrapper::OpenNIDevice::ShiftConversion
device_node	include/pcl/io/openni_camera/openni_driver.h	/^      xn::NodeInfo device_node;$/;"	m	struct:openni_wrapper::OpenNIDriver::DeviceContext
device_node_info_	include/pcl/io/openni_camera/openni_device.h	/^      xn::NodeInfo device_node_info_;$/;"	m	class:openni_wrapper::OpenNIDevice
device_open_	include/pcl/io/ensenso_grabber.h	/^      bool device_open_;$/;"	m	class:pcl::EnsensoGrabber
device_ptr	include/pcl/io/real_sense/real_sense_device_manager.h	/^            boost::weak_ptr<RealSenseDevice> device_ptr;$/;"	m	struct:pcl::io::real_sense::RealSenseDeviceManager::DeviceInfo
diagonalize	include/tf/LinearMath/Matrix3x3.h	/^	void diagonalize(Matrix3x3& rot, tfScalar threshold, int maxSteps)$/;"	f	class:tf::Matrix3x3
didx	include/pcl/io/real_sense/real_sense_device_manager.h	/^            pxcI32 didx;$/;"	m	struct:pcl::io::real_sense::RealSenseDeviceManager::DeviceInfo
disconnect_all_slots	include/pcl/io/grabber.h	/^  Grabber::disconnect_all_slots ()$/;"	f	class:pcl::Grabber
dist_max_2d_	include/pcl/io/dinast_grabber.h	/^      double dist_max_2d_;$/;"	m	class:pcl::DinastGrabber
distance	include/costmap_2d/costmap_math.h	/^inline double distance(double x0, double y0, double x1, double y1)$/;"	f
distance	include/pcl/common/geometry.h	/^    distance (const PointT& p1, const PointT& p2)$/;"	f	namespace:pcl::geometry
distance	include/pcl/correspondence.h	/^      float distance;$/;"	m	union:pcl::Correspondence::__anon1
distance	include/pcl/io/hdl_grabber.h	/^          unsigned short distance;$/;"	m	struct:pcl::HDLGrabber::HDLLaserReturn
distance	include/pcl/range_image/impl/range_image.hpp	/^    float distance;$/;"	m	struct:pcl::__anon2::NeighborWithDistance
distance	include/tf/LinearMath/Vector3.h	/^TFSIMD_FORCE_INLINE tfScalar Vector3::distance(const Vector3& v) const$/;"	f	class:tf::Vector3
distance2	include/tf/LinearMath/Vector3.h	/^TFSIMD_FORCE_INLINE tfScalar Vector3::distance2(const Vector3& v) const$/;"	f	class:tf::Vector3
distanceCorrection	include/pcl/io/hdl_grabber.h	/^          double distanceCorrection;$/;"	m	struct:pcl::HDLGrabber::HDLLaserCorrection
distanceLookup	include/costmap_2d/inflation_layer.h	/^  inline double distanceLookup(int mx, int my, int src_x, int src_y)$/;"	f	class:costmap_2d::InflationLayer
distanceToLine	src/costmap_math.cpp	/^double distanceToLine(double pX, double pY, double x0, double y0, double x1, double y1)$/;"	f
distance_	include/costmap_2d/inflation_layer.h	/^  double distance_;$/;"	m	class:costmap_2d::CellData
distribution_	include/pcl/common/random.h	/^        DistributionType distribution_;$/;"	m	class:pcl::common::NormalGenerator
distribution_	include/pcl/common/random.h	/^        DistributionType distribution_;$/;"	m	class:pcl::common::UniformGenerator
divscalar	include/pcl/register_point_struct.h	/^    divscalar (T1 &p, const T2 &scalar)$/;"	f	namespace:pcl::traits
doEndActions	include/pcl/io/impl/synchronized_queue.hpp	/^      doEndActions ()$/;"	f	class:pcl::SynchronizedQueue
doPCA	include/pcl/common/impl/vector_average.hpp	/^  inline void VectorAverage<double, 3>::doPCA(Eigen::Matrix<double, 3, 1>& eigen_values) const$/;"	f	class:pcl::VectorAverage
doPCA	include/pcl/common/impl/vector_average.hpp	/^  inline void VectorAverage<double, 3>::doPCA(Eigen::Matrix<double, 3, 1>& eigen_values, Eigen::Matrix<double, 3, 1>& eigen_vector1,$/;"	f	class:pcl::VectorAverage
doPCA	include/pcl/common/impl/vector_average.hpp	/^  inline void VectorAverage<float, 3>::doPCA(Eigen::Matrix<float, 3, 1>& eigen_values) const$/;"	f	class:pcl::VectorAverage
doPCA	include/pcl/common/impl/vector_average.hpp	/^  inline void VectorAverage<float, 3>::doPCA(Eigen::Matrix<float, 3, 1>& eigen_values, Eigen::Matrix<float, 3, 1>& eigen_vector1,$/;"	f	class:pcl::VectorAverage
doPCA	include/pcl/common/impl/vector_average.hpp	/^  inline void VectorAverage<real, dimension>::doPCA(Eigen::Matrix<real, dimension, 1>& eigen_values) const$/;"	f	class:pcl::VectorAverage
doPCA	include/pcl/common/impl/vector_average.hpp	/^  inline void VectorAverage<real, dimension>::doPCA(Eigen::Matrix<real, dimension, 1>& eigen_values, Eigen::Matrix<real, dimension, 1>& eigen_vector1,$/;"	f	class:pcl::VectorAverage
doZBuffer	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::doZBuffer (const PointCloudType& point_cloud, float noise_level, float min_range, int& top, int& right, int& bottom, int& left)$/;"	f	class:pcl::RangeImage
do_resize_	include/pcl/io/ply_io.h	/^      bool do_resize_;$/;"	m	class:pcl::PLYReader
dot	include/tf/LinearMath/Quaternion.h	/^	tfScalar dot(const Quaternion& q) const$/;"	f	class:tf::Quaternion
dot	include/tf/LinearMath/Quaternion.h	/^dot(const Quaternion& q1, const Quaternion& q2) $/;"	f	namespace:tf
dot	include/tf/LinearMath/Vector3.h	/^	TFSIMD_FORCE_INLINE tfScalar dot(const Vector3& v) const$/;"	f	class:tf::Vector3
duplicateColumns	include/pcl/common/impl/spring.hpp	/^pcl::common::duplicateColumns (const PointCloud<PointT>& input, PointCloud<PointT>& output,$/;"	f	class:pcl::common
duplicateRows	include/pcl/common/impl/spring.hpp	/^pcl::common::duplicateRows (const PointCloud<PointT>& input, PointCloud<PointT>& output,$/;"	f	class:pcl::common
eigen22	include/pcl/common/impl/eigen.hpp	/^pcl::eigen22 (const Matrix& mat, Matrix& eigenvectors, Vector& eigenvalues)$/;"	f	class:pcl
eigen22	include/pcl/common/impl/eigen.hpp	/^pcl::eigen22 (const Matrix& mat, typename Matrix::Scalar& eigenvalue, Vector& eigenvector)$/;"	f	class:pcl
eigen33	include/pcl/common/impl/eigen.hpp	/^pcl::eigen33 (const Matrix& mat, Matrix& evecs, Vector& evals)$/;"	f	class:pcl
eigen33	include/pcl/common/impl/eigen.hpp	/^pcl::eigen33 (const Matrix& mat, Vector& evals)$/;"	f	class:pcl
eigen33	include/pcl/common/impl/eigen.hpp	/^pcl::eigen33 (const Matrix& mat, typename Matrix::Scalar& eigenvalue, Vector& eigenvector)$/;"	f	class:pcl
eigenvalues_	include/pcl/common/pca.h	/^      Eigen::Vector3f eigenvalues_;$/;"	m	class:pcl::PCA
eigenvectors_	include/pcl/common/pca.h	/^      Eigen::Matrix3f eigenvectors_;$/;"	m	class:pcl::PCA
element	include/pcl/io/ply/ply_parser.h	/^            element (const std::string& name, $/;"	f	struct:pcl::io::ply::ply_parser::element
element	include/pcl/io/ply/ply_parser.h	/^          struct element$/;"	s	class:pcl::io::ply::ply_parser
element_callback	include/pcl/io/ply/ply_parser.h	/^            element_callback_type element_callback;$/;"	m	struct:pcl::io::ply::ply_parser::list_property
element_callback_type	include/pcl/io/ply/ply_parser.h	/^            typedef typename list_property_element_callback_type<size_type, scalar_type>::type element_callback_type;$/;"	t	struct:pcl::io::ply::ply_parser::list_property
element_callbacks_type	include/pcl/io/ply/ply_parser.h	/^          typedef boost::tuple<begin_element_callback_type, end_element_callback_type> element_callbacks_type;$/;"	t	class:pcl::io::ply::ply_parser
element_definition_callback	include/pcl/io/ply/ply_parser.h	/^inline void pcl::io::ply::ply_parser::element_definition_callback (const element_definition_callback_type& element_definition_callback)$/;"	f	class:pcl::io::ply::ply_parser
element_definition_callback_type	include/pcl/io/ply/ply_parser.h	/^          typedef boost::function<element_callbacks_type (const std::string&, std::size_t)> element_definition_callback_type;$/;"	t	class:pcl::io::ply::ply_parser
element_definition_callbacks_	include/pcl/io/ply/ply_parser.h	/^          element_definition_callback_type element_definition_callbacks_;$/;"	m	class:pcl::io::ply::ply_parser
emitter_dcmos_distace_	include/pcl/io/openni_camera/openni_device.h	/^        XnFloat emitter_dcmos_distace_;$/;"	m	struct:openni_wrapper::OpenNIDevice::ShiftConversion
empty	include/pcl/point_cloud.h	/^      inline bool empty () const { return points.empty (); }$/;"	f	class:pcl::PointCloud
enabled_	include/costmap_2d/layer.h	/^  bool enabled_;  \/\/\/< Currently this var is managed by subclasses. TODO: make this managed by this class and\/or container class.$/;"	m	class:costmap_2d::Layer
encoding	include/pcl/PCLImage.h	/^    std::string encoding;$/;"	m	struct:pcl::PCLImage
end	include/pcl/point_cloud.h	/^      inline const_iterator end () const  { return (points.end ()); }$/;"	f	class:pcl::PointCloud
end	include/pcl/point_cloud.h	/^      inline iterator end ()   { return (points.end ()); }$/;"	f	class:pcl::PointCloud
end_callback	include/pcl/io/ply/ply_parser.h	/^            end_callback_type end_callback;$/;"	m	struct:pcl::io::ply::ply_parser::list_property
end_callback_type	include/pcl/io/ply/ply_parser.h	/^            typedef typename list_property_end_callback_type<size_type, scalar_type>::type end_callback_type;$/;"	t	struct:pcl::io::ply::ply_parser::list_property
end_element_callback	include/pcl/io/ply/ply_parser.h	/^            end_element_callback_type end_element_callback;$/;"	m	struct:pcl::io::ply::ply_parser::element
end_element_callback_type	include/pcl/io/ply/ply_parser.h	/^          typedef boost::function<void ()> end_element_callback_type;$/;"	t	class:pcl::io::ply::ply_parser
end_header_callback	include/pcl/io/ply/ply_parser.h	/^inline void pcl::io::ply::ply_parser::end_header_callback (const end_header_callback_type& end_header_callback)$/;"	f	class:pcl::io::ply::ply_parser
end_header_callback_	include/pcl/io/ply/ply_parser.h	/^          end_header_callback_type end_header_callback_;$/;"	m	class:pcl::io::ply::ply_parser
end_header_callback_type	include/pcl/io/ply/ply_parser.h	/^          typedef boost::function<bool ()> end_header_callback_type;$/;"	t	class:pcl::io::ply::ply_parser
enqueue	include/pcl/io/impl/synchronized_queue.hpp	/^      enqueue (const T& data)$/;"	f	class:pcl::SynchronizedQueue
enqueue	src/inflation_layer.cpp	/^inline void InflationLayer::enqueue(unsigned int index, unsigned int mx, unsigned int my,$/;"	f	class:costmap_2d::InflationLayer
enqueue_data_	include/pcl/io/impl/synchronized_queue.hpp	/^      bool enqueue_data_;$/;"	m	class:pcl::SynchronizedQueue
equal	include/pcl/common/utils.h	/^    equal (T val1, T val2, T eps = std::numeric_limits<T>::min ())$/;"	f	namespace:pcl::utils
erase	include/pcl/point_cloud.h	/^      erase (iterator first, iterator last)$/;"	f	class:pcl::PointCloud
erase	include/pcl/point_cloud.h	/^      erase (iterator position)$/;"	f	class:pcl::PointCloud
errorCallback	include/pcl/io/ply_io.h	/^      errorCallback (const std::string& filename, std::size_t line_number, const std::string& message)$/;"	f	class:pcl::PLYReader
error_callback	include/pcl/io/ply/ply_parser.h	/^inline void pcl::io::ply::ply_parser::error_callback (const error_callback_type& error_callback)$/;"	f	class:pcl::io::ply::ply_parser
error_callback_	include/pcl/io/ply/ply_parser.h	/^          error_callback_type error_callback_;$/;"	m	class:pcl::io::ply::ply_parser
error_callback_type	include/pcl/io/ply/ply_parser.h	/^          typedef boost::function<void (std::size_t, const std::string&)> error_callback_type;$/;"	t	class:pcl::io::ply::ply_parser
estimateProjectionMatrix	include/pcl/common/impl/projection_matrix.hpp	/^pcl::estimateProjectionMatrix ($/;"	f	class:pcl
euclideanDistance	include/pcl/common/distances.h	/^  euclideanDistance (const PointType1& p1, const PointType2& p2)$/;"	f	namespace:pcl
event	include/pcl/common/time.h	/^      void event ()$/;"	f	class:pcl::EventFrequency
event_time_queue_	include/pcl/common/time.h	/^      std::queue<double> event_time_queue_;$/;"	m	class:pcl::EventFrequency
execute	include/pcl/for_each_type.h	/^    static void execute (F f)$/;"	f	struct:pcl::for_each_type_impl
execute	include/pcl/for_each_type.h	/^    static void execute (F) {}$/;"	f	struct:pcl::for_each_type_impl
exists_	include/pcl/point_traits.h	/^      bool &exists_;$/;"	m	struct:pcl::CopyIfFieldExists
exists_tmp_	include/pcl/point_traits.h	/^      bool exists_tmp_;$/;"	m	struct:pcl::CopyIfFieldExists
expandColumns	include/pcl/common/impl/spring.hpp	/^pcl::common::expandColumns (const PointCloud<PointT>& input, PointCloud<PointT>& output, $/;"	f	class:pcl::common
expandRows	include/pcl/common/impl/spring.hpp	/^pcl::common::expandRows (const PointCloud<PointT>& input, PointCloud<PointT>& output,$/;"	f	class:pcl::common
expected_update_rate_	include/costmap_2d/observation_buffer.h	/^  const ros::Duration expected_update_rate_;$/;"	m	class:costmap_2d::ObservationBuffer
extension_	include/pcl/io/ascii_io.h	/^      std::string extension_;$/;"	m	class:pcl::ASCIIReader
extra_max_x_	include/costmap_2d/costmap_layer.h	/^  double extra_min_x_, extra_max_x_, extra_min_y_, extra_max_y_;$/;"	m	class:costmap_2d::CostmapLayer
extra_max_y_	include/costmap_2d/costmap_layer.h	/^  double extra_min_x_, extra_max_x_, extra_min_y_, extra_max_y_;$/;"	m	class:costmap_2d::CostmapLayer
extra_min_x_	include/costmap_2d/costmap_layer.h	/^  double extra_min_x_, extra_max_x_, extra_min_y_, extra_max_y_;$/;"	m	class:costmap_2d::CostmapLayer
extra_min_y_	include/costmap_2d/costmap_layer.h	/^  double extra_min_x_, extra_max_x_, extra_min_y_, extra_max_y_;$/;"	m	class:costmap_2d::CostmapLayer
extract	include/pcl/io/impl/point_cloud_image_extractors.hpp	/^pcl::io::PointCloudImageExtractor<PointT>::extract (const PointCloud& cloud, pcl::PCLImage& img) const$/;"	f	class:pcl::io::PointCloudImageExtractor
extractImpl	include/pcl/io/impl/point_cloud_image_extractors.hpp	/^pcl::io::PointCloudImageExtractorFromLabelField<PointT>::extractImpl (const PointCloud& cloud, pcl::PCLImage& img) const$/;"	f	class:pcl::io::PointCloudImageExtractorFromLabelField
extractImpl	include/pcl/io/impl/point_cloud_image_extractors.hpp	/^pcl::io::PointCloudImageExtractorFromNormalField<PointT>::extractImpl (const PointCloud& cloud, pcl::PCLImage& img) const$/;"	f	class:pcl::io::PointCloudImageExtractorFromNormalField
extractImpl	include/pcl/io/impl/point_cloud_image_extractors.hpp	/^pcl::io::PointCloudImageExtractorFromRGBField<PointT>::extractImpl (const PointCloud& cloud, pcl::PCLImage& img) const$/;"	f	class:pcl::io::PointCloudImageExtractorFromRGBField
extractImpl	include/pcl/io/impl/point_cloud_image_extractors.hpp	/^pcl::io::PointCloudImageExtractorWithScaling<PointT>::extractImpl (const PointCloud& cloud, pcl::PCLImage& img) const$/;"	f	class:pcl::io::PointCloudImageExtractorWithScaling
f1	include/pcl/impl/point_types.hpp	/^    float f1, f2, f3, f4, f5, f6, f7, f8, f9, f10;$/;"	m	struct:pcl::CPPFSignature
f1	include/pcl/impl/point_types.hpp	/^    float f1, f2, f3, f4;$/;"	m	struct:pcl::PPFRGBSignature
f1	include/pcl/impl/point_types.hpp	/^    float f1, f2, f3, f4;$/;"	m	struct:pcl::PPFSignature
f10	include/pcl/impl/point_types.hpp	/^    float f1, f2, f3, f4, f5, f6, f7, f8, f9, f10;$/;"	m	struct:pcl::CPPFSignature
f2	include/pcl/impl/point_types.hpp	/^    float f1, f2, f3, f4, f5, f6, f7, f8, f9, f10;$/;"	m	struct:pcl::CPPFSignature
f2	include/pcl/impl/point_types.hpp	/^    float f1, f2, f3, f4;$/;"	m	struct:pcl::PPFRGBSignature
f2	include/pcl/impl/point_types.hpp	/^    float f1, f2, f3, f4;$/;"	m	struct:pcl::PPFSignature
f3	include/pcl/impl/point_types.hpp	/^    float f1, f2, f3, f4, f5, f6, f7, f8, f9, f10;$/;"	m	struct:pcl::CPPFSignature
f3	include/pcl/impl/point_types.hpp	/^    float f1, f2, f3, f4;$/;"	m	struct:pcl::PPFRGBSignature
f3	include/pcl/impl/point_types.hpp	/^    float f1, f2, f3, f4;$/;"	m	struct:pcl::PPFSignature
f4	include/pcl/impl/point_types.hpp	/^    float f1, f2, f3, f4, f5, f6, f7, f8, f9, f10;$/;"	m	struct:pcl::CPPFSignature
f4	include/pcl/impl/point_types.hpp	/^    float f1, f2, f3, f4;$/;"	m	struct:pcl::PPFRGBSignature
f4	include/pcl/impl/point_types.hpp	/^    float f1, f2, f3, f4;$/;"	m	struct:pcl::PPFSignature
f5	include/pcl/impl/point_types.hpp	/^    float f1, f2, f3, f4, f5, f6, f7, f8, f9, f10;$/;"	m	struct:pcl::CPPFSignature
f6	include/pcl/impl/point_types.hpp	/^    float f1, f2, f3, f4, f5, f6, f7, f8, f9, f10;$/;"	m	struct:pcl::CPPFSignature
f7	include/pcl/impl/point_types.hpp	/^    float f1, f2, f3, f4, f5, f6, f7, f8, f9, f10;$/;"	m	struct:pcl::CPPFSignature
f8	include/pcl/impl/point_types.hpp	/^    float f1, f2, f3, f4, f5, f6, f7, f8, f9, f10;$/;"	m	struct:pcl::CPPFSignature
f9	include/pcl/impl/point_types.hpp	/^    float f1, f2, f3, f4, f5, f6, f7, f8, f9, f10;$/;"	m	struct:pcl::CPPFSignature
f_idx_	include/pcl/common/centroid.h	/^      int f_idx_;$/;"	m	struct:pcl::NdCentroidFunctor
f_idx_	include/pcl/point_cloud.h	/^      int f_idx_;$/;"	m	struct:pcl::NdCopyEigenPointFunctor
f_idx_	include/pcl/point_cloud.h	/^      int f_idx_;$/;"	m	struct:pcl::NdCopyPointEigenFunctor
f_idx_	include/pcl/point_representation.h	/^      int f_idx_;$/;"	m	struct:pcl::DefaultFeatureRepresentation::NdCopyPointFunctor
factor_	include/pcl/common/piecewise_linear_function.h	/^      float factor_;$/;"	m	class:pcl::PiecewiseLinearFunction
factors	include/pcl/common/fft/_kiss_fft_guts.h	/^    int factors[2*MAXFACTORS];$/;"	m	struct:kiss_fft_state
fake_indices_	include/pcl/pcl_base.h	/^      bool fake_indices_;$/;"	m	class:pcl::PCLBase
farthest	include/tf/LinearMath/Quaternion.h	/^	TFSIMD_FORCE_INLINE Quaternion farthest( const Quaternion& qd) const $/;"	f	class:tf::Quaternion
fieldList	include/pcl/point_traits.h	/^    struct fieldList : fieldList<typename POD<PointT>::type>$/;"	s	namespace:pcl::traits
fieldOrdering	include/pcl/conversions.h	/^    fieldOrdering (const FieldMapping& a, const FieldMapping& b)$/;"	f	namespace:pcl::detail
field_name_	include/pcl/io/point_cloud_image_extractors.h	/^        std::string field_name_;$/;"	m	class:pcl::io::PointCloudImageExtractorWithScaling
field_sizes_	include/pcl/pcl_base.h	/^      std::vector<int> field_sizes_;$/;"	m	class:pcl::PCLBase
fields	include/pcl/PCLPointCloud2.h	/^    std::vector< ::pcl::PCLPointField>  fields;$/;"	m	struct:pcl::PCLPointCloud2
fields	include/pcl/point_traits.h	/^  namespace fields$/;"	n	namespace:pcl
fields_	include/pcl/conversions.h	/^      const std::vector<pcl::PCLPointField>& fields_;$/;"	m	struct:pcl::detail::FieldMapper
fields_	include/pcl/conversions.h	/^      std::vector<pcl::PCLPointField>& fields_;$/;"	m	struct:pcl::detail::FieldAdder
fields_	include/pcl/io/ascii_io.h	/^      std::vector<pcl::PCLPointField> fields_;$/;"	m	class:pcl::ASCIIReader
file_format_	include/pcl/io/davidsdk_grabber.h	/^      std::string file_format_;$/;"	m	class:pcl::DavidSDKGrabber
file_mode	include/pcl/io/tar.h	/^      char file_mode[8];$/;"	m	struct:pcl::io::TARHeader
file_name	include/pcl/io/tar.h	/^      char file_name[100];$/;"	m	struct:pcl::io::TARHeader
file_name_	include/pcl/exceptions.h	/^      const char* file_name_;$/;"	m	class:pcl::PCLException
file_name_	include/pcl/io/io_exception.h	/^        std::string file_name_;$/;"	m	class:pcl::io::IOException
file_name_	include/pcl/io/openni_camera/openni_exception.h	/^    std::string file_name_;$/;"	m	class:openni_wrapper::OpenNIException
file_name_prefix	include/pcl/io/tar.h	/^      char file_name_prefix[155];$/;"	m	struct:pcl::io::TARHeader
file_name_signal_	include/pcl/io/pcd_grabber.h	/^      boost::signals2::signal<void (const std::string&)>* file_name_signal_;$/;"	m	class:pcl::PCDGrabber
file_size	include/pcl/io/tar.h	/^      char file_size[12];$/;"	m	struct:pcl::io::TARHeader
file_type	include/pcl/io/tar.h	/^      char file_type[1];$/;"	m	struct:pcl::io::TARHeader
filename	include/map_msgs/SaveMapRequest.h	/^  _filename_type filename;$/;"	m	struct:map_msgs::SaveMapRequest_
fill	include/pcl/common/impl/generate.hpp	/^pcl::common::CloudGenerator<PointT, GeneratorT>::fill (int width, int height, pcl::PointCloud<PointT>& cloud)$/;"	f	class:pcl::common::CloudGenerator
fill	include/pcl/common/impl/generate.hpp	/^pcl::common::CloudGenerator<PointT, GeneratorT>::fill (pcl::PointCloud<PointT>& cloud)$/;"	f	class:pcl::common::CloudGenerator
fill	include/pcl/common/impl/generate.hpp	/^pcl::common::CloudGenerator<pcl::PointXY, GeneratorT>::fill (int width, int height, pcl::PointCloud<pcl::PointXY>& cloud)$/;"	f	class:pcl::common::CloudGenerator
fill	include/pcl/common/impl/generate.hpp	/^pcl::common::CloudGenerator<pcl::PointXY, GeneratorT>::fill (pcl::PointCloud<pcl::PointXY>& cloud)$/;"	f	class:pcl::common::CloudGenerator
fillRaw	include/pcl/io/image.h	/^        fillRaw (unsigned char* rgb_buffer) const$/;"	f	class:pcl::io::Image
fillRaw	include/pcl/io/openni_camera/openni_image.h	/^    fillRaw (unsigned char* rgb_buffer) const throw ()$/;"	f	class:openni_wrapper::Image
filter_len_	include/pcl/io/openni2/openni2_timer_filter.h	/^          std::size_t filter_len_;$/;"	m	class:pcl::io::openni2::OpenNI2TimerFilter
findCriticalPoints	include/pcl/common/impl/bivariate_polynomial.hpp	/^pcl::BivariatePolynomialT<real>::findCriticalPoints (std::vector<real>& x_values, std::vector<real>& y_values,$/;"	f	class:pcl::BivariatePolynomialT
find_signal	include/pcl/io/grabber.h	/^  Grabber::find_signal () const$/;"	f	class:pcl::Grabber
firingData	include/pcl/io/hdl_grabber.h	/^          HDLFiringData firingData[HDL_FIRING_PER_PKT];$/;"	m	struct:pcl::HDLGrabber::HDLDataPacket
first_map_only_	include/costmap_2d/static_layer.h	/^  bool first_map_only_;      \/\/\/< @brief Store the first static map and reuse it on reinitializing$/;"	m	class:costmap_2d::StaticLayer
flags	include/pcl/io/ply/ply_parser.h	/^          enum flags { };$/;"	g	class:pcl::io::ply::ply_parser
flags_	include/pcl/io/ply/ply_parser.h	/^          flags_type flags_;$/;"	m	class:pcl::io::ply::ply_parser
flags_type	include/pcl/io/ply/ply_parser.h	/^          typedef int flags_type;$/;"	t	class:pcl::io::ply::ply_parser
float32	include/pcl/io/ply/ply.h	/^      typedef float float32;$/;"	t	namespace:pcl::io::ply
float64	include/pcl/io/ply/ply.h	/^      typedef double float64;$/;"	t	namespace:pcl::io::ply
focal_length_	include/pcl/io/image_depth.h	/^        float focal_length_;$/;"	m	class:pcl::io::DepthImage
focal_length_	include/pcl/io/openni_camera/openni_depth_image.h	/^      float focal_length_;$/;"	m	class:openni_wrapper::DepthImage
focal_length_x	include/pcl/io/lzf_image_io.h	/^      double focal_length_x;$/;"	m	struct:pcl::io::CameraParameters
focal_length_x	include/pcl/io/openni2_grabber.h	/^          double focal_length_x;$/;"	m	struct:pcl::io::OpenNI2Grabber::CameraParameters
focal_length_x_	include/pcl/range_image/range_image_planar.h	/^      float focal_length_x_, focal_length_y_; \/\/!< The focal length of the image in pixels$/;"	m	class:pcl::RangeImagePlanar
focal_length_x_reciprocal_	include/pcl/range_image/range_image_planar.h	/^      float focal_length_x_reciprocal_, focal_length_y_reciprocal_;  \/\/!< 1\/focal_length -> for internal use$/;"	m	class:pcl::RangeImagePlanar
focal_length_y	include/pcl/io/lzf_image_io.h	/^      double focal_length_y;$/;"	m	struct:pcl::io::CameraParameters
focal_length_y	include/pcl/io/openni2_grabber.h	/^          double focal_length_y;$/;"	m	struct:pcl::io::OpenNI2Grabber::CameraParameters
focal_length_y_	include/pcl/range_image/range_image_planar.h	/^      float focal_length_x_, focal_length_y_; \/\/!< The focal length of the image in pixels$/;"	m	class:pcl::RangeImagePlanar
focal_length_y_reciprocal_	include/pcl/range_image/range_image_planar.h	/^      float focal_length_x_reciprocal_, focal_length_y_reciprocal_;  \/\/!< 1\/focal_length -> for internal use$/;"	m	class:pcl::RangeImagePlanar
footprint_	include/costmap_2d/layered_costmap.h	/^  std::vector<geometry_msgs::Point> footprint_;$/;"	m	class:costmap_2d::LayeredCostmap
footprint_clearing_enabled_	include/costmap_2d/obstacle_layer.h	/^  bool footprint_clearing_enabled_;$/;"	m	class:costmap_2d::ObstacleLayer
footprint_padding_	include/costmap_2d/costmap_2d_ros.h	/^  float footprint_padding_;$/;"	m	class:costmap_2d::Costmap2DROS
footprint_spec_	include/costmap_2d/layer.h	/^  std::vector<geometry_msgs::Point> footprint_spec_;$/;"	m	class:costmap_2d::Layer
for_each_type	include/pcl/for_each_type.h	/^  for_each_type (F f)$/;"	f	namespace:pcl
for_each_type_impl	include/pcl/for_each_type.h	/^  struct for_each_type_impl$/;"	s	namespace:pcl
for_each_type_impl	include/pcl/for_each_type.h	/^  struct for_each_type_impl<false>$/;"	s	namespace:pcl
format	include/pcl/io/ply/ply.h	/^      enum format { ascii_format, binary_little_endian_format, binary_big_endian_format, unknown };  $/;"	g	namespace:pcl::io::ply
format_callback	include/pcl/io/ply/ply_parser.h	/^inline void pcl::io::ply::ply_parser::format_callback (const format_callback_type& format_callback)$/;"	f	class:pcl::io::ply::ply_parser
format_callback_	include/pcl/io/ply/ply_parser.h	/^          format_callback_type format_callback_;$/;"	m	class:pcl::io::ply::ply_parser
format_callback_type	include/pcl/io/ply/ply_parser.h	/^          typedef boost::function<void (format_type, const std::string&)> format_callback_type;$/;"	t	class:pcl::io::ply::ply_parser
format_type	include/pcl/io/ply/ply.h	/^      typedef int format_type;$/;"	t	namespace:pcl::io::ply
fotonic_device_handle_	include/pcl/io/fotonic_grabber.h	/^      FZ_Device_Handle_t * fotonic_device_handle_;$/;"	m	class:pcl::FotonicGrabber
fov_	include/pcl/io/dinast_grabber.h	/^      double fov_;$/;"	m	class:pcl::DinastGrabber
fps	include/pcl/io/real_sense_grabber.h	/^        unsigned int fps;$/;"	m	struct:pcl::RealSenseGrabber::Mode
fps_mutex_	include/pcl/io/davidsdk_grabber.h	/^      mutable boost::mutex fps_mutex_;$/;"	m	class:pcl::DavidSDKGrabber
fps_mutex_	include/pcl/io/depth_sense/depth_sense_grabber_impl.h	/^        mutable boost::mutex fps_mutex_;$/;"	m	struct:pcl::io::depth_sense::DepthSenseGrabberImpl
fps_mutex_	include/pcl/io/ensenso_grabber.h	/^      mutable boost::mutex fps_mutex_;$/;"	m	class:pcl::EnsensoGrabber
fps_mutex_	include/pcl/io/real_sense_grabber.h	/^      mutable boost::mutex fps_mutex_;$/;"	m	class:pcl::RealSenseGrabber
frame_id	include/map_msgs/ProjectedMapInfo.h	/^  _frame_id_type frame_id;$/;"	m	struct:map_msgs::ProjectedMapInfo_
frame_id	include/pcl/PCLHeader.h	/^    std::string frame_id;$/;"	m	struct:pcl::PCLHeader
frame_rate_	include/pcl/io/openni2/openni2_video_mode.h	/^        int frame_rate_;$/;"	m	struct:pcl::io::openni2::OpenNI2VideoMode
frequency_	include/pcl/io/davidsdk_grabber.h	/^      pcl::EventFrequency frequency_;$/;"	m	class:pcl::DavidSDKGrabber
frequency_	include/pcl/io/depth_sense/depth_sense_grabber_impl.h	/^        EventFrequency frequency_;$/;"	m	struct:pcl::io::depth_sense::DepthSenseGrabberImpl
frequency_	include/pcl/io/ensenso_grabber.h	/^      pcl::EventFrequency frequency_;$/;"	m	class:pcl::EnsensoGrabber
frequency_	include/pcl/io/real_sense_grabber.h	/^      EventFrequency frequency_;$/;"	m	class:pcl::RealSenseGrabber
fromPCLPointCloud2	include/pcl/conversions.h	/^  fromPCLPointCloud2 (const pcl::PCLPointCloud2& msg, pcl::PointCloud<PointT>& cloud)$/;"	f	namespace:pcl
fromPCLPointCloud2	include/pcl/conversions.h	/^  fromPCLPointCloud2 (const pcl::PCLPointCloud2& msg, pcl::PointCloud<PointT>& cloud,$/;"	f	namespace:pcl
fromROSMsg	include/pcl/ros/conversions.h	/^  fromROSMsg (const pcl::PCLPointCloud2& msg, pcl::PointCloud<PointT>& cloud)$/;"	f	namespace:pcl
fromROSMsg	include/pcl/ros/conversions.h	/^  fromROSMsg (const pcl::PCLPointCloud2& msg, pcl::PointCloud<PointT>& cloud,$/;"	f	namespace:pcl
front	include/pcl/point_cloud.h	/^      inline PointT& front () { return (points.front ()); }$/;"	f	class:pcl::PointCloud
front	include/pcl/point_cloud.h	/^      inline const PointT& front () const { return (points.front ()); }$/;"	f	class:pcl::PointCloud
function_name_	include/pcl/exceptions.h	/^      const char* function_name_;$/;"	m	class:pcl::PCLException
function_name_	include/pcl/io/io_exception.h	/^        std::string function_name_;$/;"	m	class:pcl::io::IOException
function_name_	include/pcl/io/openni_camera/openni_exception.h	/^    std::string function_name_;$/;"	m	class:openni_wrapper::OpenNIException
furthestAxis	include/tf/LinearMath/Vector3.h	/^	TFSIMD_FORCE_INLINE int furthestAxis() const$/;"	f	class:tf::Vector3
fuzzyZero	include/tf/LinearMath/Vector3.h	/^		TFSIMD_FORCE_INLINE bool fuzzyZero() const $/;"	f	class:tf::Vector3
g	include/pcl/TextureMesh.h	/^      float g;$/;"	m	struct:pcl::TexMaterial::RGB
g	include/pcl/common/impl/accumulators.hpp	/^      float r, g, b, a;$/;"	m	struct:pcl::detail::AccumulatorRGBA
g	include/pcl/io/image_rgb24.h	/^          uint8_t g;$/;"	m	struct:pcl::io::ImageRGB24::__anon3
g_	include/pcl/io/ply_io.h	/^      int32_t r_, g_, b_;$/;"	m	class:pcl::PLYReader
g_buffer_	include/pcl/io/dinast_grabber.h	/^      boost::circular_buffer<unsigned char> g_buffer_;$/;"	m	class:pcl::DinastGrabber
g_cost_scaling_factor	src/costmap_settings.cpp	/^    double g_cost_scaling_factor = 10.0;$/;"	m	namespace:costmap_2d	file:
g_footprint_padding	src/costmap_settings.cpp	/^    double g_footprint_padding = 0.01; $/;"	m	namespace:costmap_2d	file:
g_free_thresh	src/costmap_settings.cpp	/^    double g_free_thresh = 0.196;$/;"	m	namespace:costmap_2d	file:
g_inflation_enabled	src/costmap_settings.cpp	/^    bool   g_inflation_enabled = true;$/;"	m	namespace:costmap_2d	file:
g_inflation_radius	src/costmap_settings.cpp	/^    double g_inflation_radius = 0.55;$/;"	m	namespace:costmap_2d	file:
g_laser_clearing	src/costmap_settings.cpp	/^    bool   g_laser_clearing = true;$/;"	m	namespace:costmap_2d	file:
g_laser_expected_update_rate	src/costmap_settings.cpp	/^    double g_laser_expected_update_rate = 0.4;$/;"	m	namespace:costmap_2d	file:
g_laser_marking	src/costmap_settings.cpp	/^    bool   g_laser_marking = true;$/;"	m	namespace:costmap_2d	file:
g_laser_max_obstacle_height	src/costmap_settings.cpp	/^    double g_laser_max_obstacle_height = 0.4;$/;"	m	namespace:costmap_2d	file:
g_laser_min_obstacle_height	src/costmap_settings.cpp	/^    double g_laser_min_obstacle_height = 0.08;$/;"	m	namespace:costmap_2d	file:
g_laser_observation_persistence	src/costmap_settings.cpp	/^    double g_laser_observation_persistence = 0.0;$/;"	m	namespace:costmap_2d	file:
g_lethal_cost_threshold	src/costmap_settings.cpp	/^    double g_lethal_cost_threshold = 100;$/;"	m	namespace:costmap_2d	file:
g_map_height	src/costmap_settings.cpp	/^    int    g_map_height = 6;$/;"	m	namespace:costmap_2d	file:
g_map_image	src/costmap_settings.cpp	/^    string g_map_image = "\/home\/zach\/noros_ws\/navigation_no_ros\/pkg\/test.new\/map\/simple_maze.pgm";$/;"	m	namespace:costmap_2d	file:
g_map_max_obstacle_height	src/costmap_settings.cpp	/^    double g_map_max_obstacle_height = 2.0;$/;"	m	namespace:costmap_2d	file:
g_map_resolution	src/costmap_settings.cpp	/^    double g_map_resolution = 0.025;$/;"	m	namespace:costmap_2d	file:
g_map_update_frequency	src/costmap_settings.cpp	/^    double g_map_update_frequency = 10.0;$/;"	m	namespace:costmap_2d	file:
g_map_width	src/costmap_settings.cpp	/^    int    g_map_width = 6;$/;"	m	namespace:costmap_2d	file:
g_negate	src/costmap_settings.cpp	/^    int    g_negate = 0;$/;"	m	namespace:costmap_2d	file:
g_obstacle_combination_method	src/costmap_settings.cpp	/^    int  g_obstacle_combination_method = 0;$/;"	m	namespace:costmap_2d	file:
g_obstacle_enabled	src/costmap_settings.cpp	/^    bool g_obstacle_enabled = true;$/;"	m	namespace:costmap_2d	file:
g_obstacle_footprint_clearing_enabled	src/costmap_settings.cpp	/^    bool g_obstacle_footprint_clearing_enabled = true;$/;"	m	namespace:costmap_2d	file:
g_obstacle_range	src/costmap_settings.cpp	/^    double g_obstacle_range = 2.5;$/;"	m	namespace:costmap_2d	file:
g_occupied_thresh	src/costmap_settings.cpp	/^    double g_occupied_thresh = 0.65;$/;"	m	namespace:costmap_2d	file:
g_origin_x	src/costmap_settings.cpp	/^    double g_origin_x = 2.0;$/;"	m	namespace:costmap_2d	file:
g_origin_y	src/costmap_settings.cpp	/^    double g_origin_y = 3.0;$/;"	m	namespace:costmap_2d	file:
g_origin_z	src/costmap_settings.cpp	/^    double g_origin_z = 1.0;$/;"	m	namespace:costmap_2d	file:
g_pose_update_frequency	src/costmap_settings.cpp	/^    double g_pose_update_frequency = 10.0;$/;"	m	namespace:costmap_2d	file:
g_ratio	include/pcl/impl/point_types.hpp	/^    float r_ratio, g_ratio, b_ratio;$/;"	m	struct:pcl::PPFRGBSignature
g_raytrace_range	src/costmap_settings.cpp	/^    double g_raytrace_range = 3.0;$/;"	m	namespace:costmap_2d	file:
g_resolution	src/costmap_settings.cpp	/^    double g_resolution = 0.1;$/;"	m	namespace:costmap_2d	file:
g_robot_radius	src/costmap_settings.cpp	/^    double g_robot_radius = 0.46;$/;"	m	namespace:costmap_2d	file:
g_rolling_window	src/costmap_settings.cpp	/^    bool   g_rolling_window = true;$/;"	m	namespace:costmap_2d	file:
g_static_enabled	src/costmap_settings.cpp	/^    bool   g_static_enabled = true;$/;"	m	namespace:costmap_2d	file:
g_static_map	src/costmap_settings.cpp	/^    bool   g_static_map = true;$/;"	m	namespace:costmap_2d	file:
g_track_unkonw_space	src/costmap_settings.cpp	/^    bool   g_track_unkonw_space = false;$/;"	m	namespace:costmap_2d	file:
g_transform_tolerance	src/costmap_settings.cpp	/^    double g_transform_tolerance = 0.3;$/;"	m	namespace:costmap_2d	file:
generateHeader	include/pcl/io/impl/pcd_io.hpp	/^pcl::PCDWriter::generateHeader (const pcl::PointCloud<PointT> &cloud, const int nr_points)$/;"	f	class:pcl::PCDWriter
generateHeaderASCII	include/pcl/io/ply_io.h	/^      generateHeaderASCII (const pcl::PCLPointCloud2 &cloud,$/;"	f	class:pcl::PLYWriter
generateHeaderBinary	include/pcl/io/ply_io.h	/^      generateHeaderBinary (const pcl::PCLPointCloud2 &cloud,$/;"	f	class:pcl::PLYWriter
generateLookupTable	include/pcl/io/openni2/openni_shift_to_depth_conversion.h	/^      generateLookupTable ()$/;"	f	class:openni_wrapper::ShiftToDepthConverter
generateLookupTable	include/pcl/io/openni_camera/openni_shift_to_depth_conversion.h	/^      generateLookupTable ()$/;"	f	class:openni_wrapper::ShiftToDepthConverter
generator_	include/pcl/common/random.h	/^        boost::variate_generator<EngineType&, DistributionType > generator_;$/;"	m	class:pcl::common::NormalGenerator
generator_	include/pcl/common/random.h	/^        boost::variate_generator<EngineType&, DistributionType> generator_;$/;"	m	class:pcl::common::UniformGenerator
geometry	include/pcl/common/geometry.h	/^  namespace geometry$/;"	n	namespace:pcl
get	include/pcl/common/centroid.h	/^      get (PointOutT& point) const$/;"	f	class:pcl::CentroidPoint
get	include/pcl/common/impl/accumulators.hpp	/^      get (PointT& t, size_t n) const { t.curvature = curvature \/ n; }$/;"	f	struct:pcl::detail::AccumulatorCurvature
get	include/pcl/common/impl/accumulators.hpp	/^      get (PointT& t, size_t n) const { t.getVector3fMap () = xyz \/ n; }$/;"	f	struct:pcl::detail::AccumulatorXYZ
get	include/pcl/common/impl/accumulators.hpp	/^      get (PointT& t, size_t n) const { t.intensity = intensity \/ n; }$/;"	f	struct:pcl::detail::AccumulatorIntensity
get	include/pcl/common/impl/accumulators.hpp	/^      get (PointT& t, size_t n) const$/;"	f	struct:pcl::detail::AccumulatorRGBA
get	include/pcl/common/impl/accumulators.hpp	/^      get (PointT& t, size_t) const$/;"	f	struct:pcl::detail::AccumulatorLabel
get	include/pcl/common/impl/accumulators.hpp	/^      get (PointT& t, size_t) const$/;"	f	struct:pcl::detail::AccumulatorNormal
get	include/pcl/common/impl/generate.hpp	/^pcl::common::CloudGenerator<PointT, GeneratorT>::get ()$/;"	f	class:pcl::common::CloudGenerator
get	include/pcl/common/impl/generate.hpp	/^pcl::common::CloudGenerator<pcl::PointXY, GeneratorT>::get ()$/;"	f	class:pcl::common::CloudGenerator
get	include/pcl/common/impl/intensity.hpp	/^      get (const pcl::InterestPoint &p, float &intensity) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
get	include/pcl/common/impl/intensity.hpp	/^      get (const pcl::PointNormal &p, float &intensity) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
get	include/pcl/common/impl/intensity.hpp	/^      get (const pcl::PointSurfel &p, float &intensity) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
get	include/pcl/common/impl/intensity.hpp	/^      get (const pcl::PointWithRange &p, float &intensity) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
get	include/pcl/common/impl/intensity.hpp	/^      get (const pcl::PointWithScale &p, float &intensity) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
get	include/pcl/common/impl/intensity.hpp	/^      get (const pcl::PointWithViewpoint &p, float &intensity) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
get	include/pcl/common/impl/intensity.hpp	/^      get (const pcl::PointXYZ &p, float &intensity) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
get	include/pcl/common/impl/intensity.hpp	/^      get (const pcl::PointXYZHSV &p, float &intensity) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
get	include/pcl/common/impl/intensity.hpp	/^      get (const pcl::PointXYZL &p, float &intensity) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
get	include/pcl/common/impl/intensity.hpp	/^      get (const pcl::PointXYZLNormal &p, float &intensity) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
get	include/pcl/common/impl/intensity.hpp	/^      get (const pcl::PointXYZRGB &p, float& intensity) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
get	include/pcl/common/impl/intensity.hpp	/^      get (const pcl::PointXYZRGBA &p, float& intensity) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
get	include/pcl/common/impl/intensity.hpp	/^      get (const pcl::PointXYZRGBL &p, float& intensity) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
get	include/pcl/common/impl/intensity.hpp	/^      get (const pcl::PointXYZRGBNormal &p, float& intensity) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
get	include/pcl/common/intensity.h	/^      get (const PointT &p, float &intensity) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
get	include/pcl/io/ply/ply_parser.h	/^              get () const$/;"	f	class:pcl::io::ply::ply_parser::list_property_definition_callbacks_type
get	include/pcl/io/ply/ply_parser.h	/^              get () const$/;"	f	class:pcl::io::ply::ply_parser::scalar_property_definition_callbacks_type
get	include/pcl/io/ply/ply_parser.h	/^              get ()$/;"	f	class:pcl::io::ply::ply_parser::list_property_definition_callbacks_type
get	include/pcl/io/ply/ply_parser.h	/^              get ()$/;"	f	class:pcl::io::ply::ply_parser::scalar_property_definition_callbacks_type
get128	include/tf/LinearMath/Vector3.h	/^	TFSIMD_FORCE_INLINE const vec_float4&	get128() const$/;"	f	class:tf::Vector3
get1dPointAverage	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::get1dPointAverage (int x, int y, int delta_x, int delta_y, int no_of_points, PointWithRange& average_point) const$/;"	f	class:pcl::RangeImage
getAccumulatedWeight	include/pcl/common/transformation_from_correspondences.h	/^        getAccumulatedWeight () const { return accumulated_weight_;}$/;"	f	class:pcl::TransformationFromCorrespondences
getAccumulatedWeight	include/pcl/common/vector_average.h	/^        getAccumulatedWeight () const { return accumulatedWeight_;}$/;"	f	class:pcl::VectorAverage
getAcutenessValue	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::getAcutenessValue (const PointWithRange& point1, const PointWithRange& point2) const$/;"	f	class:pcl::RangeImage
getAcutenessValue	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::getAcutenessValue (int x1, int y1, int x2, int y2) const$/;"	f	class:pcl::RangeImage
getAllPcdFilesInDirectory	include/pcl/common/impl/file_io.hpp	/^  void getAllPcdFilesInDirectory(const std::string& directory, std::vector<std::string>& file_names)$/;"	f	namespace:pcl
getAngle	include/tf/LinearMath/Quaternion.h	/^	tfScalar getAngle() const $/;"	f	class:tf::Quaternion
getAngle3D	include/pcl/common/impl/common.hpp	/^pcl::getAngle3D (const Eigen::Vector3f &v1, const Eigen::Vector3f &v2, const bool in_degree)$/;"	f	class:pcl
getAngle3D	include/pcl/common/impl/common.hpp	/^pcl::getAngle3D (const Eigen::Vector4f &v1, const Eigen::Vector4f &v2, const bool in_degree)$/;"	f	class:pcl
getAngleShortestPath	include/tf/LinearMath/Quaternion.h	/^	tfScalar getAngleShortestPath() const $/;"	f	class:tf::Quaternion
getAnglesFromImagePoint	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::getAnglesFromImagePoint (float image_x, float image_y, float& angle_x, float& angle_y) const $/;"	f	class:pcl::RangeImage
getAnglesFromImagePoint	include/pcl/range_image/impl/range_image_spherical.hpp	/^RangeImageSpherical::getAnglesFromImagePoint (float image_x, float image_y, float& angle_x, float& angle_y) const$/;"	f	class:pcl::RangeImageSpherical
getAngularResolution	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::getAngularResolution (float& angular_resolution_x, float& angular_resolution_y) const$/;"	f	class:pcl::RangeImage
getAngularResolution	include/pcl/range_image/range_image.h	/^      getAngularResolution () const { return angular_resolution_x_;}$/;"	f	class:pcl::RangeImage
getAngularResolutionX	include/pcl/range_image/range_image.h	/^      getAngularResolutionX () const { return angular_resolution_x_;}$/;"	f	class:pcl::RangeImage
getAngularResolutionY	include/pcl/range_image/range_image.h	/^      getAngularResolutionY () const { return angular_resolution_y_;}$/;"	f	class:pcl::RangeImage
getAverageEuclideanDistance	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::getAverageEuclideanDistance (int x, int y, int offset_x, int offset_y, int max_steps) const$/;"	f	class:pcl::RangeImage
getAverageViewPoint	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::getAverageViewPoint (const PointCloudTypeWithViewpoints& point_cloud)$/;"	f	class:pcl::RangeImage
getAxis	include/tf/LinearMath/Quaternion.h	/^	Vector3 getAxis() const$/;"	f	class:tf::Quaternion
getBaseFrameID	include/costmap_2d/costmap_2d_ros.h	/^  std::string getBaseFrameID()$/;"	f	class:costmap_2d::Costmap2DROS
getBaseline	include/pcl/io/openni_camera/openni_depth_image.h	/^  DepthImage::getBaseline () const throw ()$/;"	f	class:openni_wrapper::DepthImage
getBaseline	include/pcl/io/openni_camera/openni_device.h	/^  OpenNIDevice::getBaseline () const throw ()$/;"	f	class:openni_wrapper::OpenNIDevice
getBasis	include/tf/LinearMath/Transform.h	/^	TFSIMD_FORCE_INLINE Matrix3x3&       getBasis()          { return m_basis; }$/;"	f	class:tf::Transform
getBasis	include/tf/LinearMath/Transform.h	/^	TFSIMD_FORCE_INLINE const Matrix3x3& getBasis()    const { return m_basis; }$/;"	f	class:tf::Transform
getBounds	include/costmap_2d/layered_costmap.h	/^  void getBounds(unsigned int* x0, unsigned int* xn, unsigned int* y0, unsigned int* yn)$/;"	f	class:costmap_2d::LayeredCostmap
getCenterX	include/pcl/range_image/range_image_planar.h	/^      getCenterX () const { return center_x_; }$/;"	f	class:pcl::RangeImagePlanar
getCenterY	include/pcl/range_image/range_image_planar.h	/^      getCenterY () const { return center_y_; }$/;"	f	class:pcl::RangeImagePlanar
getCharMap	src/costmap_2d.cpp	/^unsigned char* Costmap2D::getCharMap() const$/;"	f	class:costmap_2d::Costmap2D
getCircumcircleRadius	include/pcl/common/impl/common.hpp	/^pcl::getCircumcircleRadius (const PointT &pa, const PointT &pb, const PointT &pc)$/;"	f	class:pcl
getCircumscribedRadius	include/costmap_2d/layered_costmap.h	/^  double getCircumscribedRadius() { return circumscribed_radius_; }$/;"	f	class:costmap_2d::LayeredCostmap
getClearingObservations	src/obstacle_layer.cpp	/^bool ObstacleLayer::getClearingObservations(std::vector<Observation>& clearing_observations) const$/;"	f	class:costmap_2d::ObstacleLayer
getCoefficients	include/pcl/common/pca.h	/^      getCoefficients () $/;"	f	class:pcl::PCA
getColumn	include/tf/LinearMath/Matrix3x3.h	/^	TFSIMD_FORCE_INLINE Vector3 getColumn(int i) const$/;"	f	class:tf::Matrix3x3
getCost	src/costmap_2d.cpp	/^unsigned char Costmap2D::getCost(unsigned int mx, unsigned int my) const$/;"	f	class:costmap_2d::Costmap2D
getCostmap	include/costmap_2d/costmap_2d_ros.h	/^  Costmap2D* getCostmap()$/;"	f	class:costmap_2d::Costmap2DROS
getCostmap	include/costmap_2d/layered_costmap.h	/^  Costmap2D* getCostmap()$/;"	f	class:costmap_2d::LayeredCostmap
getCovariance	include/pcl/common/vector_average.h	/^        Eigen::Matrix<real, dimension, dimension>& getCovariance () const { return covariance_;}$/;"	f	class:pcl::VectorAverage
getCurrentIndex	include/pcl/impl/cloud_iterator.hpp	/^      unsigned getCurrentIndex () const$/;"	f	class:pcl::ConstCloudIterator::ConstIteratorIdx
getCurrentIndex	include/pcl/impl/cloud_iterator.hpp	/^      unsigned getCurrentIndex () const$/;"	f	class:pcl::ConstCloudIterator::DefaultConstIterator
getCurrentIndex	include/pcl/impl/cloud_iterator.hpp	/^      unsigned getCurrentIndex () const$/;"	f	class:pcl::DefaultIterator
getCurrentIndex	include/pcl/impl/cloud_iterator.hpp	/^      unsigned getCurrentIndex () const$/;"	f	class:pcl::IteratorIdx
getCurrentIndex	include/pcl/impl/cloud_iterator.hpp	/^pcl::CloudIterator<PointT>::getCurrentIndex () const$/;"	f	class:pcl::CloudIterator
getCurrentIndex	include/pcl/impl/cloud_iterator.hpp	/^pcl::ConstCloudIterator<PointT>::getCurrentIndex () const$/;"	f	class:pcl::ConstCloudIterator
getCurrentPointIndex	include/pcl/impl/cloud_iterator.hpp	/^      unsigned getCurrentPointIndex () const$/;"	f	class:pcl::ConstCloudIterator::ConstIteratorIdx
getCurrentPointIndex	include/pcl/impl/cloud_iterator.hpp	/^      unsigned getCurrentPointIndex () const$/;"	f	class:pcl::ConstCloudIterator::DefaultConstIterator
getCurrentPointIndex	include/pcl/impl/cloud_iterator.hpp	/^      unsigned getCurrentPointIndex () const$/;"	f	class:pcl::DefaultIterator
getCurrentPointIndex	include/pcl/impl/cloud_iterator.hpp	/^      unsigned getCurrentPointIndex () const$/;"	f	class:pcl::IteratorIdx
getCurrentPointIndex	include/pcl/impl/cloud_iterator.hpp	/^pcl::CloudIterator<PointT>::getCurrentPointIndex () const$/;"	f	class:pcl::CloudIterator
getCurrentPointIndex	include/pcl/impl/cloud_iterator.hpp	/^pcl::ConstCloudIterator<PointT>::getCurrentPointIndex () const$/;"	f	class:pcl::ConstCloudIterator
getCurvature	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::getCurvature (int x, int y, int radius, int step_size) const$/;"	f	class:pcl::RangeImage
getData	include/pcl/io/image.h	/^        getData ()$/;"	f	class:pcl::io::Image
getData	include/pcl/io/openni2/openni2_metadata_wrapper.h	/^          getData () const$/;"	f	class:pcl::io::openni2::Openni2FrameWrapper
getDataPoints	include/pcl/common/piecewise_linear_function.h	/^      getDataPoints () $/;"	f	class:pcl::PiecewiseLinearFunction
getDataSize	include/pcl/io/image.h	/^        getDataSize () const$/;"	f	class:pcl::io::Image
getDataSize	include/pcl/io/openni2/openni2_metadata_wrapper.h	/^          getDataSize () const$/;"	f	class:pcl::io::openni2::Openni2FrameWrapper
getDebayeringMethod	include/pcl/io/openni_camera/openni_device_kinect.h	/^  DeviceKinect::getDebayeringMethod () const throw ()$/;"	f	class:openni_wrapper::DeviceKinect
getDebayeringMethod	include/pcl/io/openni_camera/openni_image_bayer_grbg.h	/^  ImageBayerGRBG::getDebayeringMethod () const throw ()$/;"	f	class:openni_wrapper::ImageBayerGRBG
getDefaultValue	include/costmap_2d/costmap_2d.h	/^  unsigned char getDefaultValue()$/;"	f	class:costmap_2d::Costmap2D
getDepthCameraIntrinsics	include/pcl/io/openni2_grabber.h	/^        getDepthCameraIntrinsics (double &depth_focal_length_x,$/;"	f	class:pcl::io::OpenNI2Grabber
getDepthCameraIntrinsics	include/pcl/io/openni_grabber.h	/^      getDepthCameraIntrinsics (double &depth_focal_length_x, $/;"	f	class:pcl::OpenNIGrabber
getDepthFocalLength	include/pcl/io/openni2_grabber.h	/^        getDepthFocalLength (double &depth_focal_length_x, double &depth_focal_length_y) const$/;"	f	class:pcl::io::OpenNI2Grabber
getDepthFocalLength	include/pcl/io/openni_camera/openni_device.h	/^  OpenNIDevice::getDepthFocalLength (int output_x_resolution) const throw ()$/;"	f	class:openni_wrapper::OpenNIDevice
getDepthFocalLength	include/pcl/io/openni_grabber.h	/^      getDepthFocalLength (double &depth_focal_length_x, double &depth_focal_length_y) const$/;"	f	class:pcl::OpenNIGrabber
getDepthMetaData	include/pcl/io/openni_camera/openni_depth_image.h	/^  DepthImage::getDepthMetaData () const throw ()$/;"	f	class:openni_wrapper::DepthImage
getDevice	include/pcl/io/openni2_grabber.h	/^    OpenNI2Grabber::getDevice () const$/;"	f	class:pcl::io::OpenNI2Grabber
getDevice	include/pcl/io/openni_grabber.h	/^  OpenNIGrabber::getDevice () const$/;"	f	class:pcl::OpenNIGrabber
getEigenValues	include/pcl/common/pca.h	/^      getEigenValues ()$/;"	f	class:pcl::PCA
getEigenVector1	include/pcl/common/impl/vector_average.hpp	/^  inline void VectorAverage<double, 3>::getEigenVector1(Eigen::Matrix<double, 3, 1>& eigen_vector1) const$/;"	f	class:pcl::VectorAverage
getEigenVector1	include/pcl/common/impl/vector_average.hpp	/^  inline void VectorAverage<float, 3>::getEigenVector1(Eigen::Matrix<float, 3, 1>& eigen_vector1) const$/;"	f	class:pcl::VectorAverage
getEigenVector1	include/pcl/common/impl/vector_average.hpp	/^  inline void VectorAverage<real, dimension>::getEigenVector1(Eigen::Matrix<real, dimension, 1>& eigen_vector1) const$/;"	f	class:pcl::VectorAverage
getEigenVector3f	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::getEigenVector3f (const PointWithRange& point)$/;"	f	class:pcl::RangeImage
getEigenVector3f	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::getEigenVector3f (int index) const$/;"	f	class:pcl::RangeImage
getEigenVector3f	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::getEigenVector3f (int x, int y) const$/;"	f	class:pcl::RangeImage
getEigenVectors	include/pcl/common/pca.h	/^      getEigenVectors () $/;"	f	class:pcl::PCA
getEncoding	include/pcl/io/image_rgb24.h	/^        getEncoding () const$/;"	f	class:pcl::io::ImageRGB24
getEncoding	include/pcl/io/image_yuv422.h	/^        getEncoding () const$/;"	f	class:pcl::io::ImageYUV422
getEncoding	include/pcl/io/openni_camera/openni_image_bayer_grbg.h	/^      getEncoding () const$/;"	f	class:openni_wrapper::ImageBayerGRBG
getEncoding	include/pcl/io/openni_camera/openni_image_rgb24.h	/^    getEncoding () const$/;"	f	class:openni_wrapper::ImageRGB24
getEncoding	include/pcl/io/openni_camera/openni_image_yuv_422.h	/^    getEncoding () const$/;"	f	class:openni_wrapper::ImageYUV422
getEuclideanDistanceSquared	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::getEuclideanDistanceSquared (int x1, int y1, int x2, int y2) const$/;"	f	class:pcl::RangeImage
getEulerAngles	include/pcl/common/eigen.h	/^  getEulerAngles (const Eigen::Affine3d &t, double &roll, double &pitch, double &yaw)$/;"	f	namespace:pcl
getEulerAngles	include/pcl/common/eigen.h	/^  getEulerAngles (const Eigen::Affine3f &t, float &roll, float &pitch, float &yaw)$/;"	f	namespace:pcl
getEulerAngles	include/pcl/common/impl/eigen.hpp	/^pcl::getEulerAngles (const Eigen::Transform<Scalar, 3, Eigen::Affine> &t, Scalar &roll, Scalar &pitch, Scalar &yaw)$/;"	f	class:pcl
getEulerYPR	include/tf/LinearMath/Matrix3x3.h	/^	void getEulerYPR(tfScalar& yaw, tfScalar& pitch, tfScalar& roll, unsigned int solution_number = 1) const$/;"	f	class:tf::Matrix3x3
getEulerZYX	include/tf/LinearMath/Matrix3x3.h	/^	__attribute__((deprecated)) void getEulerZYX(tfScalar& yaw, tfScalar& pitch, tfScalar& roll, unsigned int solution_number = 1) const$/;"	f	class:tf::Matrix3x3
getFieldIndex	include/pcl/common/impl/io.hpp	/^pcl::getFieldIndex (const pcl::PointCloud<PointT> &, $/;"	f	class:pcl
getFieldIndex	include/pcl/common/impl/io.hpp	/^pcl::getFieldIndex (const std::string &field_name, $/;"	f	class:pcl
getFieldIndex	include/pcl/common/io.h	/^  getFieldIndex (const pcl::PCLPointCloud2 &cloud, const std::string &field_name)$/;"	f	namespace:pcl
getFieldSize	include/pcl/common/io.h	/^  getFieldSize (const int datatype)$/;"	f	namespace:pcl
getFieldType	include/pcl/common/io.h	/^  getFieldType (const int size, char type)$/;"	f	namespace:pcl
getFieldType	include/pcl/common/io.h	/^  getFieldType (const int type)$/;"	f	namespace:pcl
getFieldValue	include/pcl/point_traits.h	/^  getFieldValue (const PointT &pt, size_t field_offset, ValT &value)$/;"	f	namespace:pcl
getFields	include/pcl/common/impl/io.hpp	/^pcl::getFields (const pcl::PointCloud<PointT> &, std::vector<pcl::PCLPointField> &fields)$/;"	f	class:pcl
getFields	include/pcl/common/impl/io.hpp	/^pcl::getFields (std::vector<pcl::PCLPointField> &fields)$/;"	f	class:pcl
getFieldsList	include/pcl/common/impl/io.hpp	/^pcl::getFieldsList (const pcl::PointCloud<PointT> &)$/;"	f	class:pcl
getFieldsList	include/pcl/common/io.h	/^  getFieldsList (const pcl::PCLPointCloud2 &cloud)$/;"	f	namespace:pcl
getFileExtension	include/pcl/common/impl/file_io.hpp	/^std::string getFileExtension(const std::string& input)$/;"	f	namespace:pcl
getFileName	include/pcl/exceptions.h	/^      getFileName () const throw ()$/;"	f	class:pcl::PCLException
getFileSize	include/pcl/io/tar.h	/^      getFileSize ()$/;"	f	struct:pcl::io::TARHeader
getFilenameWithoutExtension	include/pcl/common/impl/file_io.hpp	/^std::string getFilenameWithoutExtension(const std::string& input)$/;"	f	namespace:pcl
getFilenameWithoutPath	include/pcl/common/impl/file_io.hpp	/^std::string getFilenameWithoutPath(const std::string& input)$/;"	f	namespace:pcl
getFocalLength	include/pcl/io/openni_camera/openni_depth_image.h	/^  DepthImage::getFocalLength () const throw ()$/;"	f	class:openni_wrapper::DepthImage
getFocalLengthX	include/pcl/range_image/range_image_planar.h	/^      getFocalLengthX () const { return focal_length_x_; }$/;"	f	class:pcl::RangeImagePlanar
getFocalLengthY	include/pcl/range_image/range_image_planar.h	/^      getFocalLengthY () const { return focal_length_y_; }$/;"	f	class:pcl::RangeImagePlanar
getFootprint	include/costmap_2d/layered_costmap.h	/^  const std::vector<geometry_msgs::Point>& getFootprint() { return footprint_; }$/;"	f	class:costmap_2d::LayeredCostmap
getFootprint	src/layer.cpp	/^const std::vector<geometry_msgs::Point>& Layer::getFootprint() const$/;"	f	class:costmap_2d::Layer
getFrameID	include/pcl/io/image.h	/^        getFrameID () const$/;"	f	class:pcl::io::Image
getFrameID	include/pcl/io/openni2/openni2_metadata_wrapper.h	/^          getFrameID () const$/;"	f	class:pcl::io::openni2::Openni2FrameWrapper
getFrameID	include/pcl/io/openni_camera/openni_depth_image.h	/^  DepthImage::getFrameID () const throw ()$/;"	f	class:openni_wrapper::DepthImage
getFrameID	include/pcl/io/openni_camera/openni_image.h	/^  Image::getFrameID () const throw ()$/;"	f	class:openni_wrapper::Image
getFrameID	include/pcl/io/openni_camera/openni_ir_image.h	/^unsigned IRImage::getFrameID () const throw ()$/;"	f	class:openni_wrapper::IRImage
getFrequency	include/pcl/common/time.h	/^      getFrequency () const$/;"	f	class:pcl::EventFrequency
getFunctionName	include/pcl/exceptions.h	/^      getFunctionName () const throw ()$/;"	f	class:pcl::PCLException
getGlobalFrameID	include/costmap_2d/costmap_2d_ros.h	/^  std::string getGlobalFrameID()$/;"	f	class:costmap_2d::Costmap2DROS
getGlobalFrameID	include/costmap_2d/layered_costmap.h	/^  std::string getGlobalFrameID() const$/;"	f	class:costmap_2d::LayeredCostmap
getHeight	include/pcl/io/image.h	/^        getHeight () const$/;"	f	class:pcl::io::Image
getHeight	include/pcl/io/lzf_image_io.h	/^        getHeight () const$/;"	f	class:pcl::io::LZFImageReader
getHeight	include/pcl/io/openni2/openni2_metadata_wrapper.h	/^          getHeight () const$/;"	f	class:pcl::io::openni2::Openni2FrameWrapper
getHeight	include/pcl/io/openni_camera/openni_depth_image.h	/^  DepthImage::getHeight () const throw ()$/;"	f	class:openni_wrapper::DepthImage
getHeight	include/pcl/io/openni_camera/openni_image.h	/^  Image::getHeight () const throw ()$/;"	f	class:openni_wrapper::Image
getHeight	include/pcl/io/openni_camera/openni_ir_image.h	/^unsigned IRImage::getHeight () const throw ()$/;"	f	class:openni_wrapper::IRImage
getIdentity	include/tf/LinearMath/Matrix3x3.h	/^	static const Matrix3x3&	getIdentity()$/;"	f	class:tf::Matrix3x3
getIdentity	include/tf/LinearMath/Quaternion.h	/^	static const Quaternion&	getIdentity()$/;"	f	class:tf::Quaternion
getIdentity	include/tf/LinearMath/Transform.h	/^	static const Transform&	getIdentity()$/;"	f	class:tf::Transform
getImageFocalLength	include/pcl/io/openni_camera/openni_device.h	/^  OpenNIDevice::getImageFocalLength (int output_x_resolution) const throw ()$/;"	f	class:openni_wrapper::OpenNIDevice
getImageOffsetX	include/pcl/range_image/range_image.h	/^      getImageOffsetX () const { return image_offset_x_;}$/;"	f	class:pcl::RangeImage
getImageOffsetY	include/pcl/range_image/range_image.h	/^      getImageOffsetY () const { return image_offset_y_;}$/;"	f	class:pcl::RangeImage
getImagePoint	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::getImagePoint (const Eigen::Vector3f& point, float& image_x, float& image_y) const$/;"	f	class:pcl::RangeImage
getImagePoint	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::getImagePoint (const Eigen::Vector3f& point, float& image_x, float& image_y, float& range) const $/;"	f	class:pcl::RangeImage
getImagePoint	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::getImagePoint (const Eigen::Vector3f& point, int& image_x, int& image_y) const$/;"	f	class:pcl::RangeImage
getImagePoint	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::getImagePoint (const Eigen::Vector3f& point, int& image_x, int& image_y, float& range) const {$/;"	f	class:pcl::RangeImage
getImagePoint	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::getImagePoint (float x, float y, float z, float& image_x, float& image_y) const $/;"	f	class:pcl::RangeImage
getImagePoint	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::getImagePoint (float x, float y, float z, float& image_x, float& image_y, float& range) const $/;"	f	class:pcl::RangeImage
getImagePoint	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::getImagePoint (float x, float y, float z, int& image_x, int& image_y) const $/;"	f	class:pcl::RangeImage
getImagePoint	include/pcl/range_image/impl/range_image_planar.hpp	/^RangeImagePlanar::getImagePoint (const Eigen::Vector3f& point, float& image_x, float& image_y, float& range) const $/;"	f	class:pcl::RangeImagePlanar
getImagePoint	include/pcl/range_image/impl/range_image_spherical.hpp	/^RangeImageSpherical::getImagePoint (const Eigen::Vector3f& point, float& image_x, float& image_y, float& range) const$/;"	f	class:pcl::RangeImageSpherical
getImagePointFromAngles	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::getImagePointFromAngles (float angle_x, float angle_y, float& image_x, float& image_y) const$/;"	f	class:pcl::RangeImage
getImagePointFromAngles	include/pcl/range_image/impl/range_image_spherical.hpp	/^RangeImageSpherical::getImagePointFromAngles (float angle_x, float angle_y, float& image_x, float& image_y) const$/;"	f	class:pcl::RangeImageSpherical
getImageType	include/pcl/io/lzf_image_io.h	/^        getImageType () const$/;"	f	class:pcl::io::LZFImageReader
getImpactAngle	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::getImpactAngle (const PointWithRange& point1, const PointWithRange& point2) const {$/;"	f	class:pcl::RangeImage
getImpactAngle	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::getImpactAngle (int x1, int y1, int x2, int y2) const$/;"	f	class:pcl::RangeImage
getImpactAngleBasedOnLocalNormal	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::getImpactAngleBasedOnLocalNormal (int x, int y, int radius) const$/;"	f	class:pcl::RangeImage
getIndex	include/costmap_2d/costmap_2d.h	/^  inline unsigned int getIndex(unsigned int mx, unsigned int my) const$/;"	f	class:costmap_2d::Costmap2D
getIndices	include/pcl/pcl_base.h	/^      getIndices () const { return (indices_); }$/;"	f	class:pcl::PCLBase
getIndices	include/pcl/pcl_base.h	/^      getIndices () { return (indices_); }$/;"	f	class:pcl::PCLBase
getInputCloud	include/pcl/pcl_base.h	/^      getInputCloud () const { return (input_); }$/;"	f	class:pcl::PCLBase
getInputCloud	include/pcl/pcl_base.h	/^      getInputCloud () { return (input_); }$/;"	f	class:pcl::PCLBase
getInscribedRadius	include/costmap_2d/layered_costmap.h	/^  double getInscribedRadius() { return inscribed_radius_; }$/;"	f	class:costmap_2d::LayeredCostmap
getInstance	include/pcl/io/depth_sense/depth_sense_device_manager.h	/^          getInstance ()$/;"	f	class:pcl::io::depth_sense::DepthSenseDeviceManager
getInstance	include/pcl/io/openni2/openni2_device_manager.h	/^        static boost::shared_ptr<OpenNI2DeviceManager> getInstance ()$/;"	f	class:pcl::io::openni2::OpenNI2DeviceManager
getInstance	include/pcl/io/openni_camera/openni_driver.h	/^  OpenNIDriver::getInstance ()$/;"	f	class:openni_wrapper::OpenNIDriver
getInstance	include/pcl/io/real_sense/real_sense_device_manager.h	/^          getInstance ()$/;"	f	class:pcl::io::real_sense::RealSenseDeviceManager
getLayeredCostmap	include/costmap_2d/costmap_2d_ros.h	/^  LayeredCostmap* getLayeredCostmap()$/;"	f	class:costmap_2d::Costmap2DROS
getLineNumber	include/pcl/exceptions.h	/^      getLineNumber () const throw ()$/;"	f	class:pcl::PCLException
getMapping	include/pcl/point_cloud.h	/^    getMapping (pcl::PointCloud<PointT>& p)$/;"	f	namespace:pcl::detail
getMarkingObservations	src/obstacle_layer.cpp	/^bool ObstacleLayer::getMarkingObservations(std::vector<Observation>& marking_observations) const$/;"	f	class:costmap_2d::ObstacleLayer
getMatrix3fMap	include/pcl/impl/point_types.hpp	/^    inline Eigen::Map<Eigen::Matrix3f> getMatrix3fMap () { return (Eigen::Matrix3f::Map (rf)); }$/;"	f	struct:pcl::_ReferenceFrame
getMatrix3fMap	include/pcl/impl/point_types.hpp	/^    inline const Eigen::Map<const Eigen::Matrix3f> getMatrix3fMap () const { return (Eigen::Matrix3f::Map (rf)); }$/;"	f	struct:pcl::_ReferenceFrame
getMatrixXfMap	include/pcl/point_cloud.h	/^      getMatrixXfMap () $/;"	f	class:pcl::PointCloud
getMatrixXfMap	include/pcl/point_cloud.h	/^      getMatrixXfMap () const$/;"	f	class:pcl::PointCloud
getMatrixXfMap	include/pcl/point_cloud.h	/^      getMatrixXfMap (int dim, int stride, int offset) const$/;"	f	class:pcl::PointCloud
getMatrixXfMap	include/pcl/point_cloud.h	/^      getMatrixXfMap (int dim, int stride, int offset)$/;"	f	class:pcl::PointCloud
getMaxAngleSize	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::getMaxAngleSize (const Eigen::Affine3f& viewer_pose, const Eigen::Vector3f& center, float radius)$/;"	f	class:pcl::RangeImage
getMaxDistance	include/pcl/common/impl/common.hpp	/^pcl::getMaxDistance (const pcl::PointCloud<PointT> &cloud, const Eigen::Vector4f &pivot_pt, Eigen::Vector4f &max_pt)$/;"	f	class:pcl
getMaxDistance	include/pcl/common/impl/common.hpp	/^pcl::getMaxDistance (const pcl::PointCloud<PointT> &cloud, const std::vector<int> &indices,$/;"	f	class:pcl
getMaxSegment	include/pcl/common/distances.h	/^  getMaxSegment (const pcl::PointCloud<PointT> &cloud, $/;"	f	namespace:pcl
getMaxSegment	include/pcl/common/distances.h	/^  getMaxSegment (const pcl::PointCloud<PointT> &cloud, const std::vector<int> &indices,$/;"	f	namespace:pcl
getMean	include/pcl/common/pca.h	/^      getMean () $/;"	f	class:pcl::PCA
getMean	include/pcl/common/vector_average.h	/^        Eigen::Matrix<real, dimension, 1>& getMean () const { return mean_;}$/;"	f	class:pcl::VectorAverage
getMeanStd	include/pcl/common/impl/common.hpp	/^pcl::getMeanStd (const std::vector<float> &values, double &mean, double &stddev)$/;"	f	class:pcl
getMetaData	include/pcl/io/openni2/openni2_metadata_wrapper.h	/^          getMetaData () const$/;"	f	class:pcl::io::openni2::Openni2FrameWrapper
getMetaData	include/pcl/io/openni_camera/openni_image.h	/^  Image::getMetaData () const throw ()$/;"	f	class:openni_wrapper::Image
getMetaData	include/pcl/io/openni_camera/openni_ir_image.h	/^const xn::IRMetaData& IRImage::getMetaData () const throw ()$/;"	f	class:openni_wrapper::IRImage
getMinMax	include/pcl/common/impl/common.hpp	/^pcl::getMinMax (const PointT &histogram, int len, float &min_p, float &max_p)$/;"	f	class:pcl
getMinMax3D	include/pcl/common/impl/common.hpp	/^pcl::getMinMax3D (const pcl::PointCloud<PointT> &cloud, Eigen::Vector4f &min_pt, Eigen::Vector4f &max_pt)$/;"	f	class:pcl
getMinMax3D	include/pcl/common/impl/common.hpp	/^pcl::getMinMax3D (const pcl::PointCloud<PointT> &cloud, PointT &min_pt, PointT &max_pt)$/;"	f	class:pcl
getMinMax3D	include/pcl/common/impl/common.hpp	/^pcl::getMinMax3D (const pcl::PointCloud<PointT> &cloud, const pcl::PointIndices &indices,$/;"	f	class:pcl
getMinMax3D	include/pcl/common/impl/common.hpp	/^pcl::getMinMax3D (const pcl::PointCloud<PointT> &cloud, const std::vector<int> &indices,$/;"	f	class:pcl
getMode	include/pcl/io/real_sense_grabber.h	/^      getMode () const$/;"	f	class:pcl::RealSenseGrabber
getMutex	include/costmap_2d/costmap_2d.h	/^  mutex_t* getMutex()$/;"	f	class:costmap_2d::Costmap2D
getName	include/costmap_2d/layer.h	/^  std::string getName() const$/;"	f	class:costmap_2d::Layer
getName	include/pcl/io/depth_sense_grabber.h	/^      getName () const$/;"	f	class:pcl::DepthSenseGrabber
getName	include/pcl/io/dinast_grabber.h	/^      getName () const$/;"	f	class:pcl::DinastGrabber
getName	include/pcl/io/real_sense_grabber.h	/^      getName () const$/;"	f	class:pcl::RealSenseGrabber
getNew	include/pcl/range_image/range_image.h	/^      getNew () const { return new RangeImage; }$/;"	f	class:pcl::RangeImage
getNew	include/pcl/range_image/range_image_planar.h	/^      getNew () const { return new RangeImagePlanar; }$/;"	f	class:pcl::RangeImagePlanar
getNew	include/pcl/range_image/range_image_spherical.h	/^      getNew () const { return new RangeImageSpherical; }$/;"	f	class:pcl::RangeImageSpherical
getNoOfParameters	include/pcl/common/bivariate_polynomial.h	/^      getNoOfParameters () const { return getNoOfParametersFromDegree (degree);}$/;"	f	class:pcl::BivariatePolynomialT
getNoOfParametersFromDegree	include/pcl/common/bivariate_polynomial.h	/^      getNoOfParametersFromDegree (int n) { return ((n+2)* (n+1))\/2;}$/;"	f	class:pcl::BivariatePolynomialT
getNoOfSamples	include/pcl/common/transformation_from_correspondences.h	/^        getNoOfSamples () { return no_of_samples_;}$/;"	f	class:pcl::TransformationFromCorrespondences
getNoOfSamples	include/pcl/common/vector_average.h	/^        getNoOfSamples () { return noOfSamples_;}$/;"	f	class:pcl::VectorAverage
getNoSampleValue	include/pcl/io/openni_camera/openni_depth_image.h	/^  DepthImage::getNoSampleValue () const throw ()$/;"	f	class:openni_wrapper::DepthImage
getNormal	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::getNormal (int x, int y, int radius, Eigen::Vector3f& normal, int step_size) const$/;"	f	class:pcl::RangeImage
getNormalBasedAcutenessValue	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::getNormalBasedAcutenessValue (int x, int y, int radius) const$/;"	f	class:pcl::RangeImage
getNormalForClosestNeighbors	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::getNormalForClosestNeighbors (int x, int y, Eigen::Vector3f& normal, int radius) const$/;"	f	class:pcl::RangeImage
getNormalForClosestNeighbors	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::getNormalForClosestNeighbors (int x, int y, int radius, const Eigen::Vector3f& point, int no_of_nearest_neighbors,$/;"	f	class:pcl::RangeImage
getNormalForClosestNeighbors	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::getNormalForClosestNeighbors (int x, int y, int radius, const PointWithRange& point,$/;"	f	class:pcl::RangeImage
getNumDevices	include/pcl/io/depth_sense/depth_sense_device_manager.h	/^          getNumDevices ()$/;"	f	class:pcl::io::depth_sense::DepthSenseDeviceManager
getNumDevices	include/pcl/io/real_sense/real_sense_device_manager.h	/^          getNumDevices ()$/;"	f	class:pcl::io::real_sense::RealSenseDeviceManager
getNumberDevices	include/pcl/io/openni_camera/openni_driver.h	/^  OpenNIDriver::getNumberDevices () const throw ()$/;"	f	class:openni_wrapper::OpenNIDriver
getNumberOfDimensions	include/pcl/point_representation.h	/^      inline int getNumberOfDimensions () const { return (nr_dimensions_); }$/;"	f	class:pcl::PointRepresentation
getObjectType	include/tf/LinearMath/Scalar.h	/^	inline int getObjectType() const$/;"	f	struct:tfTypedObject
getObservations	src/observation_buffer.cpp	/^void ObservationBuffer::getObservations(vector<Observation>& observations)$/;"	f	class:costmap_2d::ObservationBuffer
getOpenGLMatrix	include/tf/LinearMath/Transform.h	/^	void getOpenGLMatrix(tfScalar *m) const $/;"	f	class:tf::Transform
getOpenGLSubMatrix	include/tf/LinearMath/Matrix3x3.h	/^	void getOpenGLSubMatrix(tfScalar *m) const $/;"	f	class:tf::Matrix3x3
getOrientedFootprint	src/costmap_2d_ros.cpp	/^void Costmap2DROS::getOrientedFootprint(std::vector<geometry_msgs::Point>& oriented_footprint) const$/;"	f	class:costmap_2d::Costmap2DROS
getOrigin	include/tf/LinearMath/Transform.h	/^	TFSIMD_FORCE_INLINE Vector3&         getOrigin()         { return m_origin; }$/;"	f	class:tf::Transform
getOrigin	include/tf/LinearMath/Transform.h	/^	TFSIMD_FORCE_INLINE const Vector3&   getOrigin()   const { return m_origin; }$/;"	f	class:tf::Transform
getOriginX	src/costmap_2d.cpp	/^double Costmap2D::getOriginX() const$/;"	f	class:costmap_2d::Costmap2D
getOriginY	src/costmap_2d.cpp	/^double Costmap2D::getOriginY() const$/;"	f	class:costmap_2d::Costmap2D
getPXCDevice	include/pcl/io/real_sense/real_sense_device_manager.h	/^          getPXCDevice () { return (*device_); }$/;"	f	class:pcl::io::real_sense::RealSenseDevice
getParameters	include/pcl/common/poses_from_matches.h	/^      getParameters () { return parameters_; }$/;"	f	class:pcl::PosesFromMatches
getParameters	include/pcl/common/random.h	/^        getParameters () { return (parameters_); }$/;"	f	class:pcl::common::NormalGenerator
getParameters	include/pcl/common/random.h	/^        getParameters () { return (parameters_); }$/;"	f	class:pcl::common::UniformGenerator
getParameters	include/pcl/io/lzf_image_io.h	/^        getParameters () const$/;"	f	class:pcl::io::LZFImageReader
getParametersForX	include/pcl/common/impl/generate.hpp	/^pcl::common::CloudGenerator<PointT, GeneratorT>::getParametersForX () const$/;"	f	class:pcl::common::CloudGenerator
getParametersForX	include/pcl/common/impl/generate.hpp	/^pcl::common::CloudGenerator<pcl::PointXY, GeneratorT>::getParametersForX () const$/;"	f	class:pcl::common::CloudGenerator
getParametersForY	include/pcl/common/impl/generate.hpp	/^pcl::common::CloudGenerator<PointT, GeneratorT>::getParametersForY () const$/;"	f	class:pcl::common::CloudGenerator
getParametersForY	include/pcl/common/impl/generate.hpp	/^pcl::common::CloudGenerator<pcl::PointXY, GeneratorT>::getParametersForY () const$/;"	f	class:pcl::common::CloudGenerator
getParametersForZ	include/pcl/common/impl/generate.hpp	/^pcl::common::CloudGenerator<PointT, GeneratorT>::getParametersForZ () const$/;"	f	class:pcl::common::CloudGenerator
getPlugins	include/costmap_2d/layered_costmap.h	/^  std::vector<boost::shared_ptr<Layer> >* getPlugins()$/;"	f	class:costmap_2d::LayeredCostmap
getPoint	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::getPoint (float image_x, float image_y) const$/;"	f	class:pcl::RangeImage
getPoint	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::getPoint (float image_x, float image_y)$/;"	f	class:pcl::RangeImage
getPoint	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::getPoint (int image_x, int image_y) const$/;"	f	class:pcl::RangeImage
getPoint	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::getPoint (int image_x, int image_y)$/;"	f	class:pcl::RangeImage
getPoint	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::getPoint (int image_x, int image_y, Eigen::Vector3f& point) const$/;"	f	class:pcl::RangeImage
getPoint	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::getPoint (int index) const$/;"	f	class:pcl::RangeImage
getPoint	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::getPoint (int index, Eigen::Vector3f& point) const$/;"	f	class:pcl::RangeImage
getPointNoCheck	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::getPointNoCheck (int image_x, int image_y) const$/;"	f	class:pcl::RangeImage
getPointNoCheck	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::getPointNoCheck (int image_x, int image_y)$/;"	f	class:pcl::RangeImage
getPointsInBox	include/pcl/common/impl/common.hpp	/^pcl::getPointsInBox (const pcl::PointCloud<PointT> &cloud, $/;"	f	class:pcl
getPrincipalTransformation	include/pcl/common/impl/transforms.hpp	/^pcl::getPrincipalTransformation (const pcl::PointCloud<PointT> &cloud, $/;"	f	class:pcl
getPrincipalTransformation	include/pcl/common/transforms.h	/^  getPrincipalTransformation (const pcl::PointCloud<PointT> &cloud, $/;"	f	namespace:pcl
getRGBCameraIntrinsics	include/pcl/io/openni2_grabber.h	/^        getRGBCameraIntrinsics (double &rgb_focal_length_x,$/;"	f	class:pcl::io::OpenNI2Grabber
getRGBCameraIntrinsics	include/pcl/io/openni_grabber.h	/^      getRGBCameraIntrinsics (double &rgb_focal_length_x, $/;"	f	class:pcl::OpenNIGrabber
getRGBFocalLength	include/pcl/io/openni2_grabber.h	/^        getRGBFocalLength (double &rgb_focal_length_x, double &rgb_focal_length_y) const$/;"	f	class:pcl::io::OpenNI2Grabber
getRGBFocalLength	include/pcl/io/openni_grabber.h	/^      getRGBFocalLength (double &rgb_focal_length_x, double &rgb_focal_length_y) const$/;"	f	class:pcl::OpenNIGrabber
getRPY	include/tf/LinearMath/Matrix3x3.h	/^	void getRPY(tfScalar& roll, tfScalar& pitch, tfScalar& yaw, unsigned int solution_number = 1) const$/;"	f	class:tf::Matrix3x3
getRangeDifference	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::getRangeDifference (const Eigen::Vector3f& point) const$/;"	f	class:pcl::RangeImage
getResolution	src/costmap_2d.cpp	/^double Costmap2D::getResolution() const$/;"	f	class:costmap_2d::Costmap2D
getRobotFootprint	include/costmap_2d/costmap_2d_ros.h	/^  std::vector<geometry_msgs::Point> getRobotFootprint()$/;"	f	class:costmap_2d::Costmap2DROS
getRobotFootprintPolygon	include/costmap_2d/costmap_2d_ros.h	/^  geometry_msgs::Polygon getRobotFootprintPolygon()$/;"	f	class:costmap_2d::Costmap2DROS
getRobotPose	src/costmap_2d_ros.cpp	/^bool Costmap2DROS::getRobotPose(tf::Stamped<tf::Pose>& global_pose) const$/;"	f	class:costmap_2d::Costmap2DROS
getRotation	include/tf/LinearMath/Matrix3x3.h	/^	void getRotation(Quaternion& q) const$/;"	f	class:tf::Matrix3x3
getRotation	include/tf/LinearMath/Transform.h	/^	Quaternion getRotation() const { $/;"	f	class:tf::Transform
getRotationToViewerCoordinateFrame	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::getRotationToViewerCoordinateFrame (const Eigen::Vector3f& point, Eigen::Affine3f& transformation) const$/;"	f	class:pcl::RangeImage
getRow	include/tf/LinearMath/Matrix3x3.h	/^	TFSIMD_FORCE_INLINE const Vector3& getRow(int i) const$/;"	f	class:tf::Matrix3x3
getSensorPos	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::getSensorPos () const$/;"	f	class:pcl::RangeImage
getSerialNumber	include/pcl/io/real_sense/real_sense_device_manager.h	/^          getSerialNumber () { return (device_id_); }$/;"	f	class:pcl::io::real_sense::RealSenseDevice
getShadowValue	include/pcl/io/openni_camera/openni_depth_image.h	/^  DepthImage::getShadowValue () const throw ()$/;"	f	class:openni_wrapper::DepthImage
getSize	include/pcl/common/centroid.h	/^      getSize () const$/;"	f	class:pcl::CentroidPoint
getSizeInCellsX	src/costmap_2d.cpp	/^unsigned int Costmap2D::getSizeInCellsX() const$/;"	f	class:costmap_2d::Costmap2D
getSizeInCellsY	src/costmap_2d.cpp	/^unsigned int Costmap2D::getSizeInCellsY() const$/;"	f	class:costmap_2d::Costmap2D
getSizeInMetersX	src/costmap_2d.cpp	/^double Costmap2D::getSizeInMetersX() const$/;"	f	class:costmap_2d::Costmap2D
getSizeInMetersY	src/costmap_2d.cpp	/^double Costmap2D::getSizeInMetersY() const$/;"	f	class:costmap_2d::Costmap2D
getSkewSymmetricMatrix	include/tf/LinearMath/Vector3.h	/^		void	getSkewSymmetricMatrix(Vector3* v0,Vector3* v1,Vector3* v2) const$/;"	f	class:tf::Vector3
getSquaredDistanceOfNthNeighbor	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::getSquaredDistanceOfNthNeighbor (int x, int y, int radius, int n, int step_size) const$/;"	f	class:pcl::RangeImage
getStep	include/pcl/io/image.h	/^        getStep() const$/;"	f	class:pcl::io::Image
getStep	include/pcl/io/image_depth.h	/^        getStep() const$/;"	f	class:pcl::io::DepthImage
getStep	include/pcl/io/image_ir.h	/^        getStep() const$/;"	f	class:pcl::io::IRImage
getSurfaceAngleChange	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::getSurfaceAngleChange (int x, int y, int radius, float& angle_change_x, float& angle_change_y) const$/;"	f	class:pcl::RangeImage
getSurfaceInformation	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::getSurfaceInformation (int x, int y, int radius, const Eigen::Vector3f& point, int no_of_closest_neighbors, int step_size,$/;"	f	class:pcl::RangeImage
getSystemTimestamp	include/pcl/io/image.h	/^        getSystemTimestamp () const$/;"	f	class:pcl::io::Image
getTime	include/pcl/common/time.h	/^      getTime ()$/;"	f	class:pcl::StopWatch
getTime	include/pcl/common/time.h	/^getTime ()$/;"	f	namespace:pcl
getTimeSeconds	include/pcl/common/time.h	/^      getTimeSeconds ()$/;"	f	class:pcl::StopWatch
getTimeStamp	include/pcl/io/openni_camera/openni_depth_image.h	/^  DepthImage::getTimeStamp () const throw ()$/;"	f	class:openni_wrapper::DepthImage
getTimeStamp	include/pcl/io/openni_camera/openni_image.h	/^  Image::getTimeStamp () const throw ()$/;"	f	class:openni_wrapper::Image
getTimeStamp	include/pcl/io/openni_camera/openni_ir_image.h	/^unsigned long IRImage::getTimeStamp () const throw ()$/;"	f	class:openni_wrapper::IRImage
getTimestamp	include/pcl/io/image.h	/^        getTimestamp () const$/;"	f	class:pcl::io::Image
getTimestamp	include/pcl/io/openni2/openni2_metadata_wrapper.h	/^          getTimestamp () const$/;"	f	class:pcl::io::openni2::Openni2FrameWrapper
getTransFromUnitVectorsXY	include/pcl/common/impl/eigen.hpp	/^pcl::getTransFromUnitVectorsXY (const Eigen::Vector3f& x_axis, $/;"	f	class:pcl
getTransFromUnitVectorsZY	include/pcl/common/impl/eigen.hpp	/^pcl::getTransFromUnitVectorsZY (const Eigen::Vector3f& z_axis, $/;"	f	class:pcl
getTransformation	include/pcl/common/eigen.h	/^  getTransformation (double x, double y, double z, double roll, double pitch, double yaw, $/;"	f	namespace:pcl
getTransformation	include/pcl/common/eigen.h	/^  getTransformation (float x, float y, float z, float roll, float pitch, float yaw)$/;"	f	namespace:pcl
getTransformation	include/pcl/common/eigen.h	/^  getTransformation (float x, float y, float z, float roll, float pitch, float yaw, $/;"	f	namespace:pcl
getTransformation	include/pcl/common/impl/eigen.hpp	/^pcl::getTransformation (Scalar x, Scalar y, Scalar z, $/;"	f	class:pcl
getTransformation	include/pcl/common/impl/transformation_from_correspondences.hpp	/^pcl::TransformationFromCorrespondences::getTransformation ()$/;"	f	class:pcl::TransformationFromCorrespondences
getTransformationFromTwoUnitVectors	include/pcl/common/impl/eigen.hpp	/^pcl::getTransformationFromTwoUnitVectors (const Eigen::Vector3f& y_direction, $/;"	f	class:pcl
getTransformationFromTwoUnitVectorsAndOrigin	include/pcl/common/impl/eigen.hpp	/^pcl::getTransformationFromTwoUnitVectorsAndOrigin (const Eigen::Vector3f& y_direction, $/;"	f	class:pcl
getTransformationToRangeImageSystem	include/pcl/range_image/range_image.h	/^      getTransformationToRangeImageSystem () const { return (to_range_image_system_); }$/;"	f	class:pcl::RangeImage
getTransformationToViewerCoordinateFrame	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::getTransformationToViewerCoordinateFrame (const Eigen::Vector3f& point) const$/;"	f	class:pcl::RangeImage
getTransformationToViewerCoordinateFrame	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::getTransformationToViewerCoordinateFrame (const Eigen::Vector3f& point, Eigen::Affine3f& transformation) const$/;"	f	class:pcl::RangeImage
getTransformationToWorldSystem	include/pcl/range_image/range_image.h	/^      getTransformationToWorldSystem () const { return to_world_system_;}$/;"	f	class:pcl::RangeImage
getTranslationAndEulerAngles	include/pcl/common/eigen.h	/^  getTranslationAndEulerAngles (const Eigen::Affine3d &t,$/;"	f	namespace:pcl
getTranslationAndEulerAngles	include/pcl/common/eigen.h	/^  getTranslationAndEulerAngles (const Eigen::Affine3f &t,$/;"	f	namespace:pcl
getTranslationAndEulerAngles	include/pcl/common/impl/eigen.hpp	/^pcl::getTranslationAndEulerAngles (const Eigen::Transform<Scalar, 3, Eigen::Affine> &t,$/;"	f	class:pcl
getUnpaddedRobotFootprint	include/costmap_2d/costmap_2d_ros.h	/^  std::vector<geometry_msgs::Point> getUnpaddedRobotFootprint()$/;"	f	class:costmap_2d::Costmap2DROS
getUpdatedBounds	include/costmap_2d/layered_costmap.h	/^  void getUpdatedBounds(double& minx, double& miny, double& maxx, double& maxy)$/;"	f	class:costmap_2d::LayeredCostmap
getValue	include/pcl/common/impl/bivariate_polynomial.hpp	/^pcl::BivariatePolynomialT<real>::getValue (real x, real y) const$/;"	f	class:pcl::BivariatePolynomialT
getValue	include/pcl/common/impl/piecewise_linear_function.hpp	/^inline float PiecewiseLinearFunction::getValue(float point) const$/;"	f	class:pcl::PiecewiseLinearFunction
getValueOfGradient	include/pcl/common/impl/bivariate_polynomial.hpp	/^pcl::BivariatePolynomialT<real>::getValueOfGradient (real x, real y, real& gradX, real& gradY)$/;"	f	class:pcl::BivariatePolynomialT
getViewingDirection	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::getViewingDirection (const Eigen::Vector3f& point, Eigen::Vector3f& viewing_direction) const$/;"	f	class:pcl::RangeImage
getViewingDirection	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::getViewingDirection (int x, int y, Eigen::Vector3f& viewing_direction) const$/;"	f	class:pcl::RangeImage
getW	include/tf/LinearMath/Quaternion.h	/^	TFSIMD_FORCE_INLINE const tfScalar& getW() const { return m_floats[3]; }$/;"	f	class:tf::Quaternion
getW	include/tf/LinearMath/Vector3.h	/^	tfScalar	getW() const { return m_floats[3];}$/;"	f	class:tf::tfVector4
getWidth	include/pcl/io/image.h	/^        getWidth () const$/;"	f	class:pcl::io::Image
getWidth	include/pcl/io/lzf_image_io.h	/^        getWidth () const$/;"	f	class:pcl::io::LZFImageReader
getWidth	include/pcl/io/openni2/openni2_metadata_wrapper.h	/^          getWidth () const$/;"	f	class:pcl::io::openni2::Openni2FrameWrapper
getWidth	include/pcl/io/openni_camera/openni_depth_image.h	/^  DepthImage::getWidth () const throw ()$/;"	f	class:openni_wrapper::DepthImage
getWidth	include/pcl/io/openni_camera/openni_image.h	/^  Image::getWidth () const throw ()$/;"	f	class:openni_wrapper::Image
getWidth	include/pcl/io/openni_camera/openni_ir_image.h	/^unsigned IRImage::getWidth () const throw ()$/;"	f	class:openni_wrapper::IRImage
getX	include/tf/LinearMath/Vector3.h	/^		TFSIMD_FORCE_INLINE const tfScalar& getX() const { return m_floats[0]; }$/;"	f	class:tf::Vector3
getXAxisVector3fMap	include/pcl/impl/point_types.hpp	/^    inline Eigen::Map<Eigen::Vector3f> getXAxisVector3fMap () { return (Eigen::Vector3f::Map (x_axis)); }$/;"	f	struct:pcl::_ReferenceFrame
getXAxisVector3fMap	include/pcl/impl/point_types.hpp	/^    inline const Eigen::Map<const Eigen::Vector3f> getXAxisVector3fMap () const { return (Eigen::Vector3f::Map (x_axis)); }$/;"	f	struct:pcl::_ReferenceFrame
getY	include/tf/LinearMath/Vector3.h	/^		TFSIMD_FORCE_INLINE const tfScalar& getY() const { return m_floats[1]; }$/;"	f	class:tf::Vector3
getYAxisVector3fMap	include/pcl/impl/point_types.hpp	/^    inline Eigen::Map<Eigen::Vector3f> getYAxisVector3fMap () { return (Eigen::Vector3f::Map (y_axis)); }$/;"	f	struct:pcl::_ReferenceFrame
getYAxisVector3fMap	include/pcl/impl/point_types.hpp	/^    inline const Eigen::Map<const Eigen::Vector3f> getYAxisVector3fMap () const { return (Eigen::Vector3f::Map (y_axis)); }$/;"	f	struct:pcl::_ReferenceFrame
getZ	include/tf/LinearMath/Vector3.h	/^		TFSIMD_FORCE_INLINE const tfScalar& getZ() const { return m_floats[2]; }$/;"	f	class:tf::Vector3
getZAxisVector3fMap	include/pcl/impl/point_types.hpp	/^    inline Eigen::Map<Eigen::Vector3f> getZAxisVector3fMap () { return (Eigen::Vector3f::Map (z_axis)); }$/;"	f	struct:pcl::_ReferenceFrame
getZAxisVector3fMap	include/pcl/impl/point_types.hpp	/^    inline const Eigen::Map<const Eigen::Vector3f> getZAxisVector3fMap () const { return (Eigen::Vector3f::Map (z_axis)); }$/;"	f	struct:pcl::_ReferenceFrame
gid	include/pcl/io/tar.h	/^      char gid[8];$/;"	m	struct:pcl::io::TARHeader
global_frame_	include/costmap_2d/costmap_2d_ros.h	/^  std::string global_frame_;  \/\/\/< @brief The global frame for the costmap$/;"	m	class:costmap_2d::Costmap2DROS
global_frame_	include/costmap_2d/layered_costmap.h	/^  std::string global_frame_;$/;"	m	class:costmap_2d::LayeredCostmap
global_frame_	include/costmap_2d/observation_buffer.h	/^  std::string global_frame_;$/;"	m	class:costmap_2d::ObservationBuffer
global_frame_	include/costmap_2d/obstacle_layer.h	/^  std::string global_frame_;  \/\/\/< @brief The global frame for the costmap$/;"	m	class:costmap_2d::ObstacleLayer
global_frame_	include/costmap_2d/static_layer.h	/^  std::string global_frame_;  \/\/\/< @brief The global frame for the costmap$/;"	m	class:costmap_2d::StaticLayer
gname	include/pcl/io/tar.h	/^      char gname[32];$/;"	m	struct:pcl::io::TARHeader
got_footprint_	include/costmap_2d/costmap_2d_ros.h	/^  bool got_footprint_;$/;"	m	class:costmap_2d::Costmap2DROS
gpsTimestamp	include/pcl/io/hdl_grabber.h	/^          unsigned int gpsTimestamp;$/;"	m	struct:pcl::HDLGrabber::HDLDataPacket
grabber	include/pcl/io/depth_sense/depth_sense_device_manager.h	/^            DepthSenseGrabberImpl* grabber;$/;"	m	struct:pcl::io::depth_sense::DepthSenseDeviceManager::CapturedDevice
grabber_thread_	include/pcl/io/davidsdk_grabber.h	/^      boost::thread grabber_thread_;$/;"	m	class:pcl::DavidSDKGrabber
grabber_thread_	include/pcl/io/ensenso_grabber.h	/^      boost::thread grabber_thread_;$/;"	m	class:pcl::EnsensoGrabber
grabber_thread_	include/pcl/io/fotonic_grabber.h	/^      boost::thread grabber_thread_;$/;"	m	class:pcl::FotonicGrabber
gradient	include/pcl/impl/point_types.hpp	/^      float gradient[3];$/;"	m	union:pcl::IntensityGradient::__anon41
gradient_x	include/pcl/common/bivariate_polynomial.h	/^      BivariatePolynomialT<real>* gradient_x, * gradient_y;$/;"	m	class:pcl::BivariatePolynomialT
gradient_x	include/pcl/impl/point_types.hpp	/^        float gradient_x;$/;"	m	struct:pcl::IntensityGradient::__anon41::__anon42
gradient_y	include/pcl/common/bivariate_polynomial.h	/^      BivariatePolynomialT<real>* gradient_x, * gradient_y;$/;"	m	class:pcl::BivariatePolynomialT
gradient_y	include/pcl/impl/point_types.hpp	/^        float gradient_y;$/;"	m	struct:pcl::IntensityGradient::__anon41::__anon42
gradient_z	include/pcl/impl/point_types.hpp	/^        float gradient_z;$/;"	m	struct:pcl::IntensityGradient::__anon41::__anon42
h	include/pcl/impl/point_types.hpp	/^        float h;$/;"	m	struct:pcl::_PointXYZHSV::__anon19::__anon20
hasDataLeft	include/pcl/io/oni_grabber.h	/^      hasDataLeft ()$/;"	f	class:pcl::ONIGrabber
hasDataLeft	include/pcl/io/openni_camera/openni_device_oni.h	/^    hasDataLeft ()$/;"	f	class:openni_wrapper::DeviceONI
has_all_fields	include/pcl/point_types.h	/^    struct has_all_fields : boost::mpl::fold<Field,$/;"	s	namespace:pcl::traits
has_any_field	include/pcl/point_types.h	/^    struct has_any_field : boost::mpl::fold<Field,$/;"	s	namespace:pcl::traits
has_color	include/pcl/point_types.h	/^    struct has_color : has_any_field<PointT, boost::mpl::vector<pcl::fields::rgb,$/;"	s	namespace:pcl::traits
has_curvature	include/pcl/point_types.h	/^    struct has_curvature : has_field<PointT, pcl::fields::curvature>$/;"	s	namespace:pcl::traits
has_extra_bounds_	include/costmap_2d/costmap_layer.h	/^  bool has_extra_bounds_;$/;"	m	class:costmap_2d::CostmapLayer
has_field	include/pcl/point_types.h	/^    struct has_field : boost::mpl::contains<typename pcl::traits::fieldList<PointT>::type, Field>::type$/;"	s	namespace:pcl::traits
has_intensity	include/pcl/point_types.h	/^    struct has_intensity : has_field<PointT, pcl::fields::intensity>$/;"	s	namespace:pcl::traits
has_label	include/pcl/point_types.h	/^    struct has_label : has_field<PointT, pcl::fields::label>$/;"	s	namespace:pcl::traits
has_normal	include/pcl/point_types.h	/^    struct has_normal : has_all_fields<PointT, boost::mpl::vector<pcl::fields::normal_x,$/;"	s	namespace:pcl::traits
has_updated_data_	include/costmap_2d/static_layer.h	/^  bool has_updated_data_;$/;"	m	class:costmap_2d::StaticLayer
has_xyz	include/pcl/point_types.h	/^    struct has_xyz : has_all_fields<PointT, boost::mpl::vector<pcl::fields::x,$/;"	s	namespace:pcl::traits
hdl_data_	include/pcl/io/hdl_grabber.h	/^      pcl::SynchronizedQueue<unsigned char *> hdl_data_;$/;"	m	class:pcl::HDLGrabber
hdl_read_packet_thread_	include/pcl/io/hdl_grabber.h	/^      boost::thread *hdl_read_packet_thread_;$/;"	m	class:pcl::HDLGrabber
hdl_read_socket_	include/pcl/io/hdl_grabber.h	/^      boost::asio::ip::udp::socket *hdl_read_socket_;$/;"	m	class:pcl::HDLGrabber
hdl_read_socket_service_	include/pcl/io/hdl_grabber.h	/^      boost::asio::io_service hdl_read_socket_service_;$/;"	m	class:pcl::HDLGrabber
header	include/map_msgs/OccupancyGridUpdate.h	/^  _header_type header;$/;"	m	struct:map_msgs::OccupancyGridUpdate_
header	include/map_msgs/PointCloud2Update.h	/^  _header_type header;$/;"	m	struct:map_msgs::PointCloud2Update_
header	include/pcl/ModelCoefficients.h	/^    ::pcl::PCLHeader header;$/;"	m	struct:pcl::ModelCoefficients
header	include/pcl/PCLImage.h	/^     ::pcl::PCLHeader  header;$/;"	m	struct:pcl::PCLImage
header	include/pcl/PCLPointCloud2.h	/^    ::pcl::PCLHeader header;$/;"	m	struct:pcl::PCLPointCloud2
header	include/pcl/PointIndices.h	/^    ::pcl::PCLHeader header;$/;"	m	struct:pcl::PointIndices
header	include/pcl/PolygonMesh.h	/^    ::pcl::PCLHeader  header;$/;"	m	struct:pcl::PolygonMesh
header	include/pcl/TextureMesh.h	/^    pcl::PCLHeader  header;$/;"	m	struct:pcl::TextureMesh
header	include/pcl/point_cloud.h	/^      pcl::PCLHeader header;$/;"	m	class:pcl::PointCloud
height	include/map_msgs/OccupancyGridUpdate.h	/^  _height_type height;$/;"	m	struct:map_msgs::OccupancyGridUpdate_
height	include/map_msgs/ProjectedMapInfo.h	/^  _height_type height;$/;"	m	struct:map_msgs::ProjectedMapInfo_
height	include/pcl/PCLImage.h	/^    pcl::uint32_t height;$/;"	m	struct:pcl::PCLImage
height	include/pcl/PCLPointCloud2.h	/^    pcl::uint32_t height;$/;"	m	struct:pcl::PCLPointCloud2
height	include/pcl/point_cloud.h	/^      uint32_t height;$/;"	m	class:pcl::PointCloud
height_	include/costmap_2d/static_layer.h	/^  unsigned int x_, y_, width_, height_;$/;"	m	class:costmap_2d::StaticLayer
height_	include/pcl/io/lzf_image_io.h	/^        uint32_t height_;$/;"	m	class:pcl::io::LZFImageReader
height_variance	include/pcl/impl/point_types.hpp	/^    float height_variance;$/;"	m	struct:pcl::_PointDEM
histogram	include/pcl/impl/point_types.hpp	/^    float histogram[125];$/;"	m	struct:pcl::PFHSignature125
histogram	include/pcl/impl/point_types.hpp	/^    float histogram[16];$/;"	m	struct:pcl::GFPFHSignature16
histogram	include/pcl/impl/point_types.hpp	/^    float histogram[21];$/;"	m	struct:pcl::GRSDSignature21
histogram	include/pcl/impl/point_types.hpp	/^    float histogram[250];$/;"	m	struct:pcl::PFHRGBSignature250
histogram	include/pcl/impl/point_types.hpp	/^    float histogram[308];$/;"	m	struct:pcl::VFHSignature308
histogram	include/pcl/impl/point_types.hpp	/^    float histogram[33];$/;"	m	struct:pcl::FPFHSignature33
histogram	include/pcl/impl/point_types.hpp	/^    float histogram[640];$/;"	m	struct:pcl::ESFSignature640
histogram	include/pcl/impl/point_types.hpp	/^    float histogram[N];$/;"	m	struct:pcl::Histogram
histogram_	include/pcl/common/feature_histogram.h	/^      std::vector <unsigned> histogram_;$/;"	m	class:pcl::FeatureHistogram
horizontalOffsetCorrection	include/pcl/io/hdl_grabber.h	/^          double horizontalOffsetCorrection;$/;"	m	struct:pcl::HDLGrabber::HDLLaserCorrection
host_byte_order	include/pcl/io/ply/byte_order.h	/^        host_byte_order = big_endian_byte_order,$/;"	e	enum:pcl::io::ply::byte_order
i	include/pcl/common/fft/kiss_fft.h	/^    kiss_fft_scalar i;$/;"	m	struct:__anon47
image_	include/pcl/io/dinast_grabber.h	/^      unsigned char *image_;$/;"	m	class:pcl::DinastGrabber
image_callback_	include/pcl/io/openni_camera/openni_device.h	/^      std::map<CallbackHandle, ActualImageCallbackFunction> image_callback_;$/;"	m	class:openni_wrapper::OpenNIDevice
image_callback_handle	include/pcl/io/oni_grabber.h	/^      openni_wrapper::OpenNIDevice::CallbackHandle image_callback_handle;$/;"	m	class:pcl::ONIGrabber
image_callback_handle	include/pcl/io/openni_grabber.h	/^      openni_wrapper::OpenNIDevice::CallbackHandle image_callback_handle;$/;"	m	class:pcl::OpenNIGrabber
image_callback_handle_	include/pcl/io/openni2_grabber.h	/^        pcl::io::openni2::OpenNI2Device::CallbackHandle image_callback_handle_;$/;"	m	class:pcl::io::OpenNI2Grabber
image_callback_handle_	include/pcl/io/openni_camera/openni_device.h	/^      XnCallbackHandle image_callback_handle_;$/;"	m	class:openni_wrapper::OpenNIDevice
image_callback_handle_counter_	include/pcl/io/openni_camera/openni_device.h	/^      OpenNIDevice::CallbackHandle image_callback_handle_counter_;$/;"	m	class:openni_wrapper::OpenNIDevice
image_condition_	include/pcl/io/openni_camera/openni_device.h	/^      boost::condition_variable image_condition_;$/;"	m	class:openni_wrapper::OpenNIDevice
image_depth_image_signal_	include/pcl/io/oni_grabber.h	/^      boost::signals2::signal<sig_cb_openni_image_depth_image>* image_depth_image_signal_;$/;"	m	class:pcl::ONIGrabber
image_depth_image_signal_	include/pcl/io/openni2_grabber.h	/^        boost::signals2::signal<sig_cb_openni_image_depth_image>* image_depth_image_signal_;$/;"	m	class:pcl::io::OpenNI2Grabber
image_depth_image_signal_	include/pcl/io/openni_grabber.h	/^      boost::signals2::signal<sig_cb_openni_image_depth_image>* image_depth_image_signal_;$/;"	m	class:pcl::OpenNIGrabber
image_depth_image_signal_	include/pcl/io/pcd_grabber.h	/^      boost::signals2::signal<void (const boost::shared_ptr<openni_wrapper::Image>&, const boost::shared_ptr<openni_wrapper::DepthImage>&, float constant)>*     image_depth_image_signal_;$/;"	m	class:pcl::PCDGrabber
image_generator_	include/pcl/io/openni_camera/openni_device.h	/^      xn::ImageGenerator image_generator_;$/;"	m	class:openni_wrapper::OpenNIDevice
image_height_	include/pcl/io/dinast_grabber.h	/^      int image_height_;$/;"	m	class:pcl::DinastGrabber
image_height_	include/pcl/io/oni_grabber.h	/^      unsigned image_height_;$/;"	m	class:pcl::ONIGrabber
image_height_	include/pcl/io/openni2_grabber.h	/^        unsigned image_height_;$/;"	m	class:pcl::io::OpenNI2Grabber
image_height_	include/pcl/io/openni_grabber.h	/^      unsigned image_height_;$/;"	m	class:pcl::OpenNIGrabber
image_md_	include/pcl/io/openni_camera/openni_image.h	/^    boost::shared_ptr<xn::ImageMetaData> image_md_;$/;"	m	class:openni_wrapper::Image
image_mutex_	include/pcl/io/openni_camera/openni_device.h	/^      mutable boost::mutex image_mutex_;$/;"	m	class:openni_wrapper::OpenNIDevice
image_node	include/pcl/io/openni_camera/openni_driver.h	/^      boost::shared_ptr<xn::NodeInfo> image_node;$/;"	m	struct:openni_wrapper::OpenNIDriver::DeviceContext
image_offset_x_	include/pcl/range_image/range_image.h	/^      int image_offset_x_, image_offset_y_;    \/**< Position of the top left corner of the range image compared to$/;"	m	class:pcl::RangeImage
image_offset_y_	include/pcl/range_image/range_image.h	/^      int image_offset_x_, image_offset_y_;    \/**< Position of the top left corner of the range image compared to$/;"	m	class:pcl::RangeImage
image_required_	include/pcl/io/openni2_grabber.h	/^        bool image_required_;$/;"	m	class:pcl::io::OpenNI2Grabber
image_required_	include/pcl/io/openni_grabber.h	/^      bool image_required_;$/;"	m	class:pcl::OpenNIGrabber
image_signal_	include/pcl/io/davidsdk_grabber.h	/^      boost::signals2::signal<sig_cb_davidsdk_image>* image_signal_;$/;"	m	class:pcl::DavidSDKGrabber
image_signal_	include/pcl/io/oni_grabber.h	/^      boost::signals2::signal<sig_cb_openni_image >*            image_signal_;$/;"	m	class:pcl::ONIGrabber
image_signal_	include/pcl/io/openni2_grabber.h	/^        boost::signals2::signal<sig_cb_openni_image>* image_signal_;$/;"	m	class:pcl::io::OpenNI2Grabber
image_signal_	include/pcl/io/openni_grabber.h	/^      boost::signals2::signal<sig_cb_openni_image>* image_signal_;$/;"	m	class:pcl::OpenNIGrabber
image_signal_	include/pcl/io/pcd_grabber.h	/^      boost::signals2::signal<void (const boost::shared_ptr<openni_wrapper::Image>&)>*     image_signal_;$/;"	m	class:pcl::PCDGrabber
image_size_	include/pcl/io/dinast_grabber.h	/^      int image_size_;$/;"	m	class:pcl::DinastGrabber
image_stream_running_	include/pcl/io/openni_camera/openni_device_oni.h	/^    bool image_stream_running_;$/;"	m	class:openni_wrapper::DeviceONI
image_thread_	include/pcl/io/openni_camera/openni_device.h	/^      boost::thread image_thread_;$/;"	m	class:openni_wrapper::OpenNIDevice
image_type_identifier_	include/pcl/io/lzf_image_io.h	/^        std::string image_type_identifier_;$/;"	m	class:pcl::io::LZFImageReader
image_width_	include/pcl/io/dinast_grabber.h	/^      int image_width_;$/;"	m	class:pcl::DinastGrabber
image_width_	include/pcl/io/oni_grabber.h	/^      unsigned image_width_;$/;"	m	class:pcl::ONIGrabber
image_width_	include/pcl/io/openni2_grabber.h	/^        unsigned image_width_;$/;"	m	class:pcl::io::OpenNI2Grabber
image_width_	include/pcl/io/openni_grabber.h	/^      unsigned image_width_;$/;"	m	class:pcl::OpenNIGrabber
images_signal_	include/pcl/io/ensenso_grabber.h	/^      boost::signals2::signal<sig_cb_ensenso_images>* images_signal_;$/;"	m	class:pcl::EnsensoGrabber
impl_	include/pcl/io/image_grabber.h	/^    ImageGrabberImpl* impl_;$/;"	m	class:pcl::ImageGrabberBase
impl_	include/pcl/io/pcd_grabber.h	/^      PCDGrabberImpl* impl_;$/;"	m	class:pcl::PCDGrabberBase
incomingMap	src/static_layer.cpp	/^void StaticLayer::incomingMap()$/;"	f	class:costmap_2d::StaticLayer
incomingUpdate	src/static_layer.cpp	/^void StaticLayer::incomingUpdate()$/;"	f	class:costmap_2d::StaticLayer
increase	include/pcl/common/pca.h	/^        increase, $/;"	e	enum:pcl::PCA::FLAG
indexToCells	include/costmap_2d/costmap_2d.h	/^  inline void indexToCells(unsigned int index, unsigned int& mx, unsigned int& my) const$/;"	f	class:costmap_2d::Costmap2D
index_	include/costmap_2d/inflation_layer.h	/^  unsigned int index_;$/;"	m	class:costmap_2d::CellData
index_match	include/pcl/correspondence.h	/^    int index_match;$/;"	m	struct:pcl::Correspondence
index_query	include/pcl/correspondence.h	/^    int index_query;$/;"	m	struct:pcl::Correspondence
indices	include/pcl/PointIndices.h	/^    std::vector<int> indices;$/;"	m	struct:pcl::PointIndices
indices_	include/pcl/impl/cloud_iterator.hpp	/^        std::vector<int> indices_;$/;"	m	class:pcl::ConstCloudIterator::ConstIteratorIdx
indices_	include/pcl/impl/cloud_iterator.hpp	/^        std::vector<int> indices_;$/;"	m	class:pcl::IteratorIdx
indices_	include/pcl/pcl_base.h	/^      IndicesPtr indices_;$/;"	m	class:pcl::PCLBase
inflation_access_	include/costmap_2d/inflation_layer.h	/^  boost::recursive_mutex* inflation_access_;$/;"	m	class:costmap_2d::InflationLayer
inflation_queue_	include/costmap_2d/inflation_layer.h	/^  std::priority_queue<CellData> inflation_queue_;$/;"	m	class:costmap_2d::InflationLayer
inflation_radius_	include/costmap_2d/inflation_layer.h	/^  double inflation_radius_, inscribed_radius_, weight_;$/;"	m	class:costmap_2d::InflationLayer
infoCallback	include/pcl/io/ply_io.h	/^      infoCallback (const std::string& filename, std::size_t line_number, const std::string& message)$/;"	f	class:pcl::PLYReader
info_arch	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_arch	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_callback	include/pcl/io/ply/ply_parser.h	/^inline void pcl::io::ply::ply_parser::info_callback (const info_callback_type& info_callback)$/;"	f	class:pcl::io::ply::ply_parser
info_callback_	include/pcl/io/ply/ply_parser.h	/^          info_callback_type info_callback_;$/;"	m	class:pcl::io::ply::ply_parser
info_callback_type	include/pcl/io/ply/ply_parser.h	/^          typedef boost::function<void (std::size_t, const std::string&)> info_callback_type;$/;"	t	class:pcl::io::ply::ply_parser
info_compiler	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_compiler	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_platform	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_platform	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_version	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	/^char const info_version[] = {$/;"	v
info_version	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version[] = {$/;"	v
initCompute	include/pcl/common/impl/pca.hpp	/^pcl::PCA<PointT>::initCompute () $/;"	f	class:pcl::PCA
initCompute	include/pcl/impl/pcl_base.hpp	/^pcl::PCLBase<PointT>::initCompute ()$/;"	f	class:pcl::PCLBase
initMaps	src/costmap_2d.cpp	/^void Costmap2D::initMaps(unsigned int size_x, unsigned int size_y)$/;"	f	class:costmap_2d::Costmap2D
init_	include/pcl/io/openni2/openni_shift_to_depth_conversion.h	/^      bool init_;$/;"	m	class:openni_wrapper::ShiftToDepthConverter
init_	include/pcl/io/openni_camera/openni_device.h	/^        bool init_;$/;"	m	struct:openni_wrapper::OpenNIDevice::ShiftConversion
init_	include/pcl/io/openni_camera/openni_shift_to_depth_conversion.h	/^      bool init_;$/;"	m	class:openni_wrapper::ShiftToDepthConverter
initialize	src/layer.cpp	/^void Layer::initialize(LayeredCostmap* parent, std::string name)$/;"	f	class:costmap_2d::Layer
initialized_	include/costmap_2d/costmap_2d_ros.h	/^  bool stop_updates_, initialized_, stopped_, robot_stopped_;$/;"	m	class:costmap_2d::Costmap2DROS
initialized_	include/costmap_2d/layered_costmap.h	/^  bool initialized_;$/;"	m	class:costmap_2d::LayeredCostmap
input_	include/pcl/pcl_base.h	/^      PCLPointCloud2ConstPtr input_;$/;"	m	class:pcl::PCLBase
input_	include/pcl/pcl_base.h	/^      PointCloudConstPtr input_;$/;"	m	class:pcl::PCLBase
inscribed_radius_	include/costmap_2d/inflation_layer.h	/^  double inflation_radius_, inscribed_radius_, weight_;$/;"	m	class:costmap_2d::InflationLayer
inscribed_radius_	include/costmap_2d/layered_costmap.h	/^  double circumscribed_radius_, inscribed_radius_;$/;"	m	class:costmap_2d::LayeredCostmap
insert	include/pcl/point_cloud.h	/^      insert (iterator position, InputIterator first, InputIterator last)$/;"	f	class:pcl::PointCloud
insert	include/pcl/point_cloud.h	/^      insert (iterator position, const PointT& pt)$/;"	f	class:pcl::PointCloud
insert	include/pcl/point_cloud.h	/^      insert (iterator position, size_t n, const PointT& pt)$/;"	f	class:pcl::PointCloud
int16	include/pcl/io/ply/ply.h	/^      typedef boost::int16_t int16;$/;"	t	namespace:pcl::io::ply
int32	include/pcl/io/ply/ply.h	/^      typedef boost::int32_t int32;$/;"	t	namespace:pcl::io::ply
int8	include/pcl/io/ply/ply.h	/^      typedef boost::int8_t int8;$/;"	t	namespace:pcl::io::ply
integrateFarRanges	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::integrateFarRanges (const PointCloudType& far_ranges)$/;"	f	class:pcl::RangeImage
intensity	include/pcl/common/impl/accumulators.hpp	/^      float intensity;$/;"	m	struct:pcl::detail::AccumulatorIntensity
intensity	include/pcl/impl/point_types.hpp	/^        float intensity;$/;"	m	struct:pcl::_PointXYZI::__anon17::__anon18
intensity	include/pcl/impl/point_types.hpp	/^        float intensity;$/;"	m	struct:pcl::_PointXYZINormal::__anon29::__anon30
intensity	include/pcl/impl/point_types.hpp	/^    float intensity;$/;"	m	struct:pcl::_PointDEM
intensity	include/pcl/io/hdl_grabber.h	/^          unsigned char intensity;$/;"	m	struct:pcl::HDLGrabber::HDLLaserReturn
intensity_variance	include/pcl/impl/point_types.hpp	/^    float intensity_variance;$/;"	m	struct:pcl::_PointDEM
internal	include/pcl/common/impl/projection_matrix.hpp	/^    namespace internal$/;"	n	namespace:pcl::common
internal	include/pcl/pcl_tests.h	/^    namespace internal$/;"	n	namespace:pcl::test
interpretValue	src/static_layer.cpp	/^unsigned char StaticLayer::interpretValue(unsigned char value)$/;"	f	class:costmap_2d::StaticLayer
intersect	include/pcl/for_each_type.h	/^  struct intersect $/;"	s	namespace:pcl
intersects	src/costmap_math.cpp	/^bool intersects(std::vector<geometry_msgs::Point>& polygon, float testx, float testy)$/;"	f
intersects	src/costmap_math.cpp	/^bool intersects(std::vector<geometry_msgs::Point>& polygon1, std::vector<geometry_msgs::Point>& polygon2)$/;"	f
intersects_helper	src/costmap_math.cpp	/^bool intersects_helper(std::vector<geometry_msgs::Point>& polygon1, std::vector<geometry_msgs::Point>& polygon2)$/;"	f
interval_	include/pcl/common/time_trigger.h	/^      double interval_;$/;"	m	class:pcl::TimeTrigger
invXform	include/tf/LinearMath/Transform.h	/^Transform::invXform(const Vector3& inVec) const$/;"	f	class:tf::Transform
invalid	include/pcl/io/impl/buffers.hpp	/^  static T invalid () { return 0; }$/;"	f	struct:buffer_traits
invalid	include/pcl/io/impl/buffers.hpp	/^  static double invalid () { return std::numeric_limits<double>::quiet_NaN (); };$/;"	f	struct:buffer_traits
invalid	include/pcl/io/impl/buffers.hpp	/^  static float invalid () { return std::numeric_limits<float>::quiet_NaN (); };$/;"	f	struct:buffer_traits
inverse	include/pcl/common/fft/_kiss_fft_guts.h	/^    int inverse;$/;"	m	struct:kiss_fft_state
inverse	include/tf/LinearMath/Matrix3x3.h	/^Matrix3x3::inverse() const$/;"	f	class:tf::Matrix3x3
inverse	include/tf/LinearMath/Quaternion.h	/^	Quaternion inverse() const$/;"	f	class:tf::Quaternion
inverse	include/tf/LinearMath/Quaternion.h	/^inverse(const Quaternion& q) $/;"	f	namespace:tf
inverse	include/tf/LinearMath/Transform.h	/^	Transform inverse() const$/;"	f	class:tf::Transform
inverseTimes	include/tf/LinearMath/Transform.h	/^Transform::inverseTimes(const Transform& t) const  $/;"	f	class:tf::Transform
invert2x2	include/pcl/common/impl/eigen.hpp	/^pcl::invert2x2 (const Matrix& matrix, Matrix& inverse)$/;"	f	class:pcl
invert3x3Matrix	include/pcl/common/impl/eigen.hpp	/^pcl::invert3x3Matrix (const Matrix& matrix, Matrix& inverse)$/;"	f	class:pcl
invert3x3SymMatrix	include/pcl/common/impl/eigen.hpp	/^pcl::invert3x3SymMatrix (const Matrix& matrix, Matrix& inverse)$/;"	f	class:pcl
io	include/pcl/common/io.h	/^  namespace io $/;"	n	namespace:pcl
io	include/pcl/io/auto_io.h	/^  namespace io$/;"	n	namespace:pcl
io	include/pcl/io/buffers.h	/^  namespace io$/;"	n	namespace:pcl
io	include/pcl/io/debayer.h	/^  namespace io$/;"	n	namespace:pcl
io	include/pcl/io/depth_sense/depth_sense_device_manager.h	/^  namespace io$/;"	n	namespace:pcl
io	include/pcl/io/depth_sense/depth_sense_grabber_impl.h	/^  namespace io$/;"	n	namespace:pcl
io	include/pcl/io/depth_sense_grabber.h	/^  namespace io { namespace depth_sense { struct DepthSenseGrabberImpl; } }$/;"	n	namespace:pcl
io	include/pcl/io/ifs_io.h	/^  namespace io$/;"	n	namespace:pcl
io	include/pcl/io/image.h	/^  namespace io$/;"	n	namespace:pcl
io	include/pcl/io/image_depth.h	/^  namespace io$/;"	n	namespace:pcl
io	include/pcl/io/image_ir.h	/^  namespace io$/;"	n	namespace:pcl
io	include/pcl/io/image_metadata_wrapper.h	/^  namespace io$/;"	n	namespace:pcl
io	include/pcl/io/image_rgb24.h	/^  namespace io$/;"	n	namespace:pcl
io	include/pcl/io/image_yuv422.h	/^  namespace io$/;"	n	namespace:pcl
io	include/pcl/io/impl/auto_io.hpp	/^  namespace io$/;"	n	namespace:pcl
io	include/pcl/io/io_exception.h	/^  namespace io$/;"	n	namespace:pcl
io	include/pcl/io/lzf_image_io.h	/^  namespace io$/;"	n	namespace:pcl
io	include/pcl/io/obj_io.h	/^  namespace io$/;"	n	namespace:pcl
io	include/pcl/io/openni2/openni2_convert.h	/^  namespace io$/;"	n	namespace:pcl
io	include/pcl/io/openni2/openni2_device.h	/^  namespace io$/;"	n	namespace:pcl
io	include/pcl/io/openni2/openni2_device_info.h	/^  namespace io$/;"	n	namespace:pcl
io	include/pcl/io/openni2/openni2_device_manager.h	/^  namespace io$/;"	n	namespace:pcl
io	include/pcl/io/openni2/openni2_frame_listener.h	/^  namespace io$/;"	n	namespace:pcl
io	include/pcl/io/openni2/openni2_metadata_wrapper.h	/^  namespace io$/;"	n	namespace:pcl
io	include/pcl/io/openni2/openni2_timer_filter.h	/^  namespace io$/;"	n	namespace:pcl
io	include/pcl/io/openni2/openni2_video_mode.h	/^  namespace io$/;"	n	namespace:pcl
io	include/pcl/io/openni2_grabber.h	/^  namespace io$/;"	n	namespace:pcl
io	include/pcl/io/pcd_io.h	/^  namespace io$/;"	n	namespace:pcl
io	include/pcl/io/ply/byte_order.h	/^  namespace io$/;"	n	namespace:pcl
io	include/pcl/io/ply/io_operators.h	/^  namespace io$/;"	n	namespace:pcl
io	include/pcl/io/ply/ply.h	/^  namespace io$/;"	n	namespace:pcl
io	include/pcl/io/ply/ply_parser.h	/^  namespace io$/;"	n	namespace:pcl
io	include/pcl/io/ply_io.h	/^  namespace io$/;"	n	namespace:pcl
io	include/pcl/io/png_io.h	/^  namespace io$/;"	n	namespace:pcl
io	include/pcl/io/point_cloud_image_extractors.h	/^  namespace io$/;"	n	namespace:pcl
io	include/pcl/io/real_sense/real_sense_device_manager.h	/^  namespace io$/;"	n	namespace:pcl
io	include/pcl/io/real_sense_grabber.h	/^  namespace io$/;"	n	namespace:pcl
io	include/pcl/io/tar.h	/^  namespace io$/;"	n	namespace:pcl
io	include/pcl/io/vtk_io.h	/^  namespace io$/;"	n	namespace:pcl
io	include/pcl/io/vtk_lib_io.h	/^  namespace io$/;"	n	namespace:pcl
io_operators	include/pcl/io/ply/io_operators.h	/^      namespace io_operators $/;"	n	namespace:pcl::io::ply
io_service_	include/pcl/io/robot_eye_grabber.h	/^      boost::asio::io_service io_service_;$/;"	m	class:pcl::RobotEyeGrabber
ir_buffer_	include/pcl/io/openni_grabber.h	/^      mutable boost::shared_array<unsigned short> ir_buffer_;$/;"	m	class:pcl::OpenNIGrabber
ir_callback_	include/pcl/io/openni_camera/openni_device.h	/^      std::map<CallbackHandle, ActualIRImageCallbackFunction> ir_callback_;$/;"	m	class:openni_wrapper::OpenNIDevice
ir_callback_handle	include/pcl/io/oni_grabber.h	/^      openni_wrapper::OpenNIDevice::CallbackHandle ir_callback_handle;$/;"	m	class:pcl::ONIGrabber
ir_callback_handle	include/pcl/io/openni_grabber.h	/^      openni_wrapper::OpenNIDevice::CallbackHandle ir_callback_handle;$/;"	m	class:pcl::OpenNIGrabber
ir_callback_handle_	include/pcl/io/openni2_grabber.h	/^        pcl::io::openni2::OpenNI2Device::CallbackHandle ir_callback_handle_;$/;"	m	class:pcl::io::OpenNI2Grabber
ir_callback_handle_	include/pcl/io/openni_camera/openni_device.h	/^      XnCallbackHandle ir_callback_handle_;$/;"	m	class:openni_wrapper::OpenNIDevice
ir_callback_handle_counter_	include/pcl/io/openni_camera/openni_device.h	/^      OpenNIDevice::CallbackHandle ir_callback_handle_counter_;$/;"	m	class:openni_wrapper::OpenNIDevice
ir_condition_	include/pcl/io/openni_camera/openni_device.h	/^      boost::condition_variable ir_condition_;$/;"	m	class:openni_wrapper::OpenNIDevice
ir_depth_image_signal_	include/pcl/io/oni_grabber.h	/^      boost::signals2::signal<sig_cb_openni_ir_depth_image>*    ir_depth_image_signal_;$/;"	m	class:pcl::ONIGrabber
ir_depth_image_signal_	include/pcl/io/openni2_grabber.h	/^        boost::signals2::signal<sig_cb_openni_ir_depth_image>* ir_depth_image_signal_;$/;"	m	class:pcl::io::OpenNI2Grabber
ir_depth_image_signal_	include/pcl/io/openni_grabber.h	/^      boost::signals2::signal<sig_cb_openni_ir_depth_image>* ir_depth_image_signal_;$/;"	m	class:pcl::OpenNIGrabber
ir_frame_listener	include/pcl/io/openni2/openni2_device.h	/^          boost::shared_ptr<OpenNI2FrameListener> ir_frame_listener;$/;"	m	class:pcl::io::openni2::OpenNI2Device
ir_generator_	include/pcl/io/openni_camera/openni_device.h	/^      xn::IRGenerator ir_generator_;$/;"	m	class:openni_wrapper::OpenNIDevice
ir_image_signal_	include/pcl/io/oni_grabber.h	/^      boost::signals2::signal<sig_cb_openni_ir_image >*         ir_image_signal_;$/;"	m	class:pcl::ONIGrabber
ir_image_signal_	include/pcl/io/openni2_grabber.h	/^        boost::signals2::signal<sig_cb_openni_ir_image>* ir_image_signal_;$/;"	m	class:pcl::io::OpenNI2Grabber
ir_image_signal_	include/pcl/io/openni_grabber.h	/^      boost::signals2::signal<sig_cb_openni_ir_image>* ir_image_signal_;$/;"	m	class:pcl::OpenNIGrabber
ir_md_	include/pcl/io/openni_camera/openni_ir_image.h	/^  boost::shared_ptr<xn::IRMetaData> ir_md_;$/;"	m	class:openni_wrapper::IRImage
ir_mutex_	include/pcl/io/openni_camera/openni_device.h	/^      mutable boost::mutex ir_mutex_;$/;"	m	class:openni_wrapper::OpenNIDevice
ir_node	include/pcl/io/openni_camera/openni_driver.h	/^      boost::shared_ptr<xn::NodeInfo> ir_node;$/;"	m	struct:openni_wrapper::OpenNIDriver::DeviceContext
ir_required_	include/pcl/io/openni2_grabber.h	/^        bool ir_required_;$/;"	m	class:pcl::io::OpenNI2Grabber
ir_required_	include/pcl/io/openni_grabber.h	/^      bool ir_required_;$/;"	m	class:pcl::OpenNIGrabber
ir_resize_buffer_	include/pcl/io/openni2_grabber.h	/^        std::vector<uint16_t> ir_resize_buffer_;$/;"	m	class:pcl::io::OpenNI2Grabber
ir_stream_running_	include/pcl/io/openni_camera/openni_device_oni.h	/^    bool ir_stream_running_;$/;"	m	class:openni_wrapper::DeviceONI
ir_sync_	include/pcl/io/oni_grabber.h	/^      Synchronizer<boost::shared_ptr<openni_wrapper::IRImage>, boost::shared_ptr<openni_wrapper::DepthImage> > ir_sync_;$/;"	m	class:pcl::ONIGrabber
ir_sync_	include/pcl/io/openni2_grabber.h	/^        Synchronizer<pcl::io::openni2::IRImage::Ptr, pcl::io::openni2::DepthImage::Ptr > ir_sync_;$/;"	m	class:pcl::io::OpenNI2Grabber
ir_sync_	include/pcl/io/openni_grabber.h	/^      Synchronizer<boost::shared_ptr<openni_wrapper::IRImage>, boost::shared_ptr<openni_wrapper::DepthImage> > ir_sync_;$/;"	m	class:pcl::OpenNIGrabber
ir_thread_	include/pcl/io/openni_camera/openni_device.h	/^      boost::thread ir_thread_;$/;"	m	class:openni_wrapper::OpenNIDevice
ir_video_modes_	include/pcl/io/openni2/openni2_device.h	/^          mutable std::vector<OpenNI2VideoMode> ir_video_modes_;$/;"	m	class:pcl::io::openni2::OpenNI2Device
ir_video_started_	include/pcl/io/openni2/openni2_device.h	/^          bool ir_video_started_;$/;"	m	class:pcl::io::openni2::OpenNI2Device
ir_video_stream_	include/pcl/io/openni2/openni2_device.h	/^          mutable boost::shared_ptr<openni::VideoStream> ir_video_stream_;$/;"	m	class:pcl::io::openni2::OpenNI2Device
isBetterCorrespondence	include/pcl/correspondence.h	/^  isBetterCorrespondence (const Correspondence &pc1, const Correspondence &pc2)$/;"	f	namespace:pcl
isCaptured	include/pcl/io/depth_sense/depth_sense_device_manager.h	/^          isCaptured (const std::string& sn) const$/;"	f	class:pcl::io::depth_sense::DepthSenseDeviceManager
isCaptured	include/pcl/io/real_sense/real_sense_device_manager.h	/^            inline bool isCaptured () { return (!device_ptr.expired ()); }$/;"	f	struct:pcl::io::real_sense::RealSenseDeviceManager::DeviceInfo
isCurrent	include/costmap_2d/costmap_2d_ros.h	/^  bool isCurrent()$/;"	f	class:costmap_2d::Costmap2DROS
isCurrent	include/costmap_2d/layer.h	/^  bool isCurrent() const$/;"	f	class:costmap_2d::Layer
isCurrent	src/layered_costmap.cpp	/^bool LayeredCostmap::isCurrent()$/;"	f	class:costmap_2d::LayeredCostmap
isCurrent	src/observation_buffer.cpp	/^bool ObservationBuffer::isCurrent() const$/;"	f	class:costmap_2d::ObservationBuffer
isDiscretized	include/costmap_2d/costmap_layer.h	/^  bool isDiscretized()$/;"	f	class:costmap_2d::CostmapLayer
isDiscretized	include/costmap_2d/inflation_layer.h	/^  virtual bool isDiscretized()$/;"	f	class:costmap_2d::InflationLayer
isEmpty	include/pcl/io/impl/synchronized_queue.hpp	/^      isEmpty () const$/;"	f	class:pcl::SynchronizedQueue
isFile	include/pcl/io/openni2/openni2_device.h	/^          isFile()$/;"	f	class:pcl::io::openni2::OpenNI2Device
isFinite	include/pcl/common/point_tests.h	/^  isFinite (const Eigen::internal::workaround_msvc_stl_support<PointT> &pt)$/;"	f	namespace:pcl
isFinite	include/pcl/common/point_tests.h	/^  isFinite (const PointT &pt)$/;"	f	namespace:pcl
isFinite	include/pcl/common/point_tests.h	/^  isFinite<pcl::BorderDescription> (const pcl::BorderDescription &p)$/;"	f	namespace:pcl
isFinite	include/pcl/common/point_tests.h	/^  isFinite<pcl::Normal> (const pcl::Normal &n)$/;"	f	namespace:pcl
isFinite	include/pcl/common/point_tests.h	/^  isFinite<pcl::PointXY> (const pcl::PointXY &p)$/;"	f	namespace:pcl
isFinite	include/pcl/common/point_tests.h	/^  template<> inline bool isFinite<pcl::Axis> (const pcl::Axis&) { return (true); }$/;"	f	namespace:pcl
isFinite	include/pcl/common/point_tests.h	/^  template<> inline bool isFinite<pcl::BRISKSignature512> (const pcl::BRISKSignature512&) { return (true); }$/;"	f	namespace:pcl
isFinite	include/pcl/common/point_tests.h	/^  template<> inline bool isFinite<pcl::Boundary> (const pcl::Boundary&) { return (true); }$/;"	f	namespace:pcl
isFinite	include/pcl/common/point_tests.h	/^  template<> inline bool isFinite<pcl::ESFSignature640> (const pcl::ESFSignature640&) { return (true); }$/;"	f	namespace:pcl
isFinite	include/pcl/common/point_tests.h	/^  template<> inline bool isFinite<pcl::FPFHSignature33> (const pcl::FPFHSignature33&) { return (true); }$/;"	f	namespace:pcl
isFinite	include/pcl/common/point_tests.h	/^  template<> inline bool isFinite<pcl::Intensity> (const pcl::Intensity&) { return (true); }$/;"	f	namespace:pcl
isFinite	include/pcl/common/point_tests.h	/^  template<> inline bool isFinite<pcl::IntensityGradient> (const pcl::IntensityGradient&) { return (true); }$/;"	f	namespace:pcl
isFinite	include/pcl/common/point_tests.h	/^  template<> inline bool isFinite<pcl::Label> (const pcl::Label&) { return (true); }$/;"	f	namespace:pcl
isFinite	include/pcl/common/point_tests.h	/^  template<> inline bool isFinite<pcl::MomentInvariants> (const pcl::MomentInvariants&) { return (true); }$/;"	f	namespace:pcl
isFinite	include/pcl/common/point_tests.h	/^  template<> inline bool isFinite<pcl::NormalBasedSignature12> (const pcl::NormalBasedSignature12&) { return (true); }$/;"	f	namespace:pcl
isFinite	include/pcl/common/point_tests.h	/^  template<> inline bool isFinite<pcl::PFHRGBSignature250> (const pcl::PFHRGBSignature250&) { return (true); }$/;"	f	namespace:pcl
isFinite	include/pcl/common/point_tests.h	/^  template<> inline bool isFinite<pcl::PFHSignature125> (const pcl::PFHSignature125&) { return (true); }$/;"	f	namespace:pcl
isFinite	include/pcl/common/point_tests.h	/^  template<> inline bool isFinite<pcl::PPFRGBSignature> (const pcl::PPFRGBSignature&) { return (true); }$/;"	f	namespace:pcl
isFinite	include/pcl/common/point_tests.h	/^  template<> inline bool isFinite<pcl::PPFSignature> (const pcl::PPFSignature&) { return (true); }$/;"	f	namespace:pcl
isFinite	include/pcl/common/point_tests.h	/^  template<> inline bool isFinite<pcl::PrincipalCurvatures> (const pcl::PrincipalCurvatures&) { return (true); }$/;"	f	namespace:pcl
isFinite	include/pcl/common/point_tests.h	/^  template<> inline bool isFinite<pcl::PrincipalRadiiRSD> (const pcl::PrincipalRadiiRSD&) { return (true); }$/;"	f	namespace:pcl
isFinite	include/pcl/common/point_tests.h	/^  template<> inline bool isFinite<pcl::RGB> (const pcl::RGB&) { return (true); }$/;"	f	namespace:pcl
isFinite	include/pcl/common/point_tests.h	/^  template<> inline bool isFinite<pcl::ReferenceFrame> (const pcl::ReferenceFrame&) { return (true); }$/;"	f	namespace:pcl
isFinite	include/pcl/common/point_tests.h	/^  template<> inline bool isFinite<pcl::SHOT1344> (const pcl::SHOT1344&) { return (true); }$/;"	f	namespace:pcl
isFinite	include/pcl/common/point_tests.h	/^  template<> inline bool isFinite<pcl::SHOT352> (const pcl::SHOT352&) { return (true); }$/;"	f	namespace:pcl
isFinite	include/pcl/common/point_tests.h	/^  template<> inline bool isFinite<pcl::ShapeContext1980> (const pcl::ShapeContext1980&) { return (true); }$/;"	f	namespace:pcl
isFinite	include/pcl/common/point_tests.h	/^  template<> inline bool isFinite<pcl::UniqueShapeContext1960> (const pcl::UniqueShapeContext1960&) { return (true); }$/;"	f	namespace:pcl
isFinite	include/pcl/common/point_tests.h	/^  template<> inline bool isFinite<pcl::VFHSignature308> (const pcl::VFHSignature308&) { return (true); }$/;"	f	namespace:pcl
isInImage	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::isInImage (int x, int y) const$/;"	f	class:pcl::RangeImage
isInitialized	include/costmap_2d/layered_costmap.h	/^  bool isInitialized()$/;"	f	class:costmap_2d::LayeredCostmap
isInitialized	include/pcl/io/openni2/openni_shift_to_depth_conversion.h	/^      inline bool isInitialized() const$/;"	f	class:openni_wrapper::ShiftToDepthConverter
isInitialized	include/pcl/io/openni_camera/openni_shift_to_depth_conversion.h	/^      inline bool isInitialized() const$/;"	f	class:openni_wrapper::ShiftToDepthConverter
isMaxRange	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::isMaxRange (int x, int y) const$/;"	f	class:pcl::RangeImage
isNearlyZero	include/pcl/common/polynomial_calculations.h	/^      isNearlyZero (real d) const $/;"	f	class:pcl::PolynomialCalculationsT
isObserved	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::isObserved (int x, int y) const$/;"	f	class:pcl::RangeImage
isOrganized	include/pcl/point_cloud.h	/^      isOrganized () const$/;"	f	class:pcl::PointCloud
isRolling	include/costmap_2d/layered_costmap.h	/^  bool isRolling()$/;"	f	class:costmap_2d::LayeredCostmap
isSamePointType	include/pcl/common/io.h	/^  isSamePointType ()$/;"	f	namespace:pcl
isSizeLocked	include/costmap_2d/layered_costmap.h	/^  bool isSizeLocked()$/;"	f	class:costmap_2d::LayeredCostmap
isSynchronizationSupported	include/pcl/io/openni2/openni2_device.h	/^          isSynchronizationSupported ()$/;"	f	class:pcl::io::openni2::OpenNI2Device
isSynchronized	include/pcl/io/openni2/openni2_device.h	/^          isSynchronized ()$/;"	f	class:pcl::io::openni2::OpenNI2Device
isTrackingUnknown	include/costmap_2d/layered_costmap.h	/^  bool isTrackingUnknown()$/;"	f	class:costmap_2d::LayeredCostmap
isTrivial	include/pcl/point_representation.h	/^      inline bool isTrivial() const { return trivial_ && alpha_.empty (); }$/;"	f	class:pcl::PointRepresentation
isValid	include/pcl/impl/cloud_iterator.hpp	/^      bool isValid () const$/;"	f	class:pcl::ConstCloudIterator::ConstIteratorIdx
isValid	include/pcl/impl/cloud_iterator.hpp	/^      bool isValid () const$/;"	f	class:pcl::ConstCloudIterator::DefaultConstIterator
isValid	include/pcl/impl/cloud_iterator.hpp	/^      bool isValid () const$/;"	f	class:pcl::DefaultIterator
isValid	include/pcl/impl/cloud_iterator.hpp	/^      bool isValid () const$/;"	f	class:pcl::IteratorIdx
isValid	include/pcl/impl/cloud_iterator.hpp	/^pcl::CloudIterator<PointT>::isValid () const$/;"	f	class:pcl::CloudIterator
isValid	include/pcl/impl/cloud_iterator.hpp	/^pcl::ConstCloudIterator<PointT>::isValid () const$/;"	f	class:pcl::ConstCloudIterator
isValid	include/pcl/point_representation.h	/^      isValid (const PointT &p) const$/;"	f	class:pcl::PointRepresentation
isValid	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::isValid (int index) const$/;"	f	class:pcl::RangeImage
isValid	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::isValid (int x, int y) const$/;"	f	class:pcl::RangeImage
isValueFinite	include/pcl/io/file_io.h	/^  isValueFinite (const pcl::PCLPointCloud2 &cloud,$/;"	f	namespace:pcl
isZero	include/tf/LinearMath/Vector3.h	/^		TFSIMD_FORCE_INLINE bool isZero() const $/;"	f	class:tf::Vector3
is_bigendian	include/pcl/PCLImage.h	/^    pcl::uint8_t is_bigendian;$/;"	m	struct:pcl::PCLImage
is_bigendian	include/pcl/PCLPointCloud2.h	/^    pcl::uint8_t is_bigendian;$/;"	m	struct:pcl::PCLPointCloud2
is_dense	include/pcl/PCLPointCloud2.h	/^    pcl::uint8_t is_dense;$/;"	m	struct:pcl::PCLPointCloud2
is_dense	include/pcl/point_cloud.h	/^      bool is_dense;$/;"	m	class:pcl::PointCloud
is_invalid	include/pcl/io/impl/buffers.hpp	/^  static bool is_invalid (T value) { return value == invalid (); };$/;"	f	struct:buffer_traits
is_invalid	include/pcl/io/impl/buffers.hpp	/^  static bool is_invalid (double value) { return pcl_isnan (value); };$/;"	f	struct:buffer_traits
is_invalid	include/pcl/io/impl/buffers.hpp	/^  static bool is_invalid (float value) { return pcl_isnan (value); };$/;"	f	struct:buffer_traits
is_running_	include/pcl/io/depth_sense/depth_sense_grabber_impl.h	/^        bool is_running_;$/;"	m	struct:pcl::io::depth_sense::DepthSenseGrabberImpl
is_running_	include/pcl/io/real_sense_grabber.h	/^      bool is_running_;$/;"	m	class:pcl::RealSenseGrabber
iterator	include/pcl/point_cloud.h	/^      typedef typename VectorType::iterator iterator;$/;"	t	class:pcl::PointCloud
iterator_	include/pcl/cloud_iterator.h	/^      Iterator* iterator_;$/;"	m	class:pcl::CloudIterator
iterator_	include/pcl/cloud_iterator.h	/^      Iterator* iterator_;$/;"	m	class:pcl::ConstCloudIterator
iterator_	include/pcl/impl/cloud_iterator.hpp	/^        std::vector<int>::iterator iterator_;$/;"	m	class:pcl::ConstCloudIterator::ConstIteratorIdx
iterator_	include/pcl/impl/cloud_iterator.hpp	/^        std::vector<int>::iterator iterator_;$/;"	m	class:pcl::IteratorIdx
iterator_	include/pcl/impl/cloud_iterator.hpp	/^      typename PointCloud<PointT>::const_iterator iterator_;$/;"	m	class:pcl::ConstCloudIterator::DefaultConstIterator
iterator_	include/pcl/impl/cloud_iterator.hpp	/^      typename PointCloud<PointT>::iterator iterator_;$/;"	m	class:pcl::DefaultIterator
iuid	include/pcl/io/real_sense/real_sense_device_manager.h	/^            pxcUID iuid;$/;"	m	struct:pcl::io::real_sense::RealSenseDeviceManager::DeviceInfo
j1	include/pcl/impl/point_types.hpp	/^    float j1, j2, j3;$/;"	m	struct:pcl::MomentInvariants
j2	include/pcl/impl/point_types.hpp	/^    float j1, j2, j3;$/;"	m	struct:pcl::MomentInvariants
j3	include/pcl/impl/point_types.hpp	/^    float j1, j2, j3;$/;"	m	struct:pcl::MomentInvariants
kf_cexp	include/pcl/common/fft/_kiss_fft_guts.h	141;"	d
kiss_fft_cfg	include/pcl/common/fft/kiss_fft.h	/^typedef struct kiss_fft_state* kiss_fft_cfg;$/;"	t	typeref:struct:kiss_fft_state
kiss_fft_cpx	include/pcl/common/fft/kiss_fft.h	/^}kiss_fft_cpx;$/;"	t	typeref:struct:__anon47
kiss_fft_free	include/pcl/common/fft/kiss_fft.h	111;"	d
kiss_fft_scalar	include/pcl/common/fft/kiss_fft.h	34;"	d
kiss_fft_scalar	include/pcl/common/fft/kiss_fft.h	46;"	d
kiss_fft_scalar	include/pcl/common/fft/kiss_fft.h	48;"	d
kiss_fft_scalar	include/pcl/common/fft/kiss_fft.h	53;"	d
kiss_fft_state	include/pcl/common/fft/_kiss_fft_guts.h	/^struct kiss_fft_state{$/;"	s
kiss_fftr_cfg	include/pcl/common/fft/kiss_fftr.h	/^typedef struct kiss_fftr_state *kiss_fftr_cfg;$/;"	t	typeref:struct:kiss_fftr_state
kiss_fftr_free	include/pcl/common/fft/kiss_fftr.h	41;"	d
kiss_fftr_next_fast_size_real	include/pcl/common/fft/kiss_fft.h	127;"	d
l_x	include/map_msgs/GetMapROIRequest.h	/^  _l_x_type l_x;$/;"	m	struct:map_msgs::GetMapROIRequest_
l_x	include/map_msgs/GetPointMapROIRequest.h	/^  _l_x_type l_x;$/;"	m	struct:map_msgs::GetPointMapROIRequest_
l_y	include/map_msgs/GetMapROIRequest.h	/^  _l_y_type l_y;$/;"	m	struct:map_msgs::GetMapROIRequest_
l_y	include/map_msgs/GetPointMapROIRequest.h	/^  _l_y_type l_y;$/;"	m	struct:map_msgs::GetPointMapROIRequest_
l_z	include/map_msgs/GetPointMapROIRequest.h	/^  _l_z_type l_z;$/;"	m	struct:map_msgs::GetPointMapROIRequest_
label	include/pcl/impl/point_types.hpp	/^        uint32_t label;$/;"	m	struct:pcl::_PointXYZLNormal::__anon31::__anon32
label	include/pcl/impl/point_types.hpp	/^    uint32_t label;$/;"	m	struct:pcl::Label
label	include/pcl/impl/point_types.hpp	/^    uint32_t label;$/;"	m	struct:pcl::_PointXYZL
label	include/pcl/impl/point_types.hpp	/^    uint32_t label;$/;"	m	struct:pcl::_PointXYZRGBL
labels	include/pcl/common/impl/accumulators.hpp	/^      std::map<uint32_t, size_t> labels;$/;"	m	struct:pcl::detail::AccumulatorLabel
laserReturns	include/pcl/io/hdl_grabber.h	/^          HDLLaserReturn laserReturns[HDL_LASER_PER_FIRING];$/;"	m	struct:pcl::HDLGrabber::HDLFiringData
laserScanCallback	src/obstacle_layer.cpp	/^void ObstacleLayer::laserScanCallback(const boost::shared_ptr<ObservationBuffer>& buffer)$/;"	f	class:costmap_2d::ObstacleLayer
laser_corrections_	include/pcl/io/hdl_grabber.h	/^      HDLLaserCorrection laser_corrections_[HDL_MAX_NUM_LASERS];$/;"	m	class:pcl::HDLGrabber
laser_rgb_mapping_	include/pcl/io/hdl_grabber.h	/^      pcl::RGB laser_rgb_mapping_[HDL_MAX_NUM_LASERS];$/;"	m	class:pcl::HDLGrabber
last_azimuth_	include/pcl/io/hdl_grabber.h	/^      unsigned int last_azimuth_;$/;"	m	class:pcl::HDLGrabber
last_max_x_	include/costmap_2d/inflation_layer.h	/^  double last_min_x_, last_min_y_, last_max_x_, last_max_y_;$/;"	m	class:costmap_2d::InflationLayer
last_max_y_	include/costmap_2d/inflation_layer.h	/^  double last_min_x_, last_min_y_, last_max_x_, last_max_y_;$/;"	m	class:costmap_2d::InflationLayer
last_min_x_	include/costmap_2d/inflation_layer.h	/^  double last_min_x_, last_min_y_, last_max_x_, last_max_y_;$/;"	m	class:costmap_2d::InflationLayer
last_min_y_	include/costmap_2d/inflation_layer.h	/^  double last_min_x_, last_min_y_, last_max_x_, last_max_y_;$/;"	m	class:costmap_2d::InflationLayer
last_publish_	include/costmap_2d/costmap_2d_ros.h	/^  ros::Time last_publish_;$/;"	m	class:costmap_2d::Costmap2DROS
last_updated_	include/costmap_2d/observation_buffer.h	/^  ros::Time last_updated_;$/;"	m	class:costmap_2d::ObservationBuffer
layered_costmap_	include/costmap_2d/costmap_2d_ros.h	/^  LayeredCostmap* layered_costmap_;$/;"	m	class:costmap_2d::Costmap2DROS
layered_costmap_	include/costmap_2d/layer.h	/^  LayeredCostmap* layered_costmap_;$/;"	m	class:costmap_2d::Layer
length	include/tf/LinearMath/Quaternion.h	/^	tfScalar length() const$/;"	f	class:tf::Quaternion
length	include/tf/LinearMath/Quaternion.h	/^length(const Quaternion& q) $/;"	f	namespace:tf
length	include/tf/LinearMath/Vector3.h	/^	TFSIMD_FORCE_INLINE tfScalar length() const$/;"	f	class:tf::Vector3
length2	include/tf/LinearMath/Quaternion.h	/^	tfScalar length2() const$/;"	f	class:tf::Quaternion
length2	include/tf/LinearMath/Vector3.h	/^	TFSIMD_FORCE_INLINE tfScalar length2() const$/;"	f	class:tf::Vector3
lerp	include/tf/LinearMath/Vector3.h	/^	TFSIMD_FORCE_INLINE Vector3 lerp(const Vector3& v, const tfScalar& t) const $/;"	f	class:tf::Vector3
lerp	include/tf/LinearMath/Vector3.h	/^lerp(const Vector3& v1, const Vector3& v2, const tfScalar& t)$/;"	f	namespace:tf
lethal_threshold_	include/costmap_2d/static_layer.h	/^  unsigned char lethal_threshold_, unknown_cost_value_;$/;"	m	class:costmap_2d::StaticLayer
lineWithLineIntersection	include/pcl/common/impl/intersections.hpp	/^pcl::lineWithLineIntersection (const Eigen::VectorXf &line_a, $/;"	f	class:pcl
lineWithLineIntersection	include/pcl/common/impl/intersections.hpp	/^pcl::lineWithLineIntersection (const pcl::ModelCoefficients &line_a, $/;"	f	class:pcl
line_number_	include/pcl/exceptions.h	/^      unsigned line_number_;$/;"	m	class:pcl::PCLException
line_number_	include/pcl/io/io_exception.h	/^        unsigned line_number_;$/;"	m	class:pcl::io::IOException
line_number_	include/pcl/io/openni_camera/openni_exception.h	/^    unsigned line_number_;$/;"	m	class:openni_wrapper::OpenNIException
line_number_	include/pcl/io/ply/ply_parser.h	/^          std::size_t line_number_;$/;"	m	class:pcl::io::ply::ply_parser
link_file_name	include/pcl/io/tar.h	/^      char link_file_name[100];$/;"	m	struct:pcl::io::TARHeader
list_property	include/pcl/io/ply/ply_parser.h	/^            list_property (const std::string& name, $/;"	f	struct:pcl::io::ply::ply_parser::list_property
list_property	include/pcl/io/ply/ply_parser.h	/^          struct list_property : public property$/;"	s	class:pcl::io::ply::ply_parser
list_property_begin_callback_type	include/pcl/io/ply/ply_parser.h	/^            typedef typename list_property_begin_callback_type<SizeType, ScalarType>::type list_property_begin_callback_type;$/;"	t	struct:pcl::io::ply::ply_parser::list_property_definition_callback_type
list_property_begin_callback_type	include/pcl/io/ply/ply_parser.h	/^          struct list_property_begin_callback_type$/;"	s	class:pcl::io::ply::ply_parser
list_property_definition_callback_type	include/pcl/io/ply/ply_parser.h	/^          struct list_property_definition_callback_type$/;"	s	class:pcl::io::ply::ply_parser
list_property_definition_callbacks	include/pcl/io/ply/ply_parser.h	/^inline void pcl::io::ply::ply_parser::list_property_definition_callbacks (const list_property_definition_callbacks_type& list_property_definition_callbacks)$/;"	f	class:pcl::io::ply::ply_parser
list_property_definition_callbacks_	include/pcl/io/ply/ply_parser.h	/^          list_property_definition_callbacks_type list_property_definition_callbacks_;$/;"	m	class:pcl::io::ply::ply_parser
list_property_definition_callbacks_type	include/pcl/io/ply/ply_parser.h	/^          class list_property_definition_callbacks_type$/;"	c	class:pcl::io::ply::ply_parser
list_property_element_callback_type	include/pcl/io/ply/ply_parser.h	/^            typedef typename list_property_element_callback_type<SizeType, ScalarType>::type list_property_element_callback_type;$/;"	t	struct:pcl::io::ply::ply_parser::list_property_definition_callback_type
list_property_element_callback_type	include/pcl/io/ply/ply_parser.h	/^          struct list_property_element_callback_type$/;"	s	class:pcl::io::ply::ply_parser
list_property_end_callback_type	include/pcl/io/ply/ply_parser.h	/^            typedef typename list_property_end_callback_type<SizeType, ScalarType>::type list_property_end_callback_type;$/;"	t	struct:pcl::io::ply::ply_parser::list_property_definition_callback_type
list_property_end_callback_type	include/pcl/io/ply/ply_parser.h	/^          struct list_property_end_callback_type$/;"	s	class:pcl::io::ply::ply_parser
little_endian_byte_order	include/pcl/io/ply/byte_order.h	/^        little_endian_byte_order,$/;"	e	enum:pcl::io::ply::byte_order
load	include/pcl/io/impl/auto_io.hpp	/^    load (const std::string& file_name, pcl::PointCloud<PointT>& cloud)$/;"	f	namespace:pcl::io
loadBinary	include/pcl/common/impl/eigen.hpp	/^pcl::loadBinary (Eigen::MatrixBase<Derived> const & matrix_, std::istream& file)$/;"	f	class:pcl
loadIFSFile	include/pcl/io/ifs_io.h	/^    loadIFSFile (const std::string &file_name, pcl::PCLPointCloud2 &cloud)$/;"	f	namespace:pcl::io
loadIFSFile	include/pcl/io/ifs_io.h	/^    loadIFSFile (const std::string &file_name, pcl::PointCloud<PointT> &cloud)$/;"	f	namespace:pcl::io
loadIFSFile	include/pcl/io/ifs_io.h	/^    loadIFSFile (const std::string &file_name, pcl::PolygonMesh &mesh)$/;"	f	namespace:pcl::io
loadOBJFile	include/pcl/io/obj_io.h	/^    loadOBJFile (const std::string &file_name, pcl::PCLPointCloud2 &cloud)$/;"	f	namespace:pcl::io
loadOBJFile	include/pcl/io/obj_io.h	/^    loadOBJFile (const std::string &file_name, pcl::PCLPointCloud2 &cloud,$/;"	f	namespace:pcl::io
loadOBJFile	include/pcl/io/obj_io.h	/^    loadOBJFile (const std::string &file_name, pcl::PointCloud<PointT> &cloud)$/;"	f	namespace:pcl::io
loadOBJFile	include/pcl/io/obj_io.h	/^    loadOBJFile (const std::string &file_name, pcl::PolygonMesh &mesh)$/;"	f	namespace:pcl::io
loadOBJFile	include/pcl/io/obj_io.h	/^    loadOBJFile (const std::string &file_name, pcl::TextureMesh &mesh)$/;"	f	namespace:pcl::io
loadPCDFile	include/pcl/io/pcd_io.h	/^    loadPCDFile (const std::string &file_name, pcl::PCLPointCloud2 &cloud)$/;"	f	namespace:pcl::io
loadPCDFile	include/pcl/io/pcd_io.h	/^    loadPCDFile (const std::string &file_name, pcl::PCLPointCloud2 &cloud,$/;"	f	namespace:pcl::io
loadPCDFile	include/pcl/io/pcd_io.h	/^    loadPCDFile (const std::string &file_name, pcl::PointCloud<PointT> &cloud)$/;"	f	namespace:pcl::io
loadPLYFile	include/pcl/io/ply_io.h	/^    loadPLYFile (const std::string &file_name, pcl::PCLPointCloud2 &cloud)$/;"	f	namespace:pcl::io
loadPLYFile	include/pcl/io/ply_io.h	/^    loadPLYFile (const std::string &file_name, pcl::PCLPointCloud2 &cloud,$/;"	f	namespace:pcl::io
loadPLYFile	include/pcl/io/ply_io.h	/^    loadPLYFile (const std::string &file_name, pcl::PointCloud<PointT> &cloud)$/;"	f	namespace:pcl::io
loadPLYFile	include/pcl/io/ply_io.h	/^    loadPLYFile (const std::string &file_name, pcl::PolygonMesh &mesh)$/;"	f	namespace:pcl::io
local_path_	include/pcl/io/davidsdk_grabber.h	/^      std::string local_path_;$/;"	m	class:pcl::DavidSDKGrabber
lock	include/costmap_2d/observation_buffer.h	/^  inline void lock()$/;"	f	class:costmap_2d::ObservationBuffer
lock_	include/costmap_2d/observation_buffer.h	/^  boost::recursive_mutex lock_;  \/\/\/< @brief A lock for accessing data in callbacks safely$/;"	m	class:costmap_2d::ObservationBuffer
log2f	include/pcl/pcl_macros.h	/^log2f (float x)$/;"	f
lookupTable_	include/pcl/io/openni2/openni_shift_to_depth_conversion.h	/^      std::vector<float> lookupTable_;$/;"	m	class:openni_wrapper::ShiftToDepthConverter
lookupTable_	include/pcl/io/openni_camera/openni_shift_to_depth_conversion.h	/^      std::vector<float> lookupTable_;$/;"	m	class:openni_wrapper::ShiftToDepthConverter
lookup_table_size	include/pcl/range_image/range_image.h	/^      static const int lookup_table_size;$/;"	m	class:pcl::RangeImage
m_basis	include/tf/LinearMath/Transform.h	/^	Matrix3x3 m_basis;$/;"	m	class:tf::Transform
m_basis	include/tf/LinearMath/Transform.h	/^	Matrix3x3DoubleData	m_basis;$/;"	m	struct:tf::TransformDoubleData
m_basis	include/tf/LinearMath/Transform.h	/^	Matrix3x3FloatData	m_basis;$/;"	m	struct:tf::TransformFloatData
m_el	include/tf/LinearMath/Matrix3x3.h	/^	Vector3 m_el[3];$/;"	m	class:tf::Matrix3x3
m_el	include/tf/LinearMath/Matrix3x3.h	/^	Vector3DoubleData m_el[3];$/;"	m	struct:tf::Matrix3x3DoubleData
m_el	include/tf/LinearMath/Matrix3x3.h	/^	Vector3FloatData m_el[3];$/;"	m	struct:tf::Matrix3x3FloatData
m_floats	include/tf/LinearMath/Vector3.h	/^		tfScalar	m_floats[4];$/;"	m	class:tf::Vector3
m_floats	include/tf/LinearMath/Vector3.h	/^	double	m_floats[4];$/;"	m	struct:tf::Vector3DoubleData
m_floats	include/tf/LinearMath/Vector3.h	/^	float	m_floats[4];$/;"	m	struct:tf::Vector3FloatData
m_objectType	include/tf/LinearMath/Scalar.h	/^	int	m_objectType;$/;"	m	struct:tfTypedObject
m_origin	include/tf/LinearMath/Transform.h	/^	Vector3   m_origin;$/;"	m	class:tf::Transform
m_origin	include/tf/LinearMath/Transform.h	/^	Vector3DoubleData	m_origin;$/;"	m	struct:tf::TransformDoubleData
m_origin	include/tf/LinearMath/Transform.h	/^	Vector3FloatData	m_origin;$/;"	m	struct:tf::TransformFloatData
magic_callback	include/pcl/io/ply/ply_parser.h	/^inline void pcl::io::ply::ply_parser::magic_callback (const magic_callback_type& magic_callback)$/;"	f	class:pcl::io::ply::ply_parser
magic_callback_	include/pcl/io/ply/ply_parser.h	/^          magic_callback_type magic_callback_;$/;"	m	class:pcl::io::ply::ply_parser
magic_callback_type	include/pcl/io/ply/ply_parser.h	/^          typedef boost::function<void ()> magic_callback_type;$/;"	t	class:pcl::io::ply::ply_parser
main	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	/^int main(int argc, char* argv[])$/;"	f
main	build/CMakeFiles/2.8.12.2/CompilerIdC/CMakeCCompilerId.c	/^void main() {}$/;"	f
main	build/CMakeFiles/2.8.12.2/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f
makeFootprintFromRadius	src/footprint.cpp	/^std::vector<geometry_msgs::Point> makeFootprintFromRadius(double radius)$/;"	f	namespace:costmap_2d
makeFootprintFromString	src/footprint.cpp	/^bool makeFootprintFromString(const std::string& footprint_string, std::vector<geometry_msgs::Point>& footprint)$/;"	f	namespace:costmap_2d
makeShared	include/pcl/point_cloud.h	/^      makeShared () const { return Ptr (new PointCloud<PointT> (*this)); }$/;"	f	class:pcl::PointCloud
makeShared	include/pcl/point_representation.h	/^      makeShared () const$/;"	f	class:pcl::CustomPointRepresentation
makeShared	include/pcl/point_representation.h	/^      makeShared () const$/;"	f	class:pcl::DefaultFeatureRepresentation
makeShared	include/pcl/point_representation.h	/^      makeShared () const$/;"	f	class:pcl::DefaultPointRepresentation
makeShared	include/pcl/range_image/range_image.h	/^      makeShared () { return Ptr (new RangeImage (*this)); } $/;"	f	class:pcl::RangeImage
makeShared	include/pcl/range_image/range_image_planar.h	/^      makeShared () { return Ptr (new RangeImagePlanar (*this)); } $/;"	f	class:pcl::RangeImagePlanar
makeShared	include/pcl/range_image/range_image_spherical.h	/^      makeShared () { return Ptr (new RangeImageSpherical (*this)); }$/;"	f	class:pcl::RangeImageSpherical
makeSymmetric	include/pcl/common/impl/projection_matrix.hpp	/^      makeSymmetric (MatrixT& matrix, bool use_upper_triangular = true)$/;"	f	namespace:pcl::common::internal
map	include/map_msgs/GetPointMapResponse.h	/^  _map_type map;$/;"	m	struct:map_msgs::GetPointMapResponse_
map	include/map_msgs/ProjectedMap.h	/^  _map_type map;$/;"	m	struct:map_msgs::ProjectedMap_
mapToWorld	src/costmap_2d.cpp	/^void Costmap2D::mapToWorld(unsigned int mx, unsigned int my, double& wx, double& wy) const$/;"	f	class:costmap_2d::Costmap2D
mapUpdateLoop	src/costmap_2d_ros.cpp	/^void Costmap2DROS::mapUpdateLoop(double frequency)$/;"	f	class:costmap_2d::Costmap2DROS
map_	include/pcl/conversions.h	/^      std::vector<FieldMapping>& map_;$/;"	m	struct:pcl::detail::FieldMapper
map_frame_	include/costmap_2d/static_layer.h	/^  std::string map_frame_;  \/\/\/ @brief frame that map is located in$/;"	m	class:costmap_2d::StaticLayer
map_msgs	include/map_msgs/GetMapROI.h	/^namespace map_msgs$/;"	n
map_msgs	include/map_msgs/GetMapROIRequest.h	/^namespace map_msgs$/;"	n
map_msgs	include/map_msgs/GetMapROIResponse.h	/^namespace map_msgs$/;"	n
map_msgs	include/map_msgs/GetPointMap.h	/^namespace map_msgs$/;"	n
map_msgs	include/map_msgs/GetPointMapROI.h	/^namespace map_msgs$/;"	n
map_msgs	include/map_msgs/GetPointMapROIRequest.h	/^namespace map_msgs$/;"	n
map_msgs	include/map_msgs/GetPointMapROIResponse.h	/^namespace map_msgs$/;"	n
map_msgs	include/map_msgs/GetPointMapRequest.h	/^namespace map_msgs$/;"	n
map_msgs	include/map_msgs/GetPointMapResponse.h	/^namespace map_msgs$/;"	n
map_msgs	include/map_msgs/OccupancyGridUpdate.h	/^namespace map_msgs$/;"	n
map_msgs	include/map_msgs/PointCloud2Update.h	/^namespace map_msgs$/;"	n
map_msgs	include/map_msgs/ProjectedMap.h	/^namespace map_msgs$/;"	n
map_msgs	include/map_msgs/ProjectedMapInfo.h	/^namespace map_msgs$/;"	n
map_msgs	include/map_msgs/ProjectedMapsInfo.h	/^namespace map_msgs$/;"	n
map_msgs	include/map_msgs/ProjectedMapsInfoRequest.h	/^namespace map_msgs$/;"	n
map_msgs	include/map_msgs/ProjectedMapsInfoResponse.h	/^namespace map_msgs$/;"	n
map_msgs	include/map_msgs/SaveMap.h	/^namespace map_msgs$/;"	n
map_msgs	include/map_msgs/SaveMapRequest.h	/^namespace map_msgs$/;"	n
map_msgs	include/map_msgs/SaveMapResponse.h	/^namespace map_msgs$/;"	n
map_msgs	include/map_msgs/SetMapProjections.h	/^namespace map_msgs$/;"	n
map_msgs	include/map_msgs/SetMapProjectionsRequest.h	/^namespace map_msgs$/;"	n
map_msgs	include/map_msgs/SetMapProjectionsResponse.h	/^namespace map_msgs$/;"	n
map_received_	include/costmap_2d/static_layer.h	/^  bool map_received_;$/;"	m	class:costmap_2d::StaticLayer
map_synchronization_	include/pcl/io/pcd_io.h	/^      bool map_synchronization_;$/;"	m	class:pcl::PCDWriter
map_update_thread_	include/costmap_2d/costmap_2d_ros.h	/^  boost::thread* map_update_thread_;  \/\/\/< @brief A thread for updating the map$/;"	m	class:costmap_2d::Costmap2DROS
map_update_thread_shutdown_	include/costmap_2d/costmap_2d_ros.h	/^  bool map_update_thread_shutdown_;$/;"	m	class:costmap_2d::Costmap2DROS
mapping_	include/pcl/point_cloud.h	/^      boost::shared_ptr<MsgFieldMap> mapping_;$/;"	m	class:pcl::PointCloud
marking_buffers_	include/costmap_2d/obstacle_layer.h	/^  std::vector<boost::shared_ptr<costmap_2d::ObservationBuffer> > marking_buffers_;  \/\/\/< @brief Used to store observation buffers used for marking obstacles$/;"	m	class:costmap_2d::ObstacleLayer
matchSize	include/costmap_2d/layer.h	/^  virtual void matchSize() {}$/;"	f	class:costmap_2d::Layer
matchSize	src/costmap_layer.cpp	/^void CostmapLayer::matchSize()$/;"	f	class:costmap_2d::CostmapLayer
matchSize	src/inflation_layer.cpp	/^void InflationLayer::matchSize()$/;"	f	class:costmap_2d::InflationLayer
matchSize	src/static_layer.cpp	/^void StaticLayer::matchSize()$/;"	f	class:costmap_2d::StaticLayer
materials_	include/pcl/io/obj_io.h	/^      std::vector<pcl::TexMaterial> materials_;$/;"	m	class:pcl::MTLReader
max	include/pcl/common/random.h	/^          T max;$/;"	m	struct:pcl::common::UniformGenerator::Parameters
maxAxis	include/tf/LinearMath/Vector3.h	/^	TFSIMD_FORCE_INLINE int maxAxis() const $/;"	f	class:tf::Vector3
maxAxis4	include/tf/LinearMath/Vector3.h	/^		TFSIMD_FORCE_INLINE int maxAxis4() const$/;"	f	class:tf::tfVector4
max_correspondence_distance_error	include/pcl/common/poses_from_matches.h	/^        float max_correspondence_distance_error;  \/\/ As a fraction$/;"	m	struct:pcl::PosesFromMatches::Parameters
max_depth_	include/pcl/io/openni_camera/openni_device.h	/^        XnUInt32 max_depth_;$/;"	m	struct:openni_wrapper::OpenNIDevice::ShiftConversion
max_dim_	include/pcl/point_representation.h	/^      int max_dim_;$/;"	m	class:pcl::CustomPointRepresentation
max_distance_threshold_	include/pcl/io/hdl_grabber.h	/^      float max_distance_threshold_;$/;"	m	class:pcl::HDLGrabber
max_no_of_threads	include/pcl/range_image/range_image.h	/^      static int max_no_of_threads;$/;"	m	class:pcl::RangeImage
max_obstacle_height_	include/costmap_2d/observation_buffer.h	/^  double min_obstacle_height_, max_obstacle_height_;$/;"	m	class:costmap_2d::ObservationBuffer
max_obstacle_height_	include/costmap_2d/obstacle_layer.h	/^  double max_obstacle_height_;  \/\/\/< @brief Max Obstacle Height$/;"	m	class:costmap_2d::ObstacleLayer
max_shift_	include/pcl/io/openni_camera/openni_device.h	/^        XnUInt32 max_shift_;$/;"	m	struct:openni_wrapper::OpenNIDevice::ShiftConversion
max_z	include/map_msgs/ProjectedMap.h	/^  _max_z_type max_z;$/;"	m	struct:map_msgs::ProjectedMap_
max_z	include/map_msgs/ProjectedMapInfo.h	/^  _max_z_type max_z;$/;"	m	struct:map_msgs::ProjectedMapInfo_
maxx_	include/costmap_2d/layered_costmap.h	/^  double minx_, miny_, maxx_, maxy_;$/;"	m	class:costmap_2d::LayeredCostmap
maxy_	include/costmap_2d/layered_costmap.h	/^  double minx_, miny_, maxx_, maxy_;$/;"	m	class:costmap_2d::LayeredCostmap
mean	include/pcl/common/random.h	/^          T mean;$/;"	m	struct:pcl::common::NormalGenerator::Parameters
mean1_	include/pcl/common/transformation_from_correspondences.h	/^        Eigen::Vector3f mean1_, mean2_;$/;"	m	class:pcl::TransformationFromCorrespondences
mean2_	include/pcl/common/transformation_from_correspondences.h	/^        Eigen::Vector3f mean1_, mean2_;$/;"	m	class:pcl::TransformationFromCorrespondences
mean_	include/pcl/common/pca.h	/^      Eigen::Vector4f mean_;$/;"	m	class:pcl::PCA
mean_	include/pcl/common/vector_average.h	/^        Eigen::Matrix<real, dimension, 1> mean_;$/;"	m	class:pcl::VectorAverage
memoryCleanUp	include/pcl/common/impl/bivariate_polynomial.hpp	/^pcl::BivariatePolynomialT<real>::memoryCleanUp ()$/;"	f	class:pcl::BivariatePolynomialT
mesh_image_signal_	include/pcl/io/davidsdk_grabber.h	/^      boost::signals2::signal<sig_cb_davidsdk_mesh_image>* mesh_image_signal_;$/;"	m	class:pcl::DavidSDKGrabber
mesh_signal_	include/pcl/io/davidsdk_grabber.h	/^      boost::signals2::signal<sig_cb_davidsdk_mesh>* mesh_signal_;$/;"	m	class:pcl::DavidSDKGrabber
message_	include/pcl/io/io_exception.h	/^        std::string message_;$/;"	m	class:pcl::io::IOException
message_	include/pcl/io/openni_camera/openni_exception.h	/^    std::string message_;$/;"	m	class:openni_wrapper::OpenNIException
message_long_	include/pcl/io/io_exception.h	/^        std::string message_long_;$/;"	m	class:pcl::io::IOException
message_long_	include/pcl/io/openni_camera/openni_exception.h	/^    std::string message_long_;$/;"	m	class:openni_wrapper::OpenNIException
message_operations	include/map_msgs/GetMapROIRequest.h	/^namespace message_operations$/;"	n	namespace:ros
message_operations	include/map_msgs/GetMapROIResponse.h	/^namespace message_operations$/;"	n	namespace:ros
message_operations	include/map_msgs/GetPointMapROIRequest.h	/^namespace message_operations$/;"	n	namespace:ros
message_operations	include/map_msgs/GetPointMapROIResponse.h	/^namespace message_operations$/;"	n	namespace:ros
message_operations	include/map_msgs/GetPointMapRequest.h	/^namespace message_operations$/;"	n	namespace:ros
message_operations	include/map_msgs/GetPointMapResponse.h	/^namespace message_operations$/;"	n	namespace:ros
message_operations	include/map_msgs/OccupancyGridUpdate.h	/^namespace message_operations$/;"	n	namespace:ros
message_operations	include/map_msgs/PointCloud2Update.h	/^namespace message_operations$/;"	n	namespace:ros
message_operations	include/map_msgs/ProjectedMap.h	/^namespace message_operations$/;"	n	namespace:ros
message_operations	include/map_msgs/ProjectedMapInfo.h	/^namespace message_operations$/;"	n	namespace:ros
message_operations	include/map_msgs/ProjectedMapsInfoRequest.h	/^namespace message_operations$/;"	n	namespace:ros
message_operations	include/map_msgs/ProjectedMapsInfoResponse.h	/^namespace message_operations$/;"	n	namespace:ros
message_operations	include/map_msgs/SaveMapRequest.h	/^namespace message_operations$/;"	n	namespace:ros
message_operations	include/map_msgs/SaveMapResponse.h	/^namespace message_operations$/;"	n	namespace:ros
message_operations	include/map_msgs/SetMapProjectionsRequest.h	/^namespace message_operations$/;"	n	namespace:ros
message_operations	include/map_msgs/SetMapProjectionsResponse.h	/^namespace message_operations$/;"	n	namespace:ros
message_traits	include/map_msgs/GetMapROIRequest.h	/^namespace message_traits$/;"	n	namespace:ros
message_traits	include/map_msgs/GetMapROIResponse.h	/^namespace message_traits$/;"	n	namespace:ros
message_traits	include/map_msgs/GetPointMapROIRequest.h	/^namespace message_traits$/;"	n	namespace:ros
message_traits	include/map_msgs/GetPointMapROIResponse.h	/^namespace message_traits$/;"	n	namespace:ros
message_traits	include/map_msgs/GetPointMapRequest.h	/^namespace message_traits$/;"	n	namespace:ros
message_traits	include/map_msgs/GetPointMapResponse.h	/^namespace message_traits$/;"	n	namespace:ros
message_traits	include/map_msgs/OccupancyGridUpdate.h	/^namespace message_traits$/;"	n	namespace:ros
message_traits	include/map_msgs/PointCloud2Update.h	/^namespace message_traits$/;"	n	namespace:ros
message_traits	include/map_msgs/ProjectedMap.h	/^namespace message_traits$/;"	n	namespace:ros
message_traits	include/map_msgs/ProjectedMapInfo.h	/^namespace message_traits$/;"	n	namespace:ros
message_traits	include/map_msgs/ProjectedMapsInfoRequest.h	/^namespace message_traits$/;"	n	namespace:ros
message_traits	include/map_msgs/ProjectedMapsInfoResponse.h	/^namespace message_traits$/;"	n	namespace:ros
message_traits	include/map_msgs/SaveMapRequest.h	/^namespace message_traits$/;"	n	namespace:ros
message_traits	include/map_msgs/SaveMapResponse.h	/^namespace message_traits$/;"	n	namespace:ros
message_traits	include/map_msgs/SetMapProjectionsRequest.h	/^namespace message_traits$/;"	n	namespace:ros
message_traits	include/map_msgs/SetMapProjectionsResponse.h	/^namespace message_traits$/;"	n	namespace:ros
metadata_	include/pcl/io/openni2/openni2_metadata_wrapper.h	/^          openni::VideoFrameRef metadata_; \/\/ Internally reference counted$/;"	m	class:pcl::io::openni2::Openni2FrameWrapper
midpoint_	include/pcl/io/buffers.h	/^        const unsigned char midpoint_;$/;"	m	class:pcl::io::MedianBuffer
min	include/pcl/common/random.h	/^          T min;$/;"	m	struct:pcl::common::UniformGenerator::Parameters
minAxis	include/tf/LinearMath/Vector3.h	/^	TFSIMD_FORCE_INLINE int minAxis() const$/;"	f	class:tf::Vector3
minAxis4	include/tf/LinearMath/Vector3.h	/^	TFSIMD_FORCE_INLINE int minAxis4() const$/;"	f	class:tf::tfVector4
min_depth_	include/pcl/io/openni_camera/openni_device.h	/^        XnUInt32 min_depth_;$/;"	m	struct:openni_wrapper::OpenNIDevice::ShiftConversion
min_distance_threshold_	include/pcl/io/hdl_grabber.h	/^      float min_distance_threshold_;$/;"	m	class:pcl::HDLGrabber
min_obstacle_height_	include/costmap_2d/observation_buffer.h	/^  double min_obstacle_height_, max_obstacle_height_;$/;"	m	class:costmap_2d::ObservationBuffer
min_z	include/map_msgs/ProjectedMap.h	/^  _min_z_type min_z;$/;"	m	struct:map_msgs::ProjectedMap_
min_z	include/map_msgs/ProjectedMapInfo.h	/^  _min_z_type min_z;$/;"	m	struct:map_msgs::ProjectedMapInfo_
minus	include/pcl/register_point_struct.h	/^    minus (T &l, const T &r)$/;"	f	namespace:pcl::traits
minus	include/pcl/register_point_struct.h	/^    minus (typename boost::remove_const<T>::type &l, const T &r)$/;"	f	namespace:pcl::traits
minusscalar	include/pcl/register_point_struct.h	/^    minusscalar (T1 &p, const T2 &scalar)$/;"	f	namespace:pcl::traits
minx_	include/costmap_2d/layered_costmap.h	/^  double minx_, miny_, maxx_, maxy_;$/;"	m	class:costmap_2d::LayeredCostmap
miny_	include/costmap_2d/layered_costmap.h	/^  double minx_, miny_, maxx_, maxy_;$/;"	m	class:costmap_2d::LayeredCostmap
mirrorColumns	include/pcl/common/impl/spring.hpp	/^pcl::common::mirrorColumns (const PointCloud<PointT>& input, PointCloud<PointT>& output,$/;"	f	class:pcl::common
mirrorRows	include/pcl/common/impl/spring.hpp	/^pcl::common::mirrorRows (const PointCloud<PointT>& input, PointCloud<PointT>& output,$/;"	f	class:pcl::common
mode	include/pcl/io/hdl_grabber.h	/^          unsigned char mode;$/;"	m	struct:pcl::HDLGrabber::HDLDataPacket
modeComp	include/pcl/io/openni2_grabber.h	/^        struct modeComp$/;"	s	class:pcl::io::OpenNI2Grabber
modeComp	include/pcl/io/openni_grabber.h	/^      struct modeComp$/;"	s	class:pcl::OpenNIGrabber
mode_requested_	include/pcl/io/real_sense_grabber.h	/^      Mode mode_requested_;$/;"	m	class:pcl::RealSenseGrabber
mode_selected_	include/pcl/io/real_sense_grabber.h	/^      Mode mode_selected_;$/;"	m	class:pcl::RealSenseGrabber
movementCB	src/costmap_2d_ros.cpp	/^void Costmap2DROS::movementCB( double time_sleep)$/;"	f	class:costmap_2d::Costmap2DROS
mtime	include/pcl/io/tar.h	/^      char mtime[12];$/;"	m	struct:pcl::io::TARHeader
mulscalar	include/pcl/register_point_struct.h	/^    mulscalar (T1 &p, const T2 &scalar)$/;"	f	namespace:pcl::traits
mult	include/tf/LinearMath/Transform.h	/^		TFSIMD_FORCE_INLINE void mult(const Transform& t1, const Transform& t2) {$/;"	f	class:tf::Transform
mutex1_	include/pcl/common/synchronizer.h	/^    boost::mutex mutex1_;$/;"	m	class:pcl::Synchronizer
mutex2_	include/pcl/common/synchronizer.h	/^    boost::mutex mutex2_;$/;"	m	class:pcl::Synchronizer
mutex_	include/pcl/io/depth_sense/depth_sense_device_manager.h	/^          static boost::mutex mutex_;$/;"	m	class:pcl::io::depth_sense::DepthSenseDeviceManager
mutex_	include/pcl/io/impl/synchronized_queue.hpp	/^      mutable boost::mutex mutex_;       \/\/ The mutex to synchronise on$/;"	m	class:pcl::SynchronizedQueue
mutex_	include/pcl/io/real_sense/real_sense_device_manager.h	/^          static boost::mutex mutex_;$/;"	m	class:pcl::io::real_sense::RealSenseDeviceManager
mutex_t	include/costmap_2d/costmap_2d.h	/^  typedef boost::recursive_mutex mutex_t;$/;"	t	class:costmap_2d::Costmap2D
n	include/pcl/common/impl/accumulators.hpp	/^      size_t n;$/;"	m	struct:pcl::detail::GetPoint
n_	include/pcl/point_representation.h	/^        int &n_;$/;"	m	struct:pcl::DefaultFeatureRepresentation::IncrementFunctor
name	include/pcl/PCLPointField.h	/^    std::string name;$/;"	m	struct:pcl::PCLPointField
name	include/pcl/io/ply/ply_parser.h	/^            std::string name;$/;"	m	struct:pcl::io::ply::ply_parser::element
name	include/pcl/io/ply/ply_parser.h	/^            std::string name;$/;"	m	struct:pcl::io::ply::ply_parser::property
name	include/pcl/point_traits.h	/^    struct name : name<typename POD<PointT>::type, Tag, dummy>$/;"	s	namespace:pcl::traits
name_	include/costmap_2d/costmap_2d_ros.h	/^  std::string name_;$/;"	m	class:costmap_2d::Costmap2DROS
name_	include/costmap_2d/layer.h	/^  std::string name_;$/;"	m	class:costmap_2d::Layer
name_	include/pcl/io/ascii_io.h	/^      std::string name_;$/;"	m	class:pcl::ASCIIReader
name_	include/pcl/io/openni2/openni2_device_info.h	/^        std::string name_;$/;"	m	struct:pcl::io::openni2::OpenNI2DeviceInfo
name_	include/pcl/point_traits.h	/^      const std::string &name_;$/;"	m	struct:pcl::CopyIfFieldExists
name_	include/pcl/point_traits.h	/^      const std::string &name_;$/;"	m	struct:pcl::SetIfFieldExists
nearest	include/tf/LinearMath/Quaternion.h	/^	TFSIMD_FORCE_INLINE Quaternion nearest( const Quaternion& qd) const $/;"	f	class:tf::Quaternion
need_reinflation_	include/costmap_2d/inflation_layer.h	/^  bool need_reinflation_;  \/\/\/< Indicates that the entire costmap should be reinflated next time around.$/;"	m	class:costmap_2d::InflationLayer
need_xyz_	include/pcl/io/depth_sense/depth_sense_grabber_impl.h	/^        bool need_xyz_;$/;"	m	struct:pcl::io::depth_sense::DepthSenseGrabberImpl
need_xyz_	include/pcl/io/real_sense_grabber.h	/^      bool need_xyz_;$/;"	m	class:pcl::RealSenseGrabber
need_xyzrgba_	include/pcl/io/depth_sense/depth_sense_grabber_impl.h	/^        bool need_xyzrgba_;$/;"	m	struct:pcl::io::depth_sense::DepthSenseGrabberImpl
need_xyzrgba_	include/pcl/io/real_sense_grabber.h	/^      bool need_xyzrgba_;$/;"	m	class:pcl::RealSenseGrabber
neighbor	include/pcl/range_image/impl/range_image.hpp	/^    const PointWithRange* neighbor;$/;"	m	struct:pcl::__anon2::NeighborWithDistance
network_byte_order	include/pcl/io/ply/byte_order.h	/^        network_byte_order = big_endian_byte_order$/;"	e	enum:pcl::io::ply::byte_order
nfft	include/pcl/common/fft/_kiss_fft_guts.h	/^    int nfft;$/;"	m	struct:kiss_fft_state
noOfSamples_	include/pcl/common/vector_average.h	/^        unsigned int noOfSamples_;$/;"	m	class:pcl::VectorAverage
no_of_samples_	include/pcl/common/transformation_from_correspondences.h	/^        unsigned int no_of_samples_;$/;"	m	class:pcl::TransformationFromCorrespondences
no_sample_value_	include/pcl/io/image_depth.h	/^        pcl::uint64_t no_sample_value_;$/;"	m	class:pcl::io::DepthImage
no_sample_value_	include/pcl/io/openni2/openni2_device.h	/^          uint64_t no_sample_value_;$/;"	m	class:pcl::io::openni2::OpenNI2Device
no_sample_value_	include/pcl/io/openni_camera/openni_depth_image.h	/^      XnUInt64 no_sample_value_;$/;"	m	class:openni_wrapper::DepthImage
no_sample_value_	include/pcl/io/openni_camera/openni_device.h	/^      XnUInt64 no_sample_value_;$/;"	m	class:openni_wrapper::OpenNIDevice
normAngle	include/pcl/common/impl/angles.hpp	/^  normAngle (float alpha)$/;"	f	namespace:pcl
normal	include/pcl/common/impl/accumulators.hpp	/^      Eigen::Vector4f normal;$/;"	m	struct:pcl::detail::AccumulatorNormal
normal_distribution	include/pcl/common/random.h	/^    struct normal_distribution$/;"	s	namespace:pcl::common
normalize	include/tf/LinearMath/Quaternion.h	/^	Quaternion& normalize() $/;"	f	class:tf::Quaternion
normalize	include/tf/LinearMath/Vector3.h	/^	TFSIMD_FORCE_INLINE Vector3& normalize() $/;"	f	class:tf::Vector3
normalized	include/tf/LinearMath/Quaternion.h	/^	Quaternion normalized() const $/;"	f	class:tf::Quaternion
normalized	include/tf/LinearMath/Vector3.h	/^TFSIMD_FORCE_INLINE Vector3 Vector3::normalized() const$/;"	f	class:tf::Vector3
nr_dimensions_	include/pcl/point_representation.h	/^      int nr_dimensions_;$/;"	m	class:pcl::PointRepresentation
num_points_	include/pcl/common/centroid.h	/^      size_t num_points_;$/;"	m	class:pcl::CentroidPoint
num_slots	include/pcl/io/grabber.h	/^  Grabber::num_slots () const$/;"	f	class:pcl::Grabber
number_of_bins_	include/pcl/common/feature_histogram.h	/^      size_t number_of_bins_;$/;"	m	class:pcl::FeatureHistogram
number_of_elements_	include/pcl/common/feature_histogram.h	/^      size_t number_of_elements_;$/;"	m	class:pcl::FeatureHistogram
obj_info_callback	include/pcl/io/ply/ply_parser.h	/^inline void pcl::io::ply::ply_parser::obj_info_callback (const obj_info_callback_type& obj_info_callback)$/;"	f	class:pcl::io::ply::ply_parser
obj_info_callback_	include/pcl/io/ply/ply_parser.h	/^          obj_info_callback_type obj_info_callback_;$/;"	m	class:pcl::io::ply::ply_parser
obj_info_callback_type	include/pcl/io/ply/ply_parser.h	/^          typedef boost::function<void (const std::string&)> obj_info_callback_type;$/;"	t	class:pcl::io::ply::ply_parser
observation_buffers_	include/costmap_2d/obstacle_layer.h	/^  std::vector<boost::shared_ptr<costmap_2d::ObservationBuffer> > observation_buffers_;  \/\/\/< @brief Used to store observations from various sensors$/;"	m	class:costmap_2d::ObstacleLayer
observation_keep_time_	include/costmap_2d/observation_buffer.h	/^  const ros::Duration observation_keep_time_;$/;"	m	class:costmap_2d::ObservationBuffer
observation_list_	include/costmap_2d/observation_buffer.h	/^  std::list<Observation> observation_list_;$/;"	m	class:costmap_2d::ObservationBuffer
obstacle_range_	include/costmap_2d/observation.h	/^  double obstacle_range_, raytrace_range_;$/;"	m	class:costmap_2d::Observation
obstacle_range_	include/costmap_2d/observation_buffer.h	/^  double obstacle_range_, raytrace_range_;$/;"	m	class:costmap_2d::ObservationBuffer
octave	include/pcl/impl/point_types.hpp	/^    int   octave;$/;"	m	struct:pcl::_PointWithScale
offset	include/pcl/PCLPointField.h	/^    pcl::uint32_t offset;$/;"	m	struct:pcl::PCLPointField
offset	include/pcl/point_traits.h	/^    struct offset : offset<typename POD<PointT>::type, Tag>$/;"	s	namespace:pcl::traits
offset_	include/pcl/common/piecewise_linear_function.h	/^      float offset_;$/;"	m	class:pcl::PiecewiseLinearFunction
old_pose_	include/costmap_2d/costmap_2d_ros.h	/^  tf::Stamped<tf::Pose> old_pose_;$/;"	m	class:costmap_2d::Costmap2DROS
onFootprintChanged	include/costmap_2d/layer.h	/^  virtual void onFootprintChanged() {}$/;"	f	class:costmap_2d::Layer
onFootprintChanged	src/inflation_layer.cpp	/^void InflationLayer::onFootprintChanged()$/;"	f	class:costmap_2d::InflationLayer
onInitialize	include/costmap_2d/layer.h	/^  virtual void onInitialize() {}$/;"	f	class:costmap_2d::Layer
onInitialize	src/inflation_layer.cpp	/^void InflationLayer::onInitialize()$/;"	f	class:costmap_2d::InflationLayer
onInitialize	src/obstacle_layer.cpp	/^void ObstacleLayer::onInitialize()$/;"	f	class:costmap_2d::ObstacleLayer
onInitialize	src/static_layer.cpp	/^void StaticLayer::onInitialize()$/;"	f	class:costmap_2d::StaticLayer
onNewFrame	include/pcl/io/openni2/openni2_frame_listener.h	/^          onNewFrame (openni::VideoStream& stream)$/;"	f	class:pcl::io::openni2::OpenNI2FrameListener
openni	include/pcl/io/openni2/openni2_device.h	/^namespace openni$/;"	n
openni2	include/pcl/io/openni2/openni2_convert.h	/^    namespace openni2$/;"	n	namespace:pcl::io
openni2	include/pcl/io/openni2/openni2_device.h	/^    namespace openni2$/;"	n	namespace:pcl::io
openni2	include/pcl/io/openni2/openni2_device_info.h	/^    namespace openni2$/;"	n	namespace:pcl::io
openni2	include/pcl/io/openni2/openni2_device_manager.h	/^    namespace openni2$/;"	n	namespace:pcl::io
openni2	include/pcl/io/openni2/openni2_frame_listener.h	/^    namespace openni2$/;"	n	namespace:pcl::io
openni2	include/pcl/io/openni2/openni2_metadata_wrapper.h	/^    namespace openni2$/;"	n	namespace:pcl::io
openni2	include/pcl/io/openni2/openni2_timer_filter.h	/^    namespace openni2$/;"	n	namespace:pcl::io
openni2	include/pcl/io/openni2/openni2_video_mode.h	/^    namespace openni2$/;"	n	namespace:pcl::io
openni_device_	include/pcl/io/openni2/openni2_device.h	/^          boost::shared_ptr<openni::Device> openni_device_;$/;"	m	class:pcl::io::openni2::OpenNI2Device
openni_wrapper	include/pcl/io/openni2/openni_shift_to_depth_conversion.h	/^namespace openni_wrapper$/;"	n
openni_wrapper	include/pcl/io/openni_camera/openni_depth_image.h	/^namespace openni_wrapper$/;"	n
openni_wrapper	include/pcl/io/openni_camera/openni_device.h	/^namespace openni_wrapper$/;"	n
openni_wrapper	include/pcl/io/openni_camera/openni_device_kinect.h	/^namespace openni_wrapper$/;"	n
openni_wrapper	include/pcl/io/openni_camera/openni_device_oni.h	/^namespace openni_wrapper$/;"	n
openni_wrapper	include/pcl/io/openni_camera/openni_device_primesense.h	/^namespace openni_wrapper$/;"	n
openni_wrapper	include/pcl/io/openni_camera/openni_device_xtion.h	/^namespace openni_wrapper$/;"	n
openni_wrapper	include/pcl/io/openni_camera/openni_driver.h	/^namespace openni_wrapper$/;"	n
openni_wrapper	include/pcl/io/openni_camera/openni_exception.h	/^namespace openni_wrapper$/;"	n
openni_wrapper	include/pcl/io/openni_camera/openni_image.h	/^namespace openni_wrapper$/;"	n
openni_wrapper	include/pcl/io/openni_camera/openni_image_bayer_grbg.h	/^namespace openni_wrapper$/;"	n
openni_wrapper	include/pcl/io/openni_camera/openni_image_rgb24.h	/^namespace openni_wrapper$/;"	n
openni_wrapper	include/pcl/io/openni_camera/openni_image_yuv_422.h	/^namespace openni_wrapper$/;"	n
openni_wrapper	include/pcl/io/openni_camera/openni_ir_image.h	/^namespace openni_wrapper$/;"	n
openni_wrapper	include/pcl/io/openni_camera/openni_shift_to_depth_conversion.h	/^namespace openni_wrapper$/;"	n
operator !=	include/tf/LinearMath/Vector3.h	/^	TFSIMD_FORCE_INLINE	bool	operator!=(const Vector3& other) const$/;"	f	class:tf::Vector3
operator ()	include/costmap_2d/costmap_2d.h	/^    inline void operator()(unsigned int offset)$/;"	f	class:costmap_2d::Costmap2D::MarkCell
operator ()	include/costmap_2d/costmap_2d.h	/^    inline void operator()(unsigned int offset)$/;"	f	class:costmap_2d::Costmap2D::PolygonOutlineCells
operator ()	include/pcl/common/centroid.h	/^    template<typename Key> inline void operator() ()$/;"	f	struct:pcl::NdCentroidFunctor
operator ()	include/pcl/common/concatenate.h	/^    operator () ()$/;"	f	struct:pcl::NdConcatenateFunctor
operator ()	include/pcl/common/impl/accumulators.hpp	/^      operator () (AccumulatorT& accumulator) const$/;"	f	struct:pcl::detail::AddPoint
operator ()	include/pcl/common/impl/accumulators.hpp	/^      operator () (AccumulatorT& accumulator) const$/;"	f	struct:pcl::detail::GetPoint
operator ()	include/pcl/common/impl/copy_point.hpp	/^      void operator () (const PointInT& point_in, PointOutT& point_out) const$/;"	f	struct:pcl::detail::CopyPointHelper
operator ()	include/pcl/common/impl/intensity.hpp	/^      operator () (const pcl::InterestPoint &p) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
operator ()	include/pcl/common/impl/intensity.hpp	/^      operator () (const pcl::PointNormal &p) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
operator ()	include/pcl/common/impl/intensity.hpp	/^      operator () (const pcl::PointSurfel &p) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
operator ()	include/pcl/common/impl/intensity.hpp	/^      operator () (const pcl::PointWithRange &p) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
operator ()	include/pcl/common/impl/intensity.hpp	/^      operator () (const pcl::PointWithScale &p) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
operator ()	include/pcl/common/impl/intensity.hpp	/^      operator () (const pcl::PointWithViewpoint &p) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
operator ()	include/pcl/common/impl/intensity.hpp	/^      operator () (const pcl::PointXYZ &p) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
operator ()	include/pcl/common/impl/intensity.hpp	/^      operator () (const pcl::PointXYZHSV &p) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
operator ()	include/pcl/common/impl/intensity.hpp	/^      operator () (const pcl::PointXYZL &p) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
operator ()	include/pcl/common/impl/intensity.hpp	/^      operator () (const pcl::PointXYZLNormal &p) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
operator ()	include/pcl/common/impl/intensity.hpp	/^      operator () (const pcl::PointXYZRGB &p) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
operator ()	include/pcl/common/impl/intensity.hpp	/^      operator () (const pcl::PointXYZRGBA &p) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
operator ()	include/pcl/common/impl/intensity.hpp	/^      operator () (const pcl::PointXYZRGBL &p) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
operator ()	include/pcl/common/impl/intensity.hpp	/^      operator () (const pcl::PointXYZRGBNormal &p) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
operator ()	include/pcl/common/intensity.h	/^      operator () (const PointT &p) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
operator ()	include/pcl/common/poses_from_matches.h	/^          bool operator()(const PoseEstimate& pe1, const PoseEstimate& pe2) const { return pe1.score>pe2.score;}$/;"	f	struct:pcl::PosesFromMatches::PoseEstimate::IsBetter
operator ()	include/pcl/conversions.h	/^      operator () ()$/;"	f	struct:pcl::detail::FieldMapper
operator ()	include/pcl/conversions.h	/^      template<typename U> void operator() ()$/;"	f	struct:pcl::detail::FieldAdder
operator ()	include/pcl/io/openni2_grabber.h	/^          bool operator () (const openni::VideoMode& mode1, const openni::VideoMode & mode2) const$/;"	f	struct:pcl::io::OpenNI2Grabber::modeComp
operator ()	include/pcl/io/openni_grabber.h	/^        bool operator () (const XnMapOutputMode& mode1, const XnMapOutputMode & mode2) const$/;"	f	struct:pcl::OpenNIGrabber::modeComp
operator ()	include/pcl/point_cloud.h	/^      operator () (size_t column, size_t row) const$/;"	f	class:pcl::PointCloud
operator ()	include/pcl/point_cloud.h	/^      operator () (size_t column, size_t row)$/;"	f	class:pcl::PointCloud
operator ()	include/pcl/point_cloud.h	/^    operator() ()$/;"	f	struct:pcl::NdCopyEigenPointFunctor
operator ()	include/pcl/point_cloud.h	/^    operator() ()$/;"	f	struct:pcl::NdCopyPointEigenFunctor
operator ()	include/pcl/point_representation.h	/^        template<typename Key> inline void operator () ()$/;"	f	struct:pcl::DefaultFeatureRepresentation::IncrementFunctor
operator ()	include/pcl/point_representation.h	/^      template<typename Key> inline void operator() ()$/;"	f	struct:pcl::DefaultFeatureRepresentation::NdCopyPointFunctor
operator ()	include/pcl/point_traits.h	/^    bool operator() (const pcl::PCLPointField& field)$/;"	f	struct:pcl::FieldMatches
operator ()	include/pcl/point_traits.h	/^    operator() ()$/;"	f	struct:pcl::CopyIfFieldExists
operator ()	include/pcl/point_traits.h	/^    operator() ()$/;"	f	struct:pcl::SetIfFieldExists
operator ()	include/pcl/point_types.h	/^    bool operator() (const pcl::PCLPointField& field)$/;"	f	struct:pcl::FieldMatches
operator ()	include/tf/LinearMath/Transform.h	/^	TFSIMD_FORCE_INLINE Vector3 operator()(const Vector3& x) const$/;"	f	class:tf::Transform
operator *	include/pcl/impl/cloud_iterator.hpp	/^      PointT& operator* () const$/;"	f	class:pcl::DefaultIterator
operator *	include/pcl/impl/cloud_iterator.hpp	/^      PointT& operator* () const$/;"	f	class:pcl::IteratorIdx
operator *	include/pcl/impl/cloud_iterator.hpp	/^      const PointT& operator* () const$/;"	f	class:pcl::ConstCloudIterator::ConstIteratorIdx
operator *	include/pcl/impl/cloud_iterator.hpp	/^      const PointT& operator* () const$/;"	f	class:pcl::ConstCloudIterator::DefaultConstIterator
operator *	include/pcl/impl/cloud_iterator.hpp	/^pcl::CloudIterator<PointT>::operator* () const$/;"	f	class:pcl::CloudIterator
operator *	include/pcl/impl/cloud_iterator.hpp	/^pcl::ConstCloudIterator<PointT>::operator* () const$/;"	f	class:pcl::ConstCloudIterator
operator *	include/tf/LinearMath/Matrix3x3.h	/^operator*(const Matrix3x3& m, const Vector3& v) $/;"	f	namespace:tf
operator *	include/tf/LinearMath/Matrix3x3.h	/^operator*(const Matrix3x3& m1, const Matrix3x3& m2)$/;"	f	namespace:tf
operator *	include/tf/LinearMath/Matrix3x3.h	/^operator*(const Vector3& v, const Matrix3x3& m)$/;"	f	namespace:tf
operator *	include/tf/LinearMath/Quaternion.h	/^	operator*(const tfScalar& s) const$/;"	f	class:tf::Quaternion
operator *	include/tf/LinearMath/Quaternion.h	/^operator*(const Quaternion& q, const Vector3& w)$/;"	f	namespace:tf
operator *	include/tf/LinearMath/Quaternion.h	/^operator*(const Quaternion& q1, const Quaternion& q2) {$/;"	f	namespace:tf
operator *	include/tf/LinearMath/Quaternion.h	/^operator*(const Vector3& w, const Quaternion& q)$/;"	f	namespace:tf
operator *	include/tf/LinearMath/Transform.h	/^	TFSIMD_FORCE_INLINE Quaternion operator*(const Quaternion& q) const$/;"	f	class:tf::Transform
operator *	include/tf/LinearMath/Transform.h	/^	TFSIMD_FORCE_INLINE Vector3 operator*(const Vector3& x) const$/;"	f	class:tf::Transform
operator *	include/tf/LinearMath/Transform.h	/^Transform::operator*(const Transform& t) const$/;"	f	class:tf::Transform
operator *	include/tf/LinearMath/Vector3.h	/^operator*(const Vector3& v, const tfScalar& s)$/;"	f	namespace:tf
operator *	include/tf/LinearMath/Vector3.h	/^operator*(const Vector3& v1, const Vector3& v2) $/;"	f	namespace:tf
operator *	include/tf/LinearMath/Vector3.h	/^operator*(const tfScalar& s, const Vector3& v)$/;"	f	namespace:tf
operator *=	include/tf/LinearMath/Matrix3x3.h	/^Matrix3x3::operator*=(const Matrix3x3& m)$/;"	f	class:tf::Matrix3x3
operator *=	include/tf/LinearMath/Quaternion.h	/^	Quaternion& operator*=(const Quaternion& q)$/;"	f	class:tf::Quaternion
operator *=	include/tf/LinearMath/Quaternion.h	/^	Quaternion& operator*=(const tfScalar& s)$/;"	f	class:tf::Quaternion
operator *=	include/tf/LinearMath/Transform.h	/^	Transform& operator*=(const Transform& t) $/;"	f	class:tf::Transform
operator *=	include/tf/LinearMath/Vector3.h	/^	TFSIMD_FORCE_INLINE Vector3& operator*=(const Vector3& v)$/;"	f	class:tf::Vector3
operator *=	include/tf/LinearMath/Vector3.h	/^	TFSIMD_FORCE_INLINE Vector3& operator*=(const tfScalar& s)$/;"	f	class:tf::Vector3
operator +	include/pcl/point_cloud.h	/^      operator + (const PointCloud& rhs)$/;"	f	class:pcl::PointCloud
operator +	include/tf/LinearMath/Quaternion.h	/^	operator+(const Quaternion& q2) const$/;"	f	class:tf::Quaternion
operator +	include/tf/LinearMath/Vector3.h	/^operator+(const Vector3& v1, const Vector3& v2) $/;"	f	namespace:tf
operator ++	include/pcl/impl/cloud_iterator.hpp	/^      void operator ++ ()$/;"	f	class:pcl::ConstCloudIterator::ConstIteratorIdx
operator ++	include/pcl/impl/cloud_iterator.hpp	/^      void operator ++ ()$/;"	f	class:pcl::ConstCloudIterator::DefaultConstIterator
operator ++	include/pcl/impl/cloud_iterator.hpp	/^      void operator ++ ()$/;"	f	class:pcl::DefaultIterator
operator ++	include/pcl/impl/cloud_iterator.hpp	/^      void operator ++ ()$/;"	f	class:pcl::IteratorIdx
operator ++	include/pcl/impl/cloud_iterator.hpp	/^      void operator ++ (int)$/;"	f	class:pcl::ConstCloudIterator::ConstIteratorIdx
operator ++	include/pcl/impl/cloud_iterator.hpp	/^      void operator ++ (int)$/;"	f	class:pcl::ConstCloudIterator::DefaultConstIterator
operator ++	include/pcl/impl/cloud_iterator.hpp	/^      void operator ++ (int)$/;"	f	class:pcl::DefaultIterator
operator ++	include/pcl/impl/cloud_iterator.hpp	/^      void operator ++ (int)$/;"	f	class:pcl::IteratorIdx
operator ++	include/pcl/impl/cloud_iterator.hpp	/^pcl::CloudIterator<PointT>::operator ++ ()$/;"	f	class:pcl::CloudIterator
operator ++	include/pcl/impl/cloud_iterator.hpp	/^pcl::CloudIterator<PointT>::operator ++ (int)$/;"	f	class:pcl::CloudIterator
operator ++	include/pcl/impl/cloud_iterator.hpp	/^pcl::ConstCloudIterator<PointT>::operator ++ ()$/;"	f	class:pcl::ConstCloudIterator
operator ++	include/pcl/impl/cloud_iterator.hpp	/^pcl::ConstCloudIterator<PointT>::operator ++ (int)$/;"	f	class:pcl::ConstCloudIterator
operator +=	include/pcl/point_cloud.h	/^      operator += (const PointCloud& rhs)$/;"	f	class:pcl::PointCloud
operator +=	include/tf/LinearMath/Quaternion.h	/^	TFSIMD_FORCE_INLINE	Quaternion& operator+=(const Quaternion& q)$/;"	f	class:tf::Quaternion
operator +=	include/tf/LinearMath/Vector3.h	/^	TFSIMD_FORCE_INLINE Vector3& operator+=(const Vector3& v)$/;"	f	class:tf::Vector3
operator -	include/tf/LinearMath/Quaternion.h	/^	TFSIMD_FORCE_INLINE Quaternion operator-() const$/;"	f	class:tf::Quaternion
operator -	include/tf/LinearMath/Quaternion.h	/^	operator-(const Quaternion& q2) const$/;"	f	class:tf::Quaternion
operator -	include/tf/LinearMath/Quaternion.h	/^operator-(const Quaternion& q)$/;"	f	namespace:tf
operator -	include/tf/LinearMath/Vector3.h	/^operator-(const Vector3& v)$/;"	f	namespace:tf
operator -	include/tf/LinearMath/Vector3.h	/^operator-(const Vector3& v1, const Vector3& v2)$/;"	f	namespace:tf
operator -=	include/tf/LinearMath/Quaternion.h	/^	Quaternion& operator-=(const Quaternion& q) $/;"	f	class:tf::Quaternion
operator -=	include/tf/LinearMath/Vector3.h	/^	TFSIMD_FORCE_INLINE Vector3& operator-=(const Vector3& v) $/;"	f	class:tf::Vector3
operator ->	include/pcl/impl/cloud_iterator.hpp	/^      PointT* operator-> ()$/;"	f	class:pcl::DefaultIterator
operator ->	include/pcl/impl/cloud_iterator.hpp	/^      PointT* operator-> ()$/;"	f	class:pcl::IteratorIdx
operator ->	include/pcl/impl/cloud_iterator.hpp	/^      const PointT* operator-> () const$/;"	f	class:pcl::ConstCloudIterator::ConstIteratorIdx
operator ->	include/pcl/impl/cloud_iterator.hpp	/^      const PointT* operator-> () const$/;"	f	class:pcl::ConstCloudIterator::DefaultConstIterator
operator ->	include/pcl/impl/cloud_iterator.hpp	/^pcl::CloudIterator<PointT>::operator-> () const$/;"	f	class:pcl::CloudIterator
operator ->	include/pcl/impl/cloud_iterator.hpp	/^pcl::ConstCloudIterator<PointT>::operator-> () const$/;"	f	class:pcl::ConstCloudIterator
operator /	include/tf/LinearMath/Quaternion.h	/^	Quaternion operator\/(const tfScalar& s) const$/;"	f	class:tf::Quaternion
operator /	include/tf/LinearMath/Vector3.h	/^operator\/(const Vector3& v, const tfScalar& s)$/;"	f	namespace:tf
operator /	include/tf/LinearMath/Vector3.h	/^operator\/(const Vector3& v1, const Vector3& v2)$/;"	f	namespace:tf
operator /=	include/tf/LinearMath/Quaternion.h	/^	Quaternion& operator\/=(const tfScalar& s) $/;"	f	class:tf::Quaternion
operator /=	include/tf/LinearMath/Vector3.h	/^	TFSIMD_FORCE_INLINE Vector3& operator\/=(const tfScalar& s) $/;"	f	class:tf::Vector3
operator <	include/costmap_2d/inflation_layer.h	/^inline bool operator<(const CellData &a, const CellData &b)$/;"	f	namespace:costmap_2d
operator <	include/pcl/range_image/impl/range_image.hpp	/^    bool operator < (const NeighborWithDistance& other) const { return distance<other.distance;}$/;"	f	struct:pcl::__anon2::NeighborWithDistance
operator <<	include/map_msgs/GetMapROIRequest.h	/^std::ostream& operator<<(std::ostream& s, const ::map_msgs::GetMapROIRequest_<ContainerAllocator> & v)$/;"	f	namespace:map_msgs
operator <<	include/map_msgs/GetMapROIResponse.h	/^std::ostream& operator<<(std::ostream& s, const ::map_msgs::GetMapROIResponse_<ContainerAllocator> & v)$/;"	f	namespace:map_msgs
operator <<	include/map_msgs/GetPointMapROIRequest.h	/^std::ostream& operator<<(std::ostream& s, const ::map_msgs::GetPointMapROIRequest_<ContainerAllocator> & v)$/;"	f	namespace:map_msgs
operator <<	include/map_msgs/GetPointMapROIResponse.h	/^std::ostream& operator<<(std::ostream& s, const ::map_msgs::GetPointMapROIResponse_<ContainerAllocator> & v)$/;"	f	namespace:map_msgs
operator <<	include/map_msgs/GetPointMapRequest.h	/^std::ostream& operator<<(std::ostream& s, const ::map_msgs::GetPointMapRequest_<ContainerAllocator> & v)$/;"	f	namespace:map_msgs
operator <<	include/map_msgs/GetPointMapResponse.h	/^std::ostream& operator<<(std::ostream& s, const ::map_msgs::GetPointMapResponse_<ContainerAllocator> & v)$/;"	f	namespace:map_msgs
operator <<	include/map_msgs/OccupancyGridUpdate.h	/^std::ostream& operator<<(std::ostream& s, const ::map_msgs::OccupancyGridUpdate_<ContainerAllocator> & v)$/;"	f	namespace:map_msgs
operator <<	include/map_msgs/PointCloud2Update.h	/^std::ostream& operator<<(std::ostream& s, const ::map_msgs::PointCloud2Update_<ContainerAllocator> & v)$/;"	f	namespace:map_msgs
operator <<	include/map_msgs/ProjectedMap.h	/^std::ostream& operator<<(std::ostream& s, const ::map_msgs::ProjectedMap_<ContainerAllocator> & v)$/;"	f	namespace:map_msgs
operator <<	include/map_msgs/ProjectedMapInfo.h	/^std::ostream& operator<<(std::ostream& s, const ::map_msgs::ProjectedMapInfo_<ContainerAllocator> & v)$/;"	f	namespace:map_msgs
operator <<	include/map_msgs/ProjectedMapsInfoRequest.h	/^std::ostream& operator<<(std::ostream& s, const ::map_msgs::ProjectedMapsInfoRequest_<ContainerAllocator> & v)$/;"	f	namespace:map_msgs
operator <<	include/map_msgs/ProjectedMapsInfoResponse.h	/^std::ostream& operator<<(std::ostream& s, const ::map_msgs::ProjectedMapsInfoResponse_<ContainerAllocator> & v)$/;"	f	namespace:map_msgs
operator <<	include/map_msgs/SaveMapRequest.h	/^std::ostream& operator<<(std::ostream& s, const ::map_msgs::SaveMapRequest_<ContainerAllocator> & v)$/;"	f	namespace:map_msgs
operator <<	include/map_msgs/SaveMapResponse.h	/^std::ostream& operator<<(std::ostream& s, const ::map_msgs::SaveMapResponse_<ContainerAllocator> & v)$/;"	f	namespace:map_msgs
operator <<	include/map_msgs/SetMapProjectionsRequest.h	/^std::ostream& operator<<(std::ostream& s, const ::map_msgs::SetMapProjectionsRequest_<ContainerAllocator> & v)$/;"	f	namespace:map_msgs
operator <<	include/map_msgs/SetMapProjectionsResponse.h	/^std::ostream& operator<<(std::ostream& s, const ::map_msgs::SetMapProjectionsResponse_<ContainerAllocator> & v)$/;"	f	namespace:map_msgs
operator <<	include/pcl/ModelCoefficients.h	/^  inline std::ostream& operator<<(std::ostream& s, const  ::pcl::ModelCoefficients & v)$/;"	f	namespace:pcl
operator <<	include/pcl/PCLHeader.h	/^  inline std::ostream& operator << (std::ostream& out, const PCLHeader &h)$/;"	f	namespace:pcl
operator <<	include/pcl/PCLImage.h	/^  inline std::ostream& operator<<(std::ostream& s, const  ::pcl::PCLImage & v)$/;"	f	namespace:pcl
operator <<	include/pcl/PCLPointCloud2.h	/^  inline std::ostream& operator<<(std::ostream& s, const  ::pcl::PCLPointCloud2 &v)$/;"	f	namespace:pcl
operator <<	include/pcl/PCLPointField.h	/^  inline std::ostream& operator<<(std::ostream& s, const  ::pcl::PCLPointField & v)$/;"	f	namespace:pcl
operator <<	include/pcl/PointIndices.h	/^  inline std::ostream& operator << (std::ostream& s, const ::pcl::PointIndices &v)$/;"	f	namespace:pcl
operator <<	include/pcl/PolygonMesh.h	/^  inline std::ostream& operator<<(std::ostream& s, const  ::pcl::PolygonMesh &v)$/;"	f	namespace:pcl
operator <<	include/pcl/Vertices.h	/^  inline std::ostream& operator<<(std::ostream& s, const  ::pcl::Vertices & v)$/;"	f	namespace:pcl
operator <<	include/pcl/common/impl/bivariate_polynomial.hpp	/^pcl::operator<< (std::ostream& os, const pcl::BivariatePolynomialT<real>& p)$/;"	f	class:pcl
operator <<	include/pcl/impl/point_types.hpp	/^  operator << (std::ostream& os, const Histogram<N>& p)$/;"	f	namespace:pcl
operator <<	include/pcl/io/ply/io_operators.h	/^        inline std::ostream& operator<<(std::ostream& ostream, int8 value)$/;"	f	namespace:pcl::io::ply::io_operators
operator <<	include/pcl/io/ply/io_operators.h	/^        inline std::ostream& operator<<(std::ostream& ostream, uint8 value)$/;"	f	namespace:pcl::io::ply::io_operators
operator <<	include/pcl/point_cloud.h	/^  operator << (std::ostream& s, const pcl::PointCloud<PointT> &p)$/;"	f	namespace:pcl
operator <<	include/pcl/range_image/range_image.h	/^  operator<< (std::ostream& os, const RangeImage& r)$/;"	f	namespace:pcl
operator =	include/pcl/common/bivariate_polynomial.h	/^      operator= (const BivariatePolynomialT& other) { deepCopy (other); return *this;}$/;"	f	class:pcl::BivariatePolynomialT
operator =	include/pcl/common/pca.h	/^      operator= (PCA const & pca) $/;"	f	class:pcl::PCA
operator =	include/pcl/io/image_grabber.h	/^    operator = (const ImageGrabberBase &src)$/;"	f	class:pcl::ImageGrabberBase
operator =	include/pcl/io/pcd_grabber.h	/^      operator = (const PCDGrabberBase &src)$/;"	f	class:pcl::PCDGrabberBase
operator =	include/pcl/io/ply_io.h	/^      operator = (const PLYReader &p)$/;"	f	class:pcl::PLYReader
operator =	include/tf/LinearMath/Matrix3x3.h	/^	TFSIMD_FORCE_INLINE Matrix3x3& operator=(const Matrix3x3& other)$/;"	f	class:tf::Matrix3x3
operator =	include/tf/LinearMath/Transform.h	/^	TFSIMD_FORCE_INLINE Transform& operator=(const Transform& other)$/;"	f	class:tf::Transform
operator =	src/costmap_2d.cpp	/^Costmap2D& Costmap2D::operator=(const Costmap2D& map)$/;"	f	class:costmap_2d::Costmap2D
operator ==	include/pcl/PCLHeader.h	/^  inline bool operator== (const PCLHeader &lhs, const PCLHeader &rhs)$/;"	f	namespace:pcl
operator ==	include/tf/LinearMath/Matrix3x3.h	/^TFSIMD_FORCE_INLINE bool operator==(const Matrix3x3& m1, const Matrix3x3& m2)$/;"	f	namespace:tf
operator ==	include/tf/LinearMath/Transform.h	/^TFSIMD_FORCE_INLINE bool operator==(const Transform& t1, const Transform& t2)$/;"	f	namespace:tf
operator ==	include/tf/LinearMath/Vector3.h	/^	TFSIMD_FORCE_INLINE	bool	operator==(const Vector3& other) const$/;"	f	class:tf::Vector3
operator >>	include/pcl/io/ply/io_operators.h	/^        inline std::istream& operator>> (std::istream& istream, int8 &value)$/;"	f	namespace:pcl::io::ply::io_operators
operator >>	include/pcl/io/ply/io_operators.h	/^        inline std::istream& operator>> (std::istream& istream, uint8 &value)$/;"	f	namespace:pcl::io::ply::io_operators
operator []	include/pcl/io/image_grabber.h	/^  ImageGrabber<PointT>::operator[] (size_t idx) const$/;"	f	class:pcl::ImageGrabber
operator []	include/pcl/io/impl/buffers.hpp	/^pcl::io::AverageBuffer<T>::operator[] (size_t idx) const$/;"	f	class:pcl::io::AverageBuffer
operator []	include/pcl/io/impl/buffers.hpp	/^pcl::io::MedianBuffer<T>::operator[] (size_t idx) const$/;"	f	class:pcl::io::MedianBuffer
operator []	include/pcl/io/impl/buffers.hpp	/^pcl::io::SingleBuffer<T>::operator[] (size_t idx) const$/;"	f	class:pcl::io::SingleBuffer
operator []	include/pcl/io/pcd_grabber.h	/^  PCDGrabber<PointT>::operator[] (size_t idx) const$/;"	f	class:pcl::PCDGrabber
operator []	include/pcl/pcl_base.h	/^      inline const PointT& operator[] (size_t pos) const $/;"	f	class:pcl::PCLBase
operator []	include/pcl/point_cloud.h	/^      inline PointT& operator[] (size_t n) { return (points[n]); }$/;"	f	class:pcl::PointCloud
operator []	include/pcl/point_cloud.h	/^      inline const PointT& operator[] (size_t n) const { return (points[n]); }$/;"	f	class:pcl::PointCloud
operator []	include/tf/LinearMath/Matrix3x3.h	/^	TFSIMD_FORCE_INLINE Vector3&  operator[](int i)$/;"	f	class:tf::Matrix3x3
operator []	include/tf/LinearMath/Matrix3x3.h	/^	TFSIMD_FORCE_INLINE const Vector3& operator[](int i) const$/;"	f	class:tf::Matrix3x3
operator bool	include/pcl/cloud_iterator.h	/^      operator bool () const$/;"	f	class:pcl::CloudIterator
operator bool	include/pcl/cloud_iterator.h	/^      operator bool () const$/;"	f	class:pcl::ConstCloudIterator
operator const tfScalar *	include/tf/LinearMath/Vector3.h	/^	TFSIMD_FORCE_INLINE	operator const tfScalar *() const { return &m_floats[0]; }$/;"	f	class:tf::Vector3
operator tfScalar *	include/tf/LinearMath/Vector3.h	/^	TFSIMD_FORCE_INLINE	operator       tfScalar *()       { return &m_floats[0]; }$/;"	f	class:tf::Vector3
operator unsigned char	include/pcl/impl/point_types.hpp	/^    operator unsigned char() const$/;"	f	struct:pcl::Boundary
operator unsigned char	include/pcl/impl/point_types.hpp	/^    operator unsigned char() const$/;"	f	struct:pcl::Intensity8u
orientation	include/pcl/impl/point_types.hpp	/^    float orientation;$/;"	m	struct:pcl::BRISKSignature512
orientationXaxisXCallback	include/pcl/io/ply_io.h	/^      orientationXaxisXCallback (const float& value) { orientation_ (0,0) = value; }$/;"	f	class:pcl::PLYReader
orientationXaxisYCallback	include/pcl/io/ply_io.h	/^      orientationXaxisYCallback (const float& value) { orientation_ (0,1) = value; }$/;"	f	class:pcl::PLYReader
orientationXaxisZCallback	include/pcl/io/ply_io.h	/^      orientationXaxisZCallback (const float& value) { orientation_ (0,2) = value; }$/;"	f	class:pcl::PLYReader
orientationYaxisXCallback	include/pcl/io/ply_io.h	/^      orientationYaxisXCallback (const float& value) { orientation_ (1,0) = value; }$/;"	f	class:pcl::PLYReader
orientationYaxisYCallback	include/pcl/io/ply_io.h	/^      orientationYaxisYCallback (const float& value) { orientation_ (1,1) = value; }$/;"	f	class:pcl::PLYReader
orientationYaxisZCallback	include/pcl/io/ply_io.h	/^      orientationYaxisZCallback (const float& value) { orientation_ (1,2) = value; }$/;"	f	class:pcl::PLYReader
orientationZaxisXCallback	include/pcl/io/ply_io.h	/^      orientationZaxisXCallback (const float& value) { orientation_ (2,0) = value; }$/;"	f	class:pcl::PLYReader
orientationZaxisYCallback	include/pcl/io/ply_io.h	/^      orientationZaxisYCallback (const float& value) { orientation_ (2,1) = value; }$/;"	f	class:pcl::PLYReader
orientationZaxisZCallback	include/pcl/io/ply_io.h	/^      orientationZaxisZCallback (const float& value) { orientation_ (2,2) = value; }$/;"	f	class:pcl::PLYReader
orientation_	include/pcl/io/ply_io.h	/^      Eigen::Matrix3f orientation_;$/;"	m	class:pcl::PLYReader
originXCallback	include/pcl/io/ply_io.h	/^      originXCallback (const float& value) { origin_[0] = value; }$/;"	f	class:pcl::PLYReader
originYCallback	include/pcl/io/ply_io.h	/^      originYCallback (const float& value) { origin_[1] = value; }$/;"	f	class:pcl::PLYReader
originZCallback	include/pcl/io/ply_io.h	/^      originZCallback (const float& value) { origin_[2] = value; }$/;"	f	class:pcl::PLYReader
origin_	include/costmap_2d/observation.h	/^  geometry_msgs::Point origin_;$/;"	m	class:costmap_2d::Observation
origin_	include/pcl/io/ply_io.h	/^      Eigen::Vector4f origin_;$/;"	m	class:pcl::PLYReader
origin_x_	include/costmap_2d/costmap_2d.h	/^  double origin_x_;$/;"	m	class:costmap_2d::Costmap2D
origin_y_	include/costmap_2d/costmap_2d.h	/^  double origin_y_;$/;"	m	class:costmap_2d::Costmap2D
p	include/pcl/common/impl/accumulators.hpp	/^      PointT& p;$/;"	m	struct:pcl::detail::GetPoint
p	include/pcl/common/impl/accumulators.hpp	/^      const PointT& p;$/;"	m	struct:pcl::detail::AddPoint
p1_	include/pcl/common/concatenate.h	/^      const PodIn &p1_;$/;"	m	struct:pcl::NdConcatenateFunctor
p1_	include/pcl/point_cloud.h	/^      const Eigen::VectorXf &p1_;$/;"	m	struct:pcl::NdCopyEigenPointFunctor
p1_	include/pcl/point_cloud.h	/^      const Pod &p1_;$/;"	m	struct:pcl::NdCopyPointEigenFunctor
p1_	include/pcl/point_representation.h	/^      const Pod &p1_;$/;"	m	struct:pcl::DefaultFeatureRepresentation::NdCopyPointFunctor
p2_	include/pcl/common/concatenate.h	/^      PodOut &p2_;$/;"	m	struct:pcl::NdConcatenateFunctor
p2_	include/pcl/point_cloud.h	/^      Eigen::VectorXf &p2_;$/;"	m	struct:pcl::NdCopyPointEigenFunctor
p2_	include/pcl/point_cloud.h	/^      Pod &p2_;$/;"	m	struct:pcl::NdCopyEigenPointFunctor
p2_	include/pcl/point_representation.h	/^      float * p2_;$/;"	m	struct:pcl::DefaultFeatureRepresentation::NdCopyPointFunctor
p_	include/pcl/common/centroid.h	/^      const Pod &p_;$/;"	m	struct:pcl::NdCentroidFunctor
p_	include/pcl/io/depth_sense/depth_sense_grabber_impl.h	/^        DepthSenseGrabber* p_;$/;"	m	struct:pcl::io::depth_sense::DepthSenseGrabberImpl
p_	include/pcl/io/depth_sense_grabber.h	/^      pcl::io::depth_sense::DepthSenseGrabberImpl* p_;$/;"	m	class:pcl::DepthSenseGrabber
packet_queue_	include/pcl/io/robot_eye_grabber.h	/^      pcl::SynchronizedQueue<boost::shared_array<unsigned char> > packet_queue_;$/;"	m	class:pcl::RobotEyeGrabber
padFootprint	src/footprint.cpp	/^void padFootprint(std::vector<geometry_msgs::Point>& footprint, double padding)$/;"	f	namespace:costmap_2d
padded_footprint_	include/costmap_2d/costmap_2d_ros.h	/^  std::vector<geometry_msgs::Point> padded_footprint_;$/;"	m	class:costmap_2d::Costmap2DROS
paint_nans_with_black_	include/pcl/io/point_cloud_image_extractors.h	/^        bool paint_nans_with_black_;$/;"	m	class:pcl::io::PointCloudImageExtractor
pair_with	include/pcl/io/ply/ply_parser.h	/^              template <typename T> struct pair_with : boost::mpl::pair<T,boost::mpl::_> {};$/;"	s	class:pcl::io::ply::ply_parser::list_property_definition_callbacks_type
param_coeff_	include/pcl/io/openni_camera/openni_device.h	/^        XnUInt32 param_coeff_;$/;"	m	struct:openni_wrapper::OpenNIDevice::ShiftConversion
parameters	include/pcl/common/bivariate_polynomial.h	/^      real* parameters;$/;"	m	class:pcl::BivariatePolynomialT
parameters_	include/pcl/common/polynomial_calculations.h	/^      Parameters parameters_;$/;"	m	class:pcl::PolynomialCalculationsT
parameters_	include/pcl/common/poses_from_matches.h	/^      Parameters parameters_;$/;"	m	class:pcl::PosesFromMatches
parameters_	include/pcl/common/random.h	/^        Parameters parameters_;$/;"	m	class:pcl::common::NormalGenerator
parameters_	include/pcl/common/random.h	/^        Parameters parameters_;$/;"	m	class:pcl::common::UniformGenerator
parameters_	include/pcl/io/lzf_image_io.h	/^        CameraParameters parameters_;$/;"	m	class:pcl::io::LZFImageReader
parse	include/pcl/console/parse.h	/^    parse (int argc, char** argv, const char* argument_name, Type& value)$/;"	f	namespace:pcl::console
parse	include/pcl/io/ply/ply_parser.h	/^            bool parse (class ply_parser& ply_parser, $/;"	f	struct:pcl::io::ply::ply_parser::list_property
parse	include/pcl/io/ply/ply_parser.h	/^            bool parse (class ply_parser& ply_parser, $/;"	f	struct:pcl::io::ply::ply_parser::scalar_property
parseVVF	src/array_parser.cpp	/^std::vector<std::vector<float> > parseVVF(const std::string& input, std::string& error_return)$/;"	f	namespace:costmap_2d
parse_list_property	include/pcl/io/ply/ply_parser.h	/^inline bool pcl::io::ply::ply_parser::parse_list_property (format_type format, std::istream& istream, $/;"	f	class:pcl::io::ply::ply_parser
parse_list_property_definition	include/pcl/io/ply/ply_parser.h	/^inline void pcl::io::ply::ply_parser::parse_list_property_definition (const std::string& property_name)$/;"	f	class:pcl::io::ply::ply_parser
parse_scalar_property	include/pcl/io/ply/ply_parser.h	/^inline bool pcl::io::ply::ply_parser::parse_scalar_property (format_type format, $/;"	f	class:pcl::io::ply::ply_parser
parse_scalar_property_definition	include/pcl/io/ply/ply_parser.h	/^inline void pcl::io::ply::ply_parser::parse_scalar_property_definition (const std::string& property_name)$/;"	f	class:pcl::io::ply::ply_parser
parser_	include/pcl/io/ply_io.h	/^      ::pcl::io::ply::ply_parser parser_;$/;"	m	class:pcl::PLYReader
pause	src/costmap_2d_ros.cpp	/^void Costmap2DROS::pause()$/;"	f	class:costmap_2d::Costmap2DROS
pc1	include/pcl/impl/point_types.hpp	/^    float pc1;$/;"	m	struct:pcl::PrincipalCurvatures
pc2	include/pcl/impl/point_types.hpp	/^    float pc2;$/;"	m	struct:pcl::PrincipalCurvatures
pcap_file_name_	include/pcl/io/hdl_grabber.h	/^      std::string pcap_file_name_;$/;"	m	class:pcl::HDLGrabber
pcl	include/pcl/ModelCoefficients.h	/^namespace pcl$/;"	n
pcl	include/pcl/PCLHeader.h	/^namespace pcl$/;"	n
pcl	include/pcl/PCLImage.h	/^namespace pcl$/;"	n
pcl	include/pcl/PCLPointCloud2.h	/^namespace pcl$/;"	n
pcl	include/pcl/PCLPointField.h	/^namespace pcl$/;"	n
pcl	include/pcl/PointIndices.h	/^namespace pcl$/;"	n
pcl	include/pcl/PolygonMesh.h	/^namespace pcl$/;"	n
pcl	include/pcl/TextureMesh.h	/^namespace pcl$/;"	n
pcl	include/pcl/Vertices.h	/^namespace pcl$/;"	n
pcl	include/pcl/cloud_iterator.h	/^namespace pcl$/;"	n
pcl	include/pcl/common/angles.h	/^namespace pcl$/;"	n
pcl	include/pcl/common/bivariate_polynomial.h	/^namespace pcl $/;"	n
pcl	include/pcl/common/centroid.h	/^namespace pcl$/;"	n
pcl	include/pcl/common/colors.h	/^namespace pcl$/;"	n
pcl	include/pcl/common/common.h	/^namespace pcl$/;"	n
pcl	include/pcl/common/concatenate.h	/^namespace pcl$/;"	n
pcl	include/pcl/common/copy_point.h	/^namespace pcl$/;"	n
pcl	include/pcl/common/distances.h	/^namespace pcl$/;"	n
pcl	include/pcl/common/eigen.h	/^namespace pcl$/;"	n
pcl	include/pcl/common/feature_histogram.h	/^namespace pcl$/;"	n
pcl	include/pcl/common/file_io.h	/^namespace pcl$/;"	n
pcl	include/pcl/common/gaussian.h	/^namespace pcl$/;"	n
pcl	include/pcl/common/generate.h	/^namespace pcl$/;"	n
pcl	include/pcl/common/geometry.h	/^namespace pcl$/;"	n
pcl	include/pcl/common/impl/accumulators.hpp	/^namespace pcl$/;"	n
pcl	include/pcl/common/impl/angles.hpp	/^namespace pcl$/;"	n
pcl	include/pcl/common/impl/copy_point.hpp	/^namespace pcl$/;"	n
pcl	include/pcl/common/impl/file_io.hpp	/^namespace pcl$/;"	n
pcl	include/pcl/common/impl/intensity.hpp	/^namespace pcl$/;"	n
pcl	include/pcl/common/impl/norms.hpp	/^namespace pcl$/;"	n
pcl	include/pcl/common/impl/piecewise_linear_function.hpp	/^namespace pcl {$/;"	n
pcl	include/pcl/common/impl/projection_matrix.hpp	/^namespace pcl$/;"	n
pcl	include/pcl/common/impl/vector_average.hpp	/^namespace pcl$/;"	n
pcl	include/pcl/common/intensity.h	/^namespace pcl$/;"	n
pcl	include/pcl/common/intersections.h	/^namespace pcl$/;"	n
pcl	include/pcl/common/io.h	/^namespace pcl$/;"	n
pcl	include/pcl/common/norms.h	/^namespace pcl$/;"	n
pcl	include/pcl/common/pca.h	/^namespace pcl $/;"	n
pcl	include/pcl/common/piecewise_linear_function.h	/^namespace pcl $/;"	n
pcl	include/pcl/common/point_tests.h	/^namespace pcl$/;"	n
pcl	include/pcl/common/polynomial_calculations.h	/^namespace pcl $/;"	n
pcl	include/pcl/common/poses_from_matches.h	/^namespace pcl$/;"	n
pcl	include/pcl/common/projection_matrix.h	/^namespace pcl$/;"	n
pcl	include/pcl/common/random.h	/^namespace pcl $/;"	n
pcl	include/pcl/common/spring.h	/^namespace pcl$/;"	n
pcl	include/pcl/common/synchronizer.h	/^namespace pcl$/;"	n
pcl	include/pcl/common/time.h	/^namespace pcl$/;"	n
pcl	include/pcl/common/time_trigger.h	/^namespace pcl$/;"	n
pcl	include/pcl/common/transformation_from_correspondences.h	/^namespace pcl $/;"	n
pcl	include/pcl/common/transforms.h	/^namespace pcl$/;"	n
pcl	include/pcl/common/utils.h	/^namespace pcl$/;"	n
pcl	include/pcl/common/vector_average.h	/^namespace pcl $/;"	n
pcl	include/pcl/console/parse.h	/^namespace pcl$/;"	n
pcl	include/pcl/console/print.h	/^namespace pcl$/;"	n
pcl	include/pcl/console/time.h	/^namespace pcl$/;"	n
pcl	include/pcl/conversions.h	/^namespace pcl$/;"	n
pcl	include/pcl/correspondence.h	/^namespace pcl$/;"	n
pcl	include/pcl/exceptions.h	/^namespace pcl$/;"	n
pcl	include/pcl/for_each_type.h	/^namespace pcl $/;"	n
pcl	include/pcl/impl/cloud_iterator.hpp	/^namespace pcl$/;"	n
pcl	include/pcl/impl/point_types.hpp	/^namespace pcl$/;"	n
pcl	include/pcl/io/ascii_io.h	/^namespace pcl$/;"	n
pcl	include/pcl/io/auto_io.h	/^namespace pcl$/;"	n
pcl	include/pcl/io/buffers.h	/^namespace pcl$/;"	n
pcl	include/pcl/io/davidsdk_grabber.h	/^namespace pcl$/;"	n
pcl	include/pcl/io/debayer.h	/^namespace pcl$/;"	n
pcl	include/pcl/io/depth_sense/depth_sense_device_manager.h	/^namespace pcl$/;"	n
pcl	include/pcl/io/depth_sense/depth_sense_grabber_impl.h	/^namespace pcl$/;"	n
pcl	include/pcl/io/depth_sense_grabber.h	/^namespace pcl$/;"	n
pcl	include/pcl/io/dinast_grabber.h	/^namespace pcl$/;"	n
pcl	include/pcl/io/ensenso_grabber.h	/^namespace pcl$/;"	n
pcl	include/pcl/io/file_grabber.h	/^namespace pcl$/;"	n
pcl	include/pcl/io/file_io.h	/^namespace pcl$/;"	n
pcl	include/pcl/io/fotonic_grabber.h	/^namespace pcl$/;"	n
pcl	include/pcl/io/grabber.h	/^namespace pcl$/;"	n
pcl	include/pcl/io/hdl_grabber.h	/^namespace pcl$/;"	n
pcl	include/pcl/io/ifs_io.h	/^namespace pcl$/;"	n
pcl	include/pcl/io/image.h	/^namespace pcl$/;"	n
pcl	include/pcl/io/image_depth.h	/^namespace pcl$/;"	n
pcl	include/pcl/io/image_grabber.h	/^namespace pcl$/;"	n
pcl	include/pcl/io/image_ir.h	/^namespace pcl$/;"	n
pcl	include/pcl/io/image_metadata_wrapper.h	/^namespace pcl$/;"	n
pcl	include/pcl/io/image_rgb24.h	/^namespace pcl $/;"	n
pcl	include/pcl/io/image_yuv422.h	/^namespace pcl$/;"	n
pcl	include/pcl/io/impl/auto_io.hpp	/^namespace pcl$/;"	n
pcl	include/pcl/io/impl/synchronized_queue.hpp	/^namespace pcl$/;"	n
pcl	include/pcl/io/io_exception.h	/^namespace pcl$/;"	n
pcl	include/pcl/io/lzf.h	/^namespace pcl$/;"	n
pcl	include/pcl/io/lzf_image_io.h	/^namespace pcl$/;"	n
pcl	include/pcl/io/obj_io.h	/^namespace pcl$/;"	n
pcl	include/pcl/io/oni_grabber.h	/^namespace pcl$/;"	n
pcl	include/pcl/io/openni2/openni2_convert.h	/^namespace pcl$/;"	n
pcl	include/pcl/io/openni2/openni2_device.h	/^namespace pcl$/;"	n
pcl	include/pcl/io/openni2/openni2_device_info.h	/^namespace pcl$/;"	n
pcl	include/pcl/io/openni2/openni2_device_manager.h	/^namespace pcl$/;"	n
pcl	include/pcl/io/openni2/openni2_frame_listener.h	/^namespace pcl$/;"	n
pcl	include/pcl/io/openni2/openni2_metadata_wrapper.h	/^namespace pcl$/;"	n
pcl	include/pcl/io/openni2/openni2_timer_filter.h	/^namespace pcl$/;"	n
pcl	include/pcl/io/openni2/openni2_video_mode.h	/^namespace pcl$/;"	n
pcl	include/pcl/io/openni2_grabber.h	/^namespace pcl$/;"	n
pcl	include/pcl/io/openni_grabber.h	/^namespace pcl$/;"	n
pcl	include/pcl/io/pcd_grabber.h	/^namespace pcl$/;"	n
pcl	include/pcl/io/pcd_io.h	/^namespace pcl$/;"	n
pcl	include/pcl/io/ply/byte_order.h	/^namespace pcl$/;"	n
pcl	include/pcl/io/ply/io_operators.h	/^namespace pcl$/;"	n
pcl	include/pcl/io/ply/ply.h	/^namespace pcl$/;"	n
pcl	include/pcl/io/ply/ply_parser.h	/^namespace pcl$/;"	n
pcl	include/pcl/io/ply_io.h	/^namespace pcl$/;"	n
pcl	include/pcl/io/png_io.h	/^namespace pcl$/;"	n
pcl	include/pcl/io/point_cloud_image_extractors.h	/^namespace pcl$/;"	n
pcl	include/pcl/io/real_sense/real_sense_device_manager.h	/^namespace pcl$/;"	n
pcl	include/pcl/io/real_sense_grabber.h	/^namespace pcl$/;"	n
pcl	include/pcl/io/robot_eye_grabber.h	/^namespace pcl$/;"	n
pcl	include/pcl/io/tar.h	/^namespace pcl$/;"	n
pcl	include/pcl/io/vlp_grabber.h	/^namespace pcl$/;"	n
pcl	include/pcl/io/vtk_io.h	/^namespace pcl$/;"	n
pcl	include/pcl/io/vtk_lib_io.h	/^namespace pcl$/;"	n
pcl	include/pcl/pcl_base.h	/^namespace pcl$/;"	n
pcl	include/pcl/pcl_macros.h	/^namespace pcl$/;"	n
pcl	include/pcl/pcl_tests.h	/^namespace pcl$/;"	n
pcl	include/pcl/point_cloud.h	/^namespace pcl$/;"	n
pcl	include/pcl/point_representation.h	/^namespace pcl$/;"	n
pcl	include/pcl/point_traits.h	/^namespace pcl$/;"	n
pcl	include/pcl/point_types.h	/^namespace pcl $/;"	n
pcl	include/pcl/point_types.h	/^namespace pcl$/;"	n
pcl	include/pcl/point_types_conversion.h	/^namespace pcl$/;"	n
pcl	include/pcl/range_image/bearing_angle_image.h	/^namespace pcl$/;"	n
pcl	include/pcl/range_image/impl/range_image.hpp	/^namespace pcl$/;"	n
pcl	include/pcl/range_image/impl/range_image_planar.hpp	/^namespace pcl$/;"	n
pcl	include/pcl/range_image/impl/range_image_spherical.hpp	/^namespace pcl$/;"	n
pcl	include/pcl/range_image/range_image.h	/^namespace pcl$/;"	n
pcl	include/pcl/range_image/range_image_planar.h	/^namespace pcl$/;"	n
pcl	include/pcl/range_image/range_image_spherical.h	/^namespace pcl$/;"	n
pcl	include/pcl/register_point_struct.h	/^namespace pcl$/;"	n
pcl	include/pcl/ros/conversions.h	/^namespace pcl$/;"	n
pcl	include/pcl/sse.h	/^namespace pcl {$/;"	n
pcl_close	include/pcl/io/impl/pcd_io.hpp	61;"	d
pcl_close	include/pcl/io/impl/pcd_io.hpp	66;"	d
pcl_isfinite	include/pcl/pcl_macros.h	95;"	d
pcl_isinf	include/pcl/pcl_macros.h	96;"	d
pcl_isnan	include/pcl/pcl_macros.h	94;"	d
pcl_lrint	include/pcl/pcl_macros.h	164;"	d
pcl_lrint	include/pcl/pcl_macros.h	167;"	d
pcl_lrintf	include/pcl/pcl_macros.h	165;"	d
pcl_lrintf	include/pcl/pcl_macros.h	168;"	d
pcl_lseek	include/pcl/io/impl/pcd_io.hpp	62;"	d
pcl_lseek	include/pcl/io/impl/pcd_io.hpp	67;"	d
pcl_open	include/pcl/io/impl/pcd_io.hpp	60;"	d
pcl_open	include/pcl/io/impl/pcd_io.hpp	65;"	d
pcl_round	include/pcl/pcl_macros.h	/^pcl_round (double number)$/;"	f
pcl_round	include/pcl/pcl_macros.h	/^pcl_round (float number)$/;"	f
pcl_sleep	include/pcl/pcl_macros.h	181;"	d
pcl_sleep	include/pcl/pcl_macros.h	183;"	d
pcpx	include/pcl/common/fft/_kiss_fft_guts.h	149;"	d
pitch	include/pcl/impl/point_types.hpp	/^    float x, y, z, roll, pitch, yaw;$/;"	m	struct:pcl::Narf36
pixel_format_	include/pcl/io/openni2/openni2_video_mode.h	/^        PixelFormat pixel_format_;$/;"	m	struct:pcl::io::openni2::OpenNI2VideoMode
pixel_size	include/pcl/io/dinast_grabber.h	/^      enum pixel_size { RAW8=1, RGB16=2, RGB24=3, RGB32=4 };$/;"	g	class:pcl::DinastGrabber
pixel_size_factor_	include/pcl/io/openni_camera/openni_device.h	/^        XnUInt32 pixel_size_factor_;$/;"	m	struct:openni_wrapper::OpenNIDevice::ShiftConversion
planeWithPlaneIntersection	include/pcl/common/impl/intersections.hpp	/^pcl::planeWithPlaneIntersection (const Eigen::Matrix<Scalar, 4, 1> &plane_a, $/;"	f	class:pcl
planeWithPlaneIntersection	include/pcl/common/intersections.h	/^  planeWithPlaneIntersection (const Eigen::Vector4d &plane_a,$/;"	f	namespace:pcl
planeWithPlaneIntersection	include/pcl/common/intersections.h	/^  planeWithPlaneIntersection (const Eigen::Vector4f &plane_a,$/;"	f	namespace:pcl
player_	include/pcl/io/openni_camera/openni_device_oni.h	/^    xn::Player player_;$/;"	m	class:openni_wrapper::DeviceONI
player_condition_	include/pcl/io/openni_camera/openni_device_oni.h	/^    boost::condition_variable player_condition_;$/;"	m	class:openni_wrapper::DeviceONI
player_mutex_	include/pcl/io/openni_camera/openni_device_oni.h	/^    mutable boost::mutex player_mutex_;$/;"	m	class:openni_wrapper::DeviceONI
player_thread_	include/pcl/io/openni_camera/openni_device_oni.h	/^    boost::thread player_thread_;$/;"	m	class:openni_wrapper::DeviceONI
plugins_	include/costmap_2d/layered_costmap.h	/^  std::vector<boost::shared_ptr<Layer> > plugins_;$/;"	m	class:costmap_2d::LayeredCostmap
plus	include/pcl/register_point_struct.h	/^    plus (T &l, const T &r)$/;"	f	namespace:pcl::traits
plus	include/pcl/register_point_struct.h	/^    plus (typename boost::remove_const<T>::type &l, const T &r)$/;"	f	namespace:pcl::traits
plusscalar	include/pcl/register_point_struct.h	/^    plusscalar (T1 &p, const T2 &scalar)$/;"	f	namespace:pcl::traits
ply	include/pcl/io/ply/byte_order.h	/^    namespace ply$/;"	n	namespace:pcl::io
ply	include/pcl/io/ply/io_operators.h	/^    namespace ply $/;"	n	namespace:pcl::io
ply	include/pcl/io/ply/ply.h	/^    namespace ply $/;"	n	namespace:pcl::io
ply	include/pcl/io/ply/ply_parser.h	/^    namespace ply$/;"	n	namespace:pcl::io
ply_parser	include/pcl/io/ply/ply_parser.h	/^          ply_parser (flags_type flags = 0) : $/;"	f	class:pcl::io::ply::ply_parser
ply_parser	include/pcl/io/ply/ply_parser.h	/^      class PCL_EXPORTS ply_parser$/;"	c	namespace:pcl::io::ply
point1	include/pcl/correspondence.h	/^    Eigen::Vector3f point1;  \/\/!< The 3D position of the point in the first coordinate frame$/;"	m	struct:pcl::PointCorrespondence3D
point2	include/pcl/correspondence.h	/^    Eigen::Vector3f point2;  \/\/!< The 3D position of the point in the second coordinate frame$/;"	m	struct:pcl::PointCorrespondence3D
pointCloudTovtkPolyData	include/pcl/io/impl/vtk_lib_io.hpp	/^pcl::io::pointCloudTovtkPolyData (const pcl::PointCloud<PointT>& cloud, vtkPolyData* const pdata)$/;"	f	class:pcl::io
pointCloudTovtkStructuredGrid	include/pcl/io/impl/vtk_lib_io.hpp	/^pcl::io::pointCloudTovtkStructuredGrid (const pcl::PointCloud<PointT>& cloud, vtkStructuredGrid* const structured_grid)$/;"	f	class:pcl::io
point_cloud_i_signal_	include/pcl/io/oni_grabber.h	/^      boost::signals2::signal<sig_cb_openni_point_cloud_i >*    point_cloud_i_signal_;$/;"	m	class:pcl::ONIGrabber
point_cloud_i_signal_	include/pcl/io/openni2_grabber.h	/^        boost::signals2::signal<sig_cb_openni_point_cloud_i>* point_cloud_i_signal_;$/;"	m	class:pcl::io::OpenNI2Grabber
point_cloud_i_signal_	include/pcl/io/openni_grabber.h	/^      boost::signals2::signal<sig_cb_openni_point_cloud_i>* point_cloud_i_signal_;$/;"	m	class:pcl::OpenNIGrabber
point_cloud_image_signal_	include/pcl/io/davidsdk_grabber.h	/^      boost::signals2::signal<sig_cb_davidsdk_point_cloud_image>* point_cloud_image_signal_;$/;"	m	class:pcl::DavidSDKGrabber
point_cloud_images_signal_	include/pcl/io/ensenso_grabber.h	/^      boost::signals2::signal<sig_cb_ensenso_point_cloud_images>* point_cloud_images_signal_;$/;"	m	class:pcl::EnsensoGrabber
point_cloud_rgb_signal_	include/pcl/io/fotonic_grabber.h	/^      boost::signals2::signal<sig_cb_fotonic_point_cloud_rgb>* point_cloud_rgb_signal_;$/;"	m	class:pcl::FotonicGrabber
point_cloud_rgb_signal_	include/pcl/io/oni_grabber.h	/^      boost::signals2::signal<sig_cb_openni_point_cloud_rgb >*  point_cloud_rgb_signal_;$/;"	m	class:pcl::ONIGrabber
point_cloud_rgb_signal_	include/pcl/io/openni2_grabber.h	/^        boost::signals2::signal<sig_cb_openni_point_cloud_rgb>* point_cloud_rgb_signal_;$/;"	m	class:pcl::io::OpenNI2Grabber
point_cloud_rgb_signal_	include/pcl/io/openni_grabber.h	/^      boost::signals2::signal<sig_cb_openni_point_cloud_rgb>* point_cloud_rgb_signal_;$/;"	m	class:pcl::OpenNIGrabber
point_cloud_rgba_signal_	include/pcl/io/depth_sense/depth_sense_grabber_impl.h	/^        boost::signals2::signal<sig_cb_depth_sense_point_cloud_rgba>* point_cloud_rgba_signal_;$/;"	m	struct:pcl::io::depth_sense::DepthSenseGrabberImpl
point_cloud_rgba_signal_	include/pcl/io/fotonic_grabber.h	/^      boost::signals2::signal<sig_cb_fotonic_point_cloud_rgba>* point_cloud_rgba_signal_;$/;"	m	class:pcl::FotonicGrabber
point_cloud_rgba_signal_	include/pcl/io/oni_grabber.h	/^      boost::signals2::signal<sig_cb_openni_point_cloud_rgba >*  point_cloud_rgba_signal_;$/;"	m	class:pcl::ONIGrabber
point_cloud_rgba_signal_	include/pcl/io/openni2_grabber.h	/^        boost::signals2::signal<sig_cb_openni_point_cloud_rgba>* point_cloud_rgba_signal_;$/;"	m	class:pcl::io::OpenNI2Grabber
point_cloud_rgba_signal_	include/pcl/io/openni_grabber.h	/^      boost::signals2::signal<sig_cb_openni_point_cloud_rgba>* point_cloud_rgba_signal_;$/;"	m	class:pcl::OpenNIGrabber
point_cloud_rgba_signal_	include/pcl/io/real_sense_grabber.h	/^      boost::signals2::signal<sig_cb_real_sense_point_cloud_rgba>* point_cloud_rgba_signal_;$/;"	m	class:pcl::RealSenseGrabber
point_cloud_signal_	include/pcl/io/davidsdk_grabber.h	/^      boost::signals2::signal<sig_cb_davidsdk_point_cloud>* point_cloud_signal_;$/;"	m	class:pcl::DavidSDKGrabber
point_cloud_signal_	include/pcl/io/depth_sense/depth_sense_grabber_impl.h	/^        boost::signals2::signal<sig_cb_depth_sense_point_cloud>* point_cloud_signal_;$/;"	m	struct:pcl::io::depth_sense::DepthSenseGrabberImpl
point_cloud_signal_	include/pcl/io/dinast_grabber.h	/^      boost::signals2::signal<sig_cb_dinast_point_cloud>* point_cloud_signal_;$/;"	m	class:pcl::DinastGrabber
point_cloud_signal_	include/pcl/io/ensenso_grabber.h	/^      boost::signals2::signal<sig_cb_ensenso_point_cloud>* point_cloud_signal_;$/;"	m	class:pcl::EnsensoGrabber
point_cloud_signal_	include/pcl/io/fotonic_grabber.h	/^      boost::signals2::signal<sig_cb_fotonic_point_cloud>* point_cloud_signal_;$/;"	m	class:pcl::FotonicGrabber
point_cloud_signal_	include/pcl/io/oni_grabber.h	/^      boost::signals2::signal<sig_cb_openni_point_cloud >*      point_cloud_signal_;$/;"	m	class:pcl::ONIGrabber
point_cloud_signal_	include/pcl/io/openni2_grabber.h	/^        boost::signals2::signal<sig_cb_openni_point_cloud>* point_cloud_signal_;$/;"	m	class:pcl::io::OpenNI2Grabber
point_cloud_signal_	include/pcl/io/openni_grabber.h	/^      boost::signals2::signal<sig_cb_openni_point_cloud>* point_cloud_signal_;$/;"	m	class:pcl::OpenNIGrabber
point_cloud_signal_	include/pcl/io/real_sense_grabber.h	/^      boost::signals2::signal<sig_cb_real_sense_point_cloud>* point_cloud_signal_;$/;"	m	class:pcl::RealSenseGrabber
point_cloud_signal_	include/pcl/io/robot_eye_grabber.h	/^      boost::signals2::signal<sig_cb_robot_eye_point_cloud_xyzi>* point_cloud_signal_;$/;"	m	class:pcl::RobotEyeGrabber
point_cloud_xyzi_	include/pcl/io/robot_eye_grabber.h	/^      boost::shared_ptr<pcl::PointCloud<pcl::PointXYZI> > point_cloud_xyzi_;$/;"	m	class:pcl::RobotEyeGrabber
point_step	include/pcl/PCLPointCloud2.h	/^    pcl::uint32_t point_step;$/;"	m	struct:pcl::PCLPointCloud2
points	include/map_msgs/PointCloud2Update.h	/^  _points_type points;$/;"	m	struct:map_msgs::PointCloud2Update_
points	include/pcl/point_cloud.h	/^      std::vector<PointT, Eigen::aligned_allocator<PointT> > points;$/;"	m	class:pcl::PointCloud
polygonOutlineCells	src/costmap_2d.cpp	/^void Costmap2D::polygonOutlineCells(const std::vector<MapLocation>& polygon, std::vector<MapLocation>& polygon_cells)$/;"	f	class:costmap_2d::Costmap2D
polygons	include/pcl/PolygonMesh.h	/^    std::vector< ::pcl::Vertices>  polygons;$/;"	m	struct:pcl::PolygonMesh
polygons_	include/pcl/io/ply_io.h	/^      std::vector<pcl::Vertices> *polygons_;$/;"	m	class:pcl::PLYReader
preserve	include/pcl/common/pca.h	/^        preserve$/;"	e	enum:pcl::PCA::FLAG
principal_curvature	include/pcl/impl/point_types.hpp	/^      float principal_curvature[3];$/;"	m	union:pcl::PrincipalCurvatures::__anon37
principal_curvature_x	include/pcl/impl/point_types.hpp	/^        float principal_curvature_x;$/;"	m	struct:pcl::PrincipalCurvatures::__anon37::__anon38
principal_curvature_y	include/pcl/impl/point_types.hpp	/^        float principal_curvature_y;$/;"	m	struct:pcl::PrincipalCurvatures::__anon37::__anon38
principal_curvature_z	include/pcl/impl/point_types.hpp	/^        float principal_curvature_z;$/;"	m	struct:pcl::PrincipalCurvatures::__anon37::__anon38
principal_point_x	include/pcl/io/lzf_image_io.h	/^      double principal_point_x;$/;"	m	struct:pcl::io::CameraParameters
principal_point_x	include/pcl/io/openni2_grabber.h	/^          double principal_point_x;$/;"	m	struct:pcl::io::OpenNI2Grabber::CameraParameters
principal_point_y	include/pcl/io/lzf_image_io.h	/^      double principal_point_y;$/;"	m	struct:pcl::io::CameraParameters
principal_point_y	include/pcl/io/openni2_grabber.h	/^          double principal_point_y;$/;"	m	struct:pcl::io::OpenNI2Grabber::CameraParameters
printMap	include/costmap_2d/testing_helper.h	/^void printMap(costmap_2d::Costmap2D& costmap)$/;"	f
printableCost	include/costmap_2d/testing_helper.h	/^char printableCost(unsigned char cost)$/;"	f
product_id_	include/pcl/io/openni2/openni2_device_info.h	/^        uint16_t product_id_;$/;"	m	struct:pcl::io::openni2::OpenNI2DeviceInfo
project	include/pcl/common/geometry.h	/^    project (const Eigen::Vector3f& point, const Eigen::Vector3f &plane_origin, $/;"	f	namespace:pcl::geometry
project	include/pcl/common/geometry.h	/^    project (const PointT& point, const PointT &plane_origin, $/;"	f	namespace:pcl::geometry
project	include/pcl/common/impl/pca.hpp	/^pcl::PCA<PointT>::project (const PointCloud& input, PointCloud& projection)$/;"	f	class:pcl::PCA
project	include/pcl/common/impl/pca.hpp	/^pcl::PCA<PointT>::project (const PointT& input, PointT& projection)$/;"	f	class:pcl::PCA
projected_maps_info	include/map_msgs/ProjectedMapsInfoRequest.h	/^  _projected_maps_info_type projected_maps_info;$/;"	m	struct:map_msgs::ProjectedMapsInfoRequest_
projected_maps_info	include/map_msgs/SetMapProjectionsResponse.h	/^  _projected_maps_info_type projected_maps_info;$/;"	m	struct:map_msgs::SetMapProjectionsResponse_
projection_	include/pcl/io/depth_sense/depth_sense_grabber_impl.h	/^        boost::shared_ptr<DepthSense::ProjectionHelper> projection_;$/;"	m	struct:pcl::io::depth_sense::DepthSenseGrabberImpl
properties	include/pcl/io/ply/ply_parser.h	/^            std::vector<boost::shared_ptr<property> > properties;$/;"	m	struct:pcl::io::ply::ply_parser::element
property	include/pcl/io/ply/ply_parser.h	/^            property (const std::string& name) : name (name) {}$/;"	f	struct:pcl::io::ply::ply_parser::property
property	include/pcl/io/ply/ply_parser.h	/^          struct property$/;"	s	class:pcl::io::ply::ply_parser
providesCallback	include/pcl/io/grabber.h	/^  Grabber::providesCallback () const$/;"	f	class:pcl::Grabber
pt_	include/pcl/point_traits.h	/^      Pod &pt_;$/;"	m	struct:pcl::SetIfFieldExists
pt_	include/pcl/point_traits.h	/^      const Pod &pt_;$/;"	m	struct:pcl::CopyIfFieldExists
publish	include/pcl/common/synchronizer.h	/^    publish ()$/;"	f	class:pcl::Synchronizer
publish	include/pcl/io/image_grabber.h	/^  ImageGrabber<PointT>::publish (const pcl::PCLPointCloud2& blob, const Eigen::Vector4f& origin, const Eigen::Quaternionf& orientation) const$/;"	f	class:pcl::ImageGrabber
publish	include/pcl/io/pcd_grabber.h	/^  PCDGrabber<PointT>::publish (const pcl::PCLPointCloud2& blob, const Eigen::Vector4f& origin, const Eigen::Quaternionf& orientation, const std::string& file_name) const$/;"	f	class:pcl::PCDGrabber
publishData	include/pcl/common/synchronizer.h	/^    publishData ()$/;"	f	class:pcl::Synchronizer
publish_cycle	include/costmap_2d/costmap_2d_ros.h	/^  ros::Duration publish_cycle;$/;"	m	class:costmap_2d::Costmap2DROS
publish_mutex_	include/pcl/common/synchronizer.h	/^    boost::mutex publish_mutex_;$/;"	m	class:pcl::Synchronizer
purgeStaleObservations	src/observation_buffer.cpp	/^void ObservationBuffer::purgeStaleObservations()$/;"	f	class:costmap_2d::ObservationBuffer
push	include/pcl/io/impl/buffers.hpp	/^pcl::io::AverageBuffer<T>::push (std::vector<T>& data)$/;"	f	class:pcl::io::AverageBuffer
push	include/pcl/io/impl/buffers.hpp	/^pcl::io::MedianBuffer<T>::push (std::vector<T>& data)$/;"	f	class:pcl::io::MedianBuffer
push	include/pcl/io/impl/buffers.hpp	/^pcl::io::SingleBuffer<T>::push (std::vector<T>& data)$/;"	f	class:pcl::io::SingleBuffer
push_back	include/pcl/point_cloud.h	/^      push_back (const PointT& pt)$/;"	f	class:pcl::PointCloud
quatRotate	include/tf/LinearMath/Quaternion.h	/^quatRotate(const Quaternion& rotation, const Vector3& v) $/;"	f	namespace:tf
queueT1	include/pcl/common/synchronizer.h	/^    std::deque<T1Stamped> queueT1;$/;"	m	class:pcl::Synchronizer
queueT2	include/pcl/common/synchronizer.h	/^    std::deque<T2Stamped> queueT2;$/;"	m	class:pcl::Synchronizer
queue_	include/pcl/io/impl/synchronized_queue.hpp	/^      std::queue<T> queue_;              \/\/ Use STL queue to store data$/;"	m	class:pcl::SynchronizedQueue
queue_consumer_thread_	include/pcl/io/hdl_grabber.h	/^      boost::thread *queue_consumer_thread_;$/;"	m	class:pcl::HDLGrabber
quit_	include/pcl/common/time_trigger.h	/^      bool quit_;$/;"	m	class:pcl::TimeTrigger
quit_	include/pcl/io/openni_camera/openni_device.h	/^      bool quit_;$/;"	m	class:openni_wrapper::OpenNIDevice
r	include/map_msgs/GetPointMapROIRequest.h	/^  _r_type r;$/;"	m	struct:map_msgs::GetPointMapROIRequest_
r	include/pcl/TextureMesh.h	/^      float r;$/;"	m	struct:pcl::TexMaterial::RGB
r	include/pcl/common/fft/kiss_fft.h	/^    kiss_fft_scalar r;$/;"	m	struct:__anon47
r	include/pcl/common/impl/accumulators.hpp	/^      float r, g, b, a;$/;"	m	struct:pcl::detail::AccumulatorRGBA
r	include/pcl/io/image_rgb24.h	/^          uint8_t r;$/;"	m	struct:pcl::io::ImageRGB24::__anon3
r_	include/pcl/io/ply_io.h	/^      int32_t r_, g_, b_;$/;"	m	class:pcl::PLYReader
r_max	include/pcl/impl/point_types.hpp	/^    float r_min, r_max;$/;"	m	struct:pcl::PrincipalRadiiRSD
r_min	include/pcl/impl/point_types.hpp	/^    float r_min, r_max;$/;"	m	struct:pcl::PrincipalRadiiRSD
r_ratio	include/pcl/impl/point_types.hpp	/^    float r_ratio, g_ratio, b_ratio;$/;"	m	struct:pcl::PPFRGBSignature
rad2deg	include/pcl/common/impl/angles.hpp	/^  rad2deg (double alpha)$/;"	f	namespace:pcl
rad2deg	include/pcl/common/impl/angles.hpp	/^  rad2deg (float alpha)$/;"	f	namespace:pcl
radius	include/pcl/impl/point_types.hpp	/^        float radius;$/;"	m	struct:pcl::_PointSurfel::__anon44::__anon45
range	include/pcl/impl/point_types.hpp	/^        float range;$/;"	m	struct:pcl::_PointWithRange::__anon33::__anon34
range_grid_	include/pcl/io/ply_io.h	/^      std::vector<std::vector <int> > *range_grid_;$/;"	m	class:pcl::PLYReader
raw_buffer_	include/pcl/io/dinast_grabber.h	/^      unsigned char *raw_buffer_ ;$/;"	m	class:pcl::DinastGrabber
raytraceFreespace	src/obstacle_layer.cpp	/^void ObstacleLayer::raytraceFreespace(const Observation& clearing_observation, double* min_x, double* min_y,$/;"	f	class:costmap_2d::ObstacleLayer
raytraceLine	include/costmap_2d/costmap_2d.h	/^    inline void raytraceLine(ActionType at, unsigned int x0, unsigned int y0, unsigned int x1, unsigned int y1,$/;"	f	class:costmap_2d::Costmap2D
raytrace_range_	include/costmap_2d/observation.h	/^  double obstacle_range_, raytrace_range_;$/;"	m	class:costmap_2d::Observation
raytrace_range_	include/costmap_2d/observation_buffer.h	/^  double obstacle_range_, raytrace_range_;$/;"	m	class:costmap_2d::ObservationBuffer
read	include/pcl/io/file_io.h	/^      read (const std::string &file_name, pcl::PCLPointCloud2 &cloud, const int offset = 0)$/;"	f	class:pcl::FileReader
read	include/pcl/io/file_io.h	/^      read (const std::string &file_name, pcl::PointCloud<PointT> &cloud, const int offset  =0)$/;"	f	class:pcl::FileReader
read	include/pcl/io/ifs_io.h	/^      read (const std::string &file_name, pcl::PointCloud<PointT> &cloud)$/;"	f	class:pcl::IFSReader
read	include/pcl/io/impl/lzf_image_io.hpp	/^pcl::io::LZFBayer8ImageReader::read ($/;"	f	class:pcl::io::LZFBayer8ImageReader
read	include/pcl/io/impl/lzf_image_io.hpp	/^pcl::io::LZFDepth16ImageReader::read ($/;"	f	class:pcl::io::LZFDepth16ImageReader
read	include/pcl/io/impl/lzf_image_io.hpp	/^pcl::io::LZFRGB24ImageReader::read ($/;"	f	class:pcl::io::LZFRGB24ImageReader
read	include/pcl/io/impl/lzf_image_io.hpp	/^pcl::io::LZFYUV422ImageReader::read ($/;"	f	class:pcl::io::LZFYUV422ImageReader
read	include/pcl/io/obj_io.h	/^      read (const std::string &file_name, pcl::PointCloud<PointT> &cloud,$/;"	f	class:pcl::OBJReader
read	include/pcl/io/pcd_io.h	/^      read (const std::string &file_name, pcl::PointCloud<PointT> &cloud, const int offset = 0)$/;"	f	class:pcl::PCDReader
read	include/pcl/io/ply_io.h	/^      read (const std::string &file_name, pcl::PCLPointCloud2 &cloud, const int offset = 0)$/;"	f	class:pcl::PLYReader
read	include/pcl/io/ply_io.h	/^      read (const std::string &file_name, pcl::PointCloud<PointT> &cloud, const int offset = 0)$/;"	f	class:pcl::PLYReader
readBinary	include/pcl/common/impl/bivariate_polynomial.hpp	/^pcl::BivariatePolynomialT<real>::readBinary (const char* filename)$/;"	f	class:pcl::BivariatePolynomialT
readBinary	include/pcl/common/impl/bivariate_polynomial.hpp	/^pcl::BivariatePolynomialT<real>::readBinary (std::istream& os)$/;"	f	class:pcl::BivariatePolynomialT
readOMP	include/pcl/io/impl/lzf_image_io.hpp	/^pcl::io::LZFBayer8ImageReader::readOMP ($/;"	f	class:pcl::io::LZFBayer8ImageReader
readOMP	include/pcl/io/impl/lzf_image_io.hpp	/^pcl::io::LZFDepth16ImageReader::readOMP (const std::string &filename, $/;"	f	class:pcl::io::LZFDepth16ImageReader
readOMP	include/pcl/io/impl/lzf_image_io.hpp	/^pcl::io::LZFRGB24ImageReader::readOMP ($/;"	f	class:pcl::io::LZFRGB24ImageReader
readOMP	include/pcl/io/impl/lzf_image_io.hpp	/^pcl::io::LZFYUV422ImageReader::readOMP ($/;"	f	class:pcl::io::LZFYUV422ImageReader
readParameters	include/pcl/io/lzf_image_io.h	/^        readParameters (std::istream&) { return (false); }$/;"	f	class:pcl::io::LZFImageReader
real2DToInt2D	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::real2DToInt2D (float x, float y, int& xInt, int& yInt) const$/;"	f	class:pcl::RangeImage
real_sense	include/pcl/io/real_sense/real_sense_device_manager.h	/^    namespace real_sense$/;"	n	namespace:pcl::io
real_sense	include/pcl/io/real_sense_grabber.h	/^    namespace real_sense$/;"	n	namespace:pcl::io
receive_buffer_	include/pcl/io/robot_eye_grabber.h	/^      unsigned char receive_buffer_[MAX_LENGTH];$/;"	m	class:pcl::RobotEyeGrabber
reconfigureCB	src/costmap_2d_ros.cpp	/^void Costmap2DROS::reconfigureCB()$/;"	f	class:costmap_2d::Costmap2DROS
reconfigureCB	src/inflation_layer.cpp	/^void InflationLayer::reconfigureCB()$/;"	f	class:costmap_2d::InflationLayer
reconfigureCB	src/obstacle_layer.cpp	/^void ObstacleLayer::reconfigureCB()$/;"	f	class:costmap_2d::ObstacleLayer
reconfigureCB	src/static_layer.cpp	/^void StaticLayer::reconfigureCB()$/;"	f	class:costmap_2d::StaticLayer
reconstruct	include/pcl/common/impl/pca.hpp	/^pcl::PCA<PointT>::reconstruct (const PointCloud& projection, PointCloud& input)$/;"	f	class:pcl::PCA
reconstruct	include/pcl/common/impl/pca.hpp	/^pcl::PCA<PointT>::reconstruct (const PointT& projection, PointT& input)$/;"	f	class:pcl::PCA
registerCallback	include/pcl/io/grabber.h	/^  Grabber::registerCallback (const boost::function<T> & callback)$/;"	f	class:pcl::Grabber
registerDepthCallback	include/pcl/io/openni_camera/openni_device.h	/^  OpenNIDevice::registerDepthCallback (void (T::*callback)(boost::shared_ptr<DepthImage>, void* cookie), T& instance, void* custom_data) throw ()$/;"	f	class:openni_wrapper::OpenNIDevice
registerIRCallback	include/pcl/io/openni_camera/openni_device.h	/^  OpenNIDevice::registerIRCallback (void (T::*callback)(boost::shared_ptr<IRImage>, void* cookie), T& instance, void* custom_data) throw ()$/;"	f	class:openni_wrapper::OpenNIDevice
registerImageCallback	include/pcl/io/openni_camera/openni_device.h	/^  OpenNIDevice::registerImageCallback (void (T::*callback)(boost::shared_ptr<Image>, void* cookie), T& instance, void* custom_data) throw ()$/;"	f	class:openni_wrapper::OpenNIDevice
remote_path_	include/pcl/io/davidsdk_grabber.h	/^      std::string remote_path_;$/;"	m	class:pcl::DavidSDKGrabber
removeCallback	include/pcl/common/synchronizer.h	/^    removeCallback (int i)$/;"	f	class:pcl::Synchronizer
request	include/map_msgs/GetMapROI.h	/^Request request;$/;"	m	struct:map_msgs::GetMapROI
request	include/map_msgs/GetPointMap.h	/^Request request;$/;"	m	struct:map_msgs::GetPointMap
request	include/map_msgs/GetPointMapROI.h	/^Request request;$/;"	m	struct:map_msgs::GetPointMapROI
request	include/map_msgs/ProjectedMapsInfo.h	/^Request request;$/;"	m	struct:map_msgs::ProjectedMapsInfo
request	include/map_msgs/SaveMap.h	/^Request request;$/;"	m	struct:map_msgs::SaveMap
request	include/map_msgs/SetMapProjections.h	/^Request request;$/;"	m	struct:map_msgs::SetMapProjections
request_to_end_	include/pcl/io/impl/synchronized_queue.hpp	/^      bool request_to_end_;$/;"	m	class:pcl::SynchronizedQueue
reserve	include/pcl/point_cloud.h	/^      inline void reserve (size_t n) { points.reserve (n); }$/;"	f	class:pcl::PointCloud
reset	include/costmap_2d/inflation_layer.h	/^  virtual void reset() { onInitialize(); }$/;"	f	class:costmap_2d::InflationLayer
reset	include/costmap_2d/layer.h	/^  virtual void reset() {}$/;"	f	class:costmap_2d::Layer
reset	include/pcl/common/impl/transformation_from_correspondences.hpp	/^pcl::TransformationFromCorrespondences::reset ()$/;"	f	class:pcl::TransformationFromCorrespondences
reset	include/pcl/common/impl/vector_average.hpp	/^  inline void VectorAverage<real, dimension>::reset()$/;"	f	class:pcl::VectorAverage
reset	include/pcl/common/time.h	/^      reset ()$/;"	f	class:pcl::StopWatch
reset	include/pcl/common/time.h	/^      void reset ()$/;"	f	class:pcl::EventFrequency
reset	include/pcl/impl/cloud_iterator.hpp	/^      void reset ()$/;"	f	class:pcl::ConstCloudIterator::ConstIteratorIdx
reset	include/pcl/impl/cloud_iterator.hpp	/^      void reset ()$/;"	f	class:pcl::ConstCloudIterator::DefaultConstIterator
reset	include/pcl/impl/cloud_iterator.hpp	/^      void reset ()$/;"	f	class:pcl::DefaultIterator
reset	include/pcl/impl/cloud_iterator.hpp	/^      void reset ()$/;"	f	class:pcl::IteratorIdx
reset	include/pcl/impl/cloud_iterator.hpp	/^pcl::CloudIterator<PointT>::reset ()$/;"	f	class:pcl::CloudIterator
reset	include/pcl/impl/cloud_iterator.hpp	/^pcl::ConstCloudIterator<PointT>::reset ()$/;"	f	class:pcl::ConstCloudIterator
reset	include/pcl/io/real_sense/real_sense_device_manager.h	/^          reset (RealSenseDevice::Ptr& device)$/;"	f	class:pcl::io::real_sense::RealSenseDevice
reset	src/obstacle_layer.cpp	/^void ObstacleLayer::reset()$/;"	f	class:costmap_2d::ObstacleLayer
reset	src/static_layer.cpp	/^void StaticLayer::reset()$/;"	f	class:costmap_2d::StaticLayer
resetLastUpdated	src/observation_buffer.cpp	/^void ObservationBuffer::resetLastUpdated()$/;"	f	class:costmap_2d::ObservationBuffer
resetLayers	src/costmap_2d_ros.cpp	/^void Costmap2DROS::resetLayers()$/;"	f	class:costmap_2d::Costmap2DROS
resetMap	src/costmap_2d.cpp	/^void Costmap2D::resetMap(unsigned int x0, unsigned int y0, unsigned int xn, unsigned int yn)$/;"	f	class:costmap_2d::Costmap2D
resetMaps	src/costmap_2d.cpp	/^void Costmap2D::resetMaps()$/;"	f	class:costmap_2d::Costmap2D
resize	include/pcl/point_cloud.h	/^      inline void resize (size_t n) $/;"	f	class:pcl::PointCloud
resizeMap	src/costmap_2d.cpp	/^void Costmap2D::resizeMap(unsigned int size_x, unsigned int size_y, double resolution,$/;"	f	class:costmap_2d::Costmap2D
resizeMap	src/layered_costmap.cpp	/^void LayeredCostmap::resizeMap(unsigned int size_x, unsigned int size_y, double resolution, double origin_x,$/;"	f	class:costmap_2d::LayeredCostmap
resizingSupported	include/pcl/io/openni_camera/openni_image_bayer_grbg.h	/^  ImageBayerGRBG::resizingSupported (unsigned input_width, unsigned input_height, unsigned output_width, unsigned output_height)$/;"	f	class:openni_wrapper::ImageBayerGRBG
resizingSupported	include/pcl/io/openni_camera/openni_image_rgb24.h	/^  ImageRGB24::resizingSupported (unsigned input_width, unsigned input_height, unsigned output_width, unsigned output_height)$/;"	f	class:openni_wrapper::ImageRGB24
resizingSupported	include/pcl/io/openni_camera/openni_image_yuv_422.h	/^  ImageYUV422::resizingSupported (unsigned input_width, unsigned input_height, unsigned output_width, unsigned output_height)$/;"	f	class:openni_wrapper::ImageYUV422
resolution_	include/costmap_2d/costmap_2d.h	/^  double resolution_;$/;"	m	class:costmap_2d::Costmap2D
resolution_	include/costmap_2d/inflation_layer.h	/^  double resolution_;$/;"	m	class:costmap_2d::InflationLayer
response	include/map_msgs/GetMapROI.h	/^Response response;$/;"	m	struct:map_msgs::GetMapROI
response	include/map_msgs/GetPointMap.h	/^Response response;$/;"	m	struct:map_msgs::GetPointMap
response	include/map_msgs/GetPointMapROI.h	/^Response response;$/;"	m	struct:map_msgs::GetPointMapROI
response	include/map_msgs/ProjectedMapsInfo.h	/^Response response;$/;"	m	struct:map_msgs::ProjectedMapsInfo
response	include/map_msgs/SaveMap.h	/^Response response;$/;"	m	struct:map_msgs::SaveMap
response	include/map_msgs/SetMapProjections.h	/^Response response;$/;"	m	struct:map_msgs::SetMapProjections
response	include/pcl/impl/point_types.hpp	/^    float response;$/;"	m	struct:pcl::_PointWithScale
resume	src/costmap_2d_ros.cpp	/^void Costmap2DROS::resume()$/;"	f	class:costmap_2d::Costmap2DROS
rf	include/pcl/impl/point_types.hpp	/^      float rf[9];$/;"	m	union:pcl::_ReferenceFrame::__anon39
rf	include/pcl/impl/point_types.hpp	/^    float rf[9];$/;"	m	struct:pcl::SHOT1344
rf	include/pcl/impl/point_types.hpp	/^    float rf[9];$/;"	m	struct:pcl::SHOT352
rf	include/pcl/impl/point_types.hpp	/^    float rf[9];$/;"	m	struct:pcl::ShapeContext1980
rf	include/pcl/impl/point_types.hpp	/^    float rf[9];$/;"	m	struct:pcl::UniqueShapeContext1960
rgb_array_	include/pcl/io/openni_grabber.h	/^      mutable boost::shared_array<unsigned char> rgb_array_;$/;"	m	class:pcl::OpenNIGrabber
rgb_array_size_	include/pcl/io/openni_grabber.h	/^      mutable unsigned rgb_array_size_;$/;"	m	class:pcl::OpenNIGrabber
rgb_focal_length_SXGA_	include/pcl/io/openni_camera/openni_device.h	/^      float rgb_focal_length_SXGA_;$/;"	m	class:openni_wrapper::OpenNIDevice
rgb_focal_length_x_	include/pcl/io/openni_grabber.h	/^      double rgb_focal_length_x_;$/;"	m	class:pcl::OpenNIGrabber
rgb_focal_length_y_	include/pcl/io/openni_grabber.h	/^      double rgb_focal_length_y_;$/;"	m	class:pcl::OpenNIGrabber
rgb_frame_id_	include/pcl/io/oni_grabber.h	/^      std::string rgb_frame_id_;$/;"	m	class:pcl::ONIGrabber
rgb_frame_id_	include/pcl/io/openni2_grabber.h	/^        std::string rgb_frame_id_;$/;"	m	class:pcl::io::OpenNI2Grabber
rgb_frame_id_	include/pcl/io/openni_grabber.h	/^      std::string rgb_frame_id_;$/;"	m	class:pcl::OpenNIGrabber
rgb_offset_before_	include/pcl/io/ply_io.h	/^      size_t rgb_offset_before_;$/;"	m	class:pcl::PLYReader
rgb_parameters_	include/pcl/io/openni2_grabber.h	/^        CameraParameters rgb_parameters_;$/;"	m	class:pcl::io::OpenNI2Grabber
rgb_principal_point_x_	include/pcl/io/openni_grabber.h	/^      double rgb_principal_point_x_;$/;"	m	class:pcl::OpenNIGrabber
rgb_principal_point_y_	include/pcl/io/openni_grabber.h	/^      double rgb_principal_point_y_;$/;"	m	class:pcl::OpenNIGrabber
rgb_sync_	include/pcl/io/oni_grabber.h	/^      Synchronizer<boost::shared_ptr<openni_wrapper::Image>, boost::shared_ptr<openni_wrapper::DepthImage> > rgb_sync_;$/;"	m	class:pcl::ONIGrabber
rgb_sync_	include/pcl/io/openni2_grabber.h	/^        Synchronizer<pcl::io::openni2::Image::Ptr, pcl::io::openni2::DepthImage::Ptr > rgb_sync_;$/;"	m	class:pcl::io::OpenNI2Grabber
rgb_sync_	include/pcl/io/openni_grabber.h	/^      Synchronizer<boost::shared_ptr<openni_wrapper::Image>, boost::shared_ptr<openni_wrapper::DepthImage> > rgb_sync_;$/;"	m	class:pcl::OpenNIGrabber
rgba_	include/pcl/io/ply_io.h	/^      uint32_t a_, rgba_;$/;"	m	class:pcl::PLYReader
rng_	include/pcl/common/random.h	/^        EngineType rng_;$/;"	m	class:pcl::common::NormalGenerator
rng_	include/pcl/common/random.h	/^        EngineType rng_;$/;"	m	class:pcl::common::UniformGenerator
robot_base_frame_	include/costmap_2d/costmap_2d_ros.h	/^  std::string robot_base_frame_;  \/\/\/< @brief The frame_id of the robot base$/;"	m	class:costmap_2d::Costmap2DROS
robot_stopped_	include/costmap_2d/costmap_2d_ros.h	/^  bool stop_updates_, initialized_, stopped_, robot_stopped_;$/;"	m	class:costmap_2d::Costmap2DROS
roll	include/pcl/impl/point_types.hpp	/^    float x, y, z, roll, pitch, yaw;$/;"	m	struct:pcl::Narf36
rolling_window_	include/costmap_2d/layered_costmap.h	/^  bool rolling_window_;  \/\/\/ < @brief Whether or not the costmap should roll with the robot$/;"	m	class:costmap_2d::LayeredCostmap
rolling_window_	include/costmap_2d/obstacle_layer.h	/^  bool rolling_window_;$/;"	m	class:costmap_2d::ObstacleLayer
root_	include/pcl/io/ensenso_grabber.h	/^      boost::shared_ptr<const NxLibItem> root_;$/;"	m	class:pcl::EnsensoGrabber
ros	include/map_msgs/GetMapROI.h	/^namespace ros$/;"	n
ros	include/map_msgs/GetMapROIRequest.h	/^namespace ros$/;"	n
ros	include/map_msgs/GetMapROIResponse.h	/^namespace ros$/;"	n
ros	include/map_msgs/GetPointMap.h	/^namespace ros$/;"	n
ros	include/map_msgs/GetPointMapROI.h	/^namespace ros$/;"	n
ros	include/map_msgs/GetPointMapROIRequest.h	/^namespace ros$/;"	n
ros	include/map_msgs/GetPointMapROIResponse.h	/^namespace ros$/;"	n
ros	include/map_msgs/GetPointMapRequest.h	/^namespace ros$/;"	n
ros	include/map_msgs/GetPointMapResponse.h	/^namespace ros$/;"	n
ros	include/map_msgs/OccupancyGridUpdate.h	/^namespace ros$/;"	n
ros	include/map_msgs/PointCloud2Update.h	/^namespace ros$/;"	n
ros	include/map_msgs/ProjectedMap.h	/^namespace ros$/;"	n
ros	include/map_msgs/ProjectedMapInfo.h	/^namespace ros$/;"	n
ros	include/map_msgs/ProjectedMapsInfo.h	/^namespace ros$/;"	n
ros	include/map_msgs/ProjectedMapsInfoRequest.h	/^namespace ros$/;"	n
ros	include/map_msgs/ProjectedMapsInfoResponse.h	/^namespace ros$/;"	n
ros	include/map_msgs/SaveMap.h	/^namespace ros$/;"	n
ros	include/map_msgs/SaveMapRequest.h	/^namespace ros$/;"	n
ros	include/map_msgs/SaveMapResponse.h	/^namespace ros$/;"	n
ros	include/map_msgs/SetMapProjections.h	/^namespace ros$/;"	n
ros	include/map_msgs/SetMapProjectionsRequest.h	/^namespace ros$/;"	n
ros	include/map_msgs/SetMapProjectionsResponse.h	/^namespace ros$/;"	n
rotate	include/tf/LinearMath/Vector3.h	/^TFSIMD_FORCE_INLINE Vector3 Vector3::rotate( const Vector3& wAxis, const tfScalar angle ) const$/;"	f	class:tf::Vector3
rotationalPosition	include/pcl/io/hdl_grabber.h	/^          unsigned short rotationalPosition;$/;"	m	struct:pcl::HDLGrabber::HDLFiringData
row_step	include/pcl/PCLPointCloud2.h	/^    pcl::uint32_t row_step;$/;"	m	struct:pcl::PCLPointCloud2
run	include/pcl/common/random.h	/^        run () { return (generator_ ()); }$/;"	f	class:pcl::common::NormalGenerator
run	include/pcl/common/random.h	/^        run () { return (generator_ ()); }$/;"	f	class:pcl::common::UniformGenerator
running_	include/pcl/common/time_trigger.h	/^      bool running_;$/;"	m	class:pcl::TimeTrigger
running_	include/pcl/io/davidsdk_grabber.h	/^      bool running_;$/;"	m	class:pcl::DavidSDKGrabber
running_	include/pcl/io/dinast_grabber.h	/^      bool running_;$/;"	m	class:pcl::DinastGrabber
running_	include/pcl/io/ensenso_grabber.h	/^      bool running_;$/;"	m	class:pcl::EnsensoGrabber
running_	include/pcl/io/fotonic_grabber.h	/^      bool running_;$/;"	m	class:pcl::FotonicGrabber
running_	include/pcl/io/oni_grabber.h	/^      bool running_;$/;"	m	class:pcl::ONIGrabber
running_	include/pcl/io/openni2_grabber.h	/^        bool running_;$/;"	m	class:pcl::io::OpenNI2Grabber
running_	include/pcl/io/openni_grabber.h	/^      bool running_;$/;"	m	class:pcl::OpenNIGrabber
s	include/pcl/impl/point_types.hpp	/^        float s;$/;"	m	struct:pcl::_PointXYZHSV::__anon19::__anon20
save	include/pcl/io/impl/auto_io.hpp	/^    save (const std::string& file_name, const pcl::PointCloud<PointT>& cloud)$/;"	f	namespace:pcl::io
saveBinary	include/pcl/common/impl/eigen.hpp	/^pcl::saveBinary (const Eigen::MatrixBase<Derived>& matrix, std::ostream& file)$/;"	f	class:pcl
saveIFSFile	include/pcl/io/ifs_io.h	/^    saveIFSFile (const std::string &file_name, const pcl::PCLPointCloud2 &cloud)$/;"	f	namespace:pcl::io
saveIFSFile	include/pcl/io/ifs_io.h	/^    saveIFSFile (const std::string &file_name, const pcl::PointCloud<PointT> &cloud)$/;"	f	namespace:pcl::io
saveMap	src/costmap_2d.cpp	/^bool Costmap2D::saveMap(std::string file_name)$/;"	f	class:costmap_2d::Costmap2D
savePCDFile	include/pcl/io/pcd_io.h	/^    savePCDFile (const std::string &file_name, $/;"	f	namespace:pcl::io
savePCDFile	include/pcl/io/pcd_io.h	/^    savePCDFile (const std::string &file_name, const pcl::PCLPointCloud2 &cloud,$/;"	f	namespace:pcl::io
savePCDFile	include/pcl/io/pcd_io.h	/^    savePCDFile (const std::string &file_name, const pcl::PointCloud<PointT> &cloud, bool binary_mode = false)$/;"	f	namespace:pcl::io
savePCDFileASCII	include/pcl/io/pcd_io.h	/^    savePCDFileASCII (const std::string &file_name, const pcl::PointCloud<PointT> &cloud)$/;"	f	namespace:pcl::io
savePCDFileBinary	include/pcl/io/pcd_io.h	/^    savePCDFileBinary (const std::string &file_name, const pcl::PointCloud<PointT> &cloud)$/;"	f	namespace:pcl::io
savePCDFileBinaryCompressed	include/pcl/io/pcd_io.h	/^    savePCDFileBinaryCompressed (const std::string &file_name, const pcl::PointCloud<PointT> &cloud)$/;"	f	namespace:pcl::io
savePLYFile	include/pcl/io/ply_io.h	/^    savePLYFile (const std::string &file_name, const pcl::PCLPointCloud2 &cloud,$/;"	f	namespace:pcl::io
savePLYFile	include/pcl/io/ply_io.h	/^    savePLYFile (const std::string &file_name, const pcl::PointCloud<PointT> &cloud, bool binary_mode = false)$/;"	f	namespace:pcl::io
savePLYFile	include/pcl/io/ply_io.h	/^    savePLYFile (const std::string &file_name, const pcl::PointCloud<PointT> &cloud,$/;"	f	namespace:pcl::io
savePLYFileASCII	include/pcl/io/ply_io.h	/^    savePLYFileASCII (const std::string &file_name, const pcl::PointCloud<PointT> &cloud)$/;"	f	namespace:pcl::io
savePLYFileBinary	include/pcl/io/ply_io.h	/^    savePLYFileBinary (const std::string &file_name, const pcl::PointCloud<PointT> &cloud)$/;"	f	namespace:pcl::io
savePNGFile	include/pcl/io/png_io.h	/^    savePNGFile (const std::string& file_name, const pcl::PointCloud<PointT>& cloud, const std::string& field_name)$/;"	f	namespace:pcl::io
savePNGFile	include/pcl/io/png_io.h	/^    savePNGFile (const std::string& file_name, const pcl::PointCloud<T>& cloud)$/;"	f	namespace:pcl::io
saveTARPointCloud	include/pcl/io/tar.h	/^    saveTARPointCloud (const std::string& \/*tar_filename*\/,$/;"	f	namespace:pcl::io
scalar_property	include/pcl/io/ply/ply_parser.h	/^            scalar_property (const std::string& name, callback_type callback)$/;"	f	struct:pcl::io::ply::ply_parser::scalar_property
scalar_property	include/pcl/io/ply/ply_parser.h	/^          struct scalar_property : public property$/;"	s	class:pcl::io::ply::ply_parser
scalar_property_callback_type	include/pcl/io/ply/ply_parser.h	/^            typedef typename scalar_property_callback_type<ScalarType>::type scalar_property_callback_type;$/;"	t	struct:pcl::io::ply::ply_parser::scalar_property_definition_callback_type
scalar_property_callback_type	include/pcl/io/ply/ply_parser.h	/^          struct scalar_property_callback_type$/;"	s	class:pcl::io::ply::ply_parser
scalar_property_definition_callback_type	include/pcl/io/ply/ply_parser.h	/^          struct scalar_property_definition_callback_type$/;"	s	class:pcl::io::ply::ply_parser
scalar_property_definition_callbacks	include/pcl/io/ply/ply_parser.h	/^inline void pcl::io::ply::ply_parser::scalar_property_definition_callbacks (const scalar_property_definition_callbacks_type& scalar_property_definition_callbacks)$/;"	f	class:pcl::io::ply::ply_parser
scalar_property_definition_callbacks_	include/pcl/io/ply/ply_parser.h	/^          scalar_property_definition_callbacks_type scalar_property_definition_callbacks_;$/;"	m	class:pcl::io::ply::ply_parser
scalar_property_definition_callbacks_type	include/pcl/io/ply/ply_parser.h	/^          class scalar_property_definition_callbacks_type$/;"	c	class:pcl::io::ply::ply_parser
scalar_type	include/pcl/io/ply/ply_parser.h	/^                typedef T scalar_type;$/;"	t	struct:pcl::io::ply::ply_parser::scalar_property_definition_callbacks_type::callbacks_element
scalar_type	include/pcl/io/ply/ply_parser.h	/^                typedef typename T::second scalar_type;$/;"	t	struct:pcl::io::ply::ply_parser::list_property_definition_callbacks_type::callbacks_element
scalar_type	include/pcl/io/ply/ply_parser.h	/^            typedef ScalarType scalar_type;$/;"	t	struct:pcl::io::ply::ply_parser::list_property
scalar_type	include/pcl/io/ply/ply_parser.h	/^            typedef ScalarType scalar_type;$/;"	t	struct:pcl::io::ply::ply_parser::scalar_property
scalar_types	include/pcl/io/ply/ply_parser.h	/^          typedef boost::mpl::vector<int8, int16, int32, uint8, uint16, uint32, float32, float64> scalar_types;$/;"	t	class:pcl::io::ply::ply_parser
scale	include/pcl/impl/point_types.hpp	/^      float scale;$/;"	m	union:pcl::_PointWithScale::__anon43
scale	include/pcl/impl/point_types.hpp	/^    float scale;$/;"	m	struct:pcl::BRISKSignature512
scaled	include/tf/LinearMath/Matrix3x3.h	/^	Matrix3x3 scaled(const Vector3& s) const$/;"	f	class:tf::Matrix3x3
scaling_factor_	include/pcl/io/point_cloud_image_extractors.h	/^        float scaling_factor_;$/;"	m	class:pcl::io::PointCloudImageExtractorWithScaling
scaling_method_	include/pcl/io/point_cloud_image_extractors.h	/^        ScalingMethod scaling_method_;$/;"	m	class:pcl::io::PointCloudImageExtractorWithScaling
scan_xyz_signal_	include/pcl/io/hdl_grabber.h	/^      boost::signals2::signal<sig_cb_velodyne_hdl_scan_point_cloud_xyz>* scan_xyz_signal_;$/;"	m	class:pcl::HDLGrabber
scan_xyzi_signal_	include/pcl/io/hdl_grabber.h	/^      boost::signals2::signal<sig_cb_velodyne_hdl_scan_point_cloud_xyzi>* scan_xyzi_signal_;$/;"	m	class:pcl::HDLGrabber
scan_xyzrgb_signal_	include/pcl/io/hdl_grabber.h	/^      boost::signals2::signal<sig_cb_velodyne_hdl_scan_point_cloud_xyzrgb>* scan_xyzrgb_signal_;$/;"	m	class:pcl::HDLGrabber
score	include/pcl/common/poses_from_matches.h	/^        float score;                         \/\/!< An estimate in [0,1], how good the estimated pose is $/;"	m	struct:pcl::PosesFromMatches::PoseEstimate
second_image_	include/pcl/io/dinast_grabber.h	/^      bool second_image_;$/;"	m	class:pcl::DinastGrabber
seed	include/pcl/common/random.h	/^          pcl::uint32_t seed;$/;"	m	struct:pcl::common::NormalGenerator::Parameters
seed	include/pcl/common/random.h	/^          pcl::uint32_t seed;$/;"	m	struct:pcl::common::UniformGenerator::Parameters
seen_	include/costmap_2d/inflation_layer.h	/^  bool* seen_;$/;"	m	class:costmap_2d::InflationLayer
seen_size_	include/costmap_2d/inflation_layer.h	/^  int seen_size_;$/;"	m	class:costmap_2d::InflationLayer
selectNorm	include/pcl/common/impl/norms.hpp	/^selectNorm (FloatVectorT a, FloatVectorT b, int dim, NormType norm_type)$/;"	f	namespace:pcl
sender_endpoint_	include/pcl/io/robot_eye_grabber.h	/^      boost::asio::ip::udp::endpoint sender_endpoint_;$/;"	m	class:pcl::RobotEyeGrabber
sensorType	include/pcl/io/hdl_grabber.h	/^          unsigned char sensorType;$/;"	m	struct:pcl::HDLGrabber::HDLDataPacket
sensor_address_	include/pcl/io/robot_eye_grabber.h	/^      boost::asio::ip::address sensor_address_;$/;"	m	class:pcl::RobotEyeGrabber
sensor_frame_	include/costmap_2d/observation_buffer.h	/^  std::string sensor_frame_;$/;"	m	class:costmap_2d::ObservationBuffer
sensor_orientation_	include/pcl/point_cloud.h	/^      Eigen::Quaternionf sensor_orientation_;$/;"	m	class:pcl::PointCloud
sensor_origin_	include/pcl/point_cloud.h	/^      Eigen::Vector4f    sensor_origin_;$/;"	m	class:pcl::PointCloud
sep_chars_	include/pcl/io/ascii_io.h	/^      std::string sep_chars_;$/;"	m	class:pcl::ASCIIReader
seq	include/pcl/PCLHeader.h	/^    pcl::uint32_t seq;$/;"	m	struct:pcl::PCLHeader
sequence_product	include/pcl/io/ply/ply_parser.h	/^                struct sequence_product :$/;"	s	class:pcl::io::ply::ply_parser::list_property_definition_callbacks_type
serial	include/pcl/io/real_sense/real_sense_device_manager.h	/^            std::string serial;$/;"	m	struct:pcl::io::real_sense::RealSenseDeviceManager::DeviceInfo
serial_map_	include/pcl/io/openni_camera/openni_driver.h	/^    std::map< std::string, unsigned > serial_map_;$/;"	m	class:openni_wrapper::OpenNIDriver
serialization	include/map_msgs/GetMapROIRequest.h	/^namespace serialization$/;"	n	namespace:ros
serialization	include/map_msgs/GetMapROIResponse.h	/^namespace serialization$/;"	n	namespace:ros
serialization	include/map_msgs/GetPointMapROIRequest.h	/^namespace serialization$/;"	n	namespace:ros
serialization	include/map_msgs/GetPointMapROIResponse.h	/^namespace serialization$/;"	n	namespace:ros
serialization	include/map_msgs/GetPointMapRequest.h	/^namespace serialization$/;"	n	namespace:ros
serialization	include/map_msgs/GetPointMapResponse.h	/^namespace serialization$/;"	n	namespace:ros
serialization	include/map_msgs/OccupancyGridUpdate.h	/^namespace serialization$/;"	n	namespace:ros
serialization	include/map_msgs/PointCloud2Update.h	/^namespace serialization$/;"	n	namespace:ros
serialization	include/map_msgs/ProjectedMap.h	/^namespace serialization$/;"	n	namespace:ros
serialization	include/map_msgs/ProjectedMapInfo.h	/^namespace serialization$/;"	n	namespace:ros
serialization	include/map_msgs/ProjectedMapsInfoRequest.h	/^namespace serialization$/;"	n	namespace:ros
serialization	include/map_msgs/ProjectedMapsInfoResponse.h	/^namespace serialization$/;"	n	namespace:ros
serialization	include/map_msgs/SaveMapRequest.h	/^namespace serialization$/;"	n	namespace:ros
serialization	include/map_msgs/SaveMapResponse.h	/^namespace serialization$/;"	n	namespace:ros
serialization	include/map_msgs/SetMapProjectionsRequest.h	/^namespace serialization$/;"	n	namespace:ros
serialization	include/map_msgs/SetMapProjectionsResponse.h	/^namespace serialization$/;"	n	namespace:ros
serialize	include/tf/LinearMath/Matrix3x3.h	/^TFSIMD_FORCE_INLINE	void	Matrix3x3::serialize(struct	Matrix3x3Data& dataOut) const$/;"	f	class:tf::Matrix3x3
serialize	include/tf/LinearMath/Transform.h	/^TFSIMD_FORCE_INLINE	void	Transform::serialize(TransformData& dataOut) const$/;"	f	class:tf::Transform
serialize	include/tf/LinearMath/Vector3.h	/^TFSIMD_FORCE_INLINE	void	Vector3::serialize(struct	Vector3Data& dataOut) const$/;"	f	class:tf::Vector3
serializeDouble	include/tf/LinearMath/Vector3.h	/^TFSIMD_FORCE_INLINE	void	Vector3::serializeDouble(struct	Vector3DoubleData& dataOut) const$/;"	f	class:tf::Vector3
serializeFloat	include/tf/LinearMath/Matrix3x3.h	/^TFSIMD_FORCE_INLINE	void	Matrix3x3::serializeFloat(struct	Matrix3x3FloatData& dataOut) const$/;"	f	class:tf::Matrix3x3
serializeFloat	include/tf/LinearMath/Transform.h	/^TFSIMD_FORCE_INLINE	void	Transform::serializeFloat(TransformFloatData& dataOut) const$/;"	f	class:tf::Transform
serializeFloat	include/tf/LinearMath/Vector3.h	/^TFSIMD_FORCE_INLINE	void	Vector3::serializeFloat(struct	Vector3FloatData& dataOut) const$/;"	f	class:tf::Vector3
serialized_offset	include/pcl/point_cloud.h	/^      size_t serialized_offset;$/;"	m	struct:pcl::detail::FieldMapping
service_traits	include/map_msgs/GetMapROI.h	/^namespace service_traits$/;"	n	namespace:ros
service_traits	include/map_msgs/GetPointMap.h	/^namespace service_traits$/;"	n	namespace:ros
service_traits	include/map_msgs/GetPointMapROI.h	/^namespace service_traits$/;"	n	namespace:ros
service_traits	include/map_msgs/ProjectedMapsInfo.h	/^namespace service_traits$/;"	n	namespace:ros
service_traits	include/map_msgs/SaveMap.h	/^namespace service_traits$/;"	n	namespace:ros
service_traits	include/map_msgs/SetMapProjections.h	/^namespace service_traits$/;"	n	namespace:ros
session_	include/pcl/io/real_sense/real_sense_device_manager.h	/^          boost::shared_ptr<PXCSession> session_;$/;"	m	class:pcl::io::real_sense::RealSenseDeviceManager
set	include/pcl/common/impl/intensity.hpp	/^      set (pcl::InterestPoint &p, float intensity) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
set	include/pcl/common/impl/intensity.hpp	/^      set (pcl::PointNormal &p, float intensity) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
set	include/pcl/common/impl/intensity.hpp	/^      set (pcl::PointSurfel &p, float intensity) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
set	include/pcl/common/impl/intensity.hpp	/^      set (pcl::PointWithRange &p, float intensity) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
set	include/pcl/common/impl/intensity.hpp	/^      set (pcl::PointWithScale &p, float intensity) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
set	include/pcl/common/impl/intensity.hpp	/^      set (pcl::PointWithViewpoint &p, float intensity) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
set	include/pcl/common/impl/intensity.hpp	/^      set (pcl::PointXYZ &p, float intensity) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
set	include/pcl/common/impl/intensity.hpp	/^      set (pcl::PointXYZHSV &p, float intensity) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
set	include/pcl/common/impl/intensity.hpp	/^      set (pcl::PointXYZL &p, float intensity) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
set	include/pcl/common/impl/intensity.hpp	/^      set (pcl::PointXYZLNormal &p, float intensity) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
set	include/pcl/common/impl/intensity.hpp	/^      set (pcl::PointXYZRGB &p, float intensity) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
set	include/pcl/common/impl/intensity.hpp	/^      set (pcl::PointXYZRGBA &p, float intensity) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
set	include/pcl/common/impl/intensity.hpp	/^      set (pcl::PointXYZRGBL &p, float intensity) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
set	include/pcl/common/impl/intensity.hpp	/^      set (pcl::PointXYZRGBNormal &p, float intensity) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
set	include/pcl/common/intensity.h	/^      set (PointT &p, float intensity) const$/;"	f	struct:pcl::common::IntensityFieldAccessor
setAngularResolution	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::setAngularResolution (float angular_resolution)$/;"	f	class:pcl::RangeImage
setAngularResolution	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::setAngularResolution (float angular_resolution_x, float angular_resolution_y)$/;"	f	class:pcl::RangeImage
setBasis	include/tf/LinearMath/Transform.h	/^	TFSIMD_FORCE_INLINE void setBasis(const Matrix3x3& basis)$/;"	f	class:tf::Transform
setCallback	include/pcl/io/openni2/openni2_frame_listener.h	/^          setCallback (StreamCallbackFunction cb)$/;"	f	class:pcl::io::openni2::OpenNI2FrameListener
setColorMode	include/pcl/io/point_cloud_image_extractors.h	/^        setColorMode (const ColorMode color_mode)$/;"	f	class:pcl::io::PointCloudImageExtractorFromLabelField
setConvexPolygonCost	src/costmap_2d.cpp	/^bool Costmap2D::setConvexPolygonCost(const std::vector<geometry_msgs::Point>& polygon, unsigned char cost_value)$/;"	f	class:costmap_2d::Costmap2D
setCost	src/costmap_2d.cpp	/^void Costmap2D::setCost(unsigned int mx, unsigned int my, unsigned char cost)$/;"	f	class:costmap_2d::Costmap2D
setDebayeringMethod	include/pcl/io/openni_camera/openni_device_kinect.h	/^  DeviceKinect::setDebayeringMethod (const ImageBayerGRBG::DebayeringMethod& debayering_method) throw ()$/;"	f	class:openni_wrapper::DeviceKinect
setDebayeringMethod	include/pcl/io/openni_camera/openni_image_bayer_grbg.h	/^  ImageBayerGRBG::setDebayeringMethod (const ImageBayerGRBG::DebayeringMethod& method) throw ()$/;"	f	class:openni_wrapper::ImageBayerGRBG
setDefaultValue	include/costmap_2d/costmap_2d.h	/^  void setDefaultValue(unsigned char c)$/;"	f	class:costmap_2d::Costmap2D
setDegree	include/pcl/common/impl/bivariate_polynomial.hpp	/^pcl::BivariatePolynomialT<real>::setDegree (int newDegree)$/;"	f	class:pcl::BivariatePolynomialT
setDepthCameraIntrinsics	include/pcl/io/openni2_grabber.h	/^        setDepthCameraIntrinsics (const double depth_focal_length_x,$/;"	f	class:pcl::io::OpenNI2Grabber
setDepthCameraIntrinsics	include/pcl/io/openni_grabber.h	/^      setDepthCameraIntrinsics (const double depth_focal_length_x, $/;"	f	class:pcl::OpenNIGrabber
setDepthFocalLength	include/pcl/io/openni2_grabber.h	/^        setDepthFocalLength (const double depth_focal_length)$/;"	f	class:pcl::io::OpenNI2Grabber
setDepthFocalLength	include/pcl/io/openni2_grabber.h	/^        setDepthFocalLength (const double depth_focal_length_x, const double depth_focal_length_y)$/;"	f	class:pcl::io::OpenNI2Grabber
setDepthFocalLength	include/pcl/io/openni_camera/openni_device.h	/^      setDepthFocalLength (float focal_length)$/;"	f	class:openni_wrapper::OpenNIDevice
setDepthFocalLength	include/pcl/io/openni_grabber.h	/^      setDepthFocalLength (const double depth_focal_length)$/;"	f	class:pcl::OpenNIGrabber
setDepthFocalLength	include/pcl/io/openni_grabber.h	/^      setDepthFocalLength (const double depth_focal_length_x, const double depth_focal_length_y)$/;"	f	class:pcl::OpenNIGrabber
setEuler	include/tf/LinearMath/Quaternion.h	/^	void setEuler(const tfScalar& yaw, const tfScalar& pitch, const tfScalar& roll)$/;"	f	class:tf::Quaternion
setEulerYPR	include/tf/LinearMath/Matrix3x3.h	/^	void setEulerYPR(tfScalar eulerZ, tfScalar eulerY,tfScalar eulerX)  { $/;"	f	class:tf::Matrix3x3
setEulerZYX	include/tf/LinearMath/Matrix3x3.h	/^	void setEulerZYX(const tfScalar& yaw, const tfScalar& pitch, const tfScalar& roll) __attribute__((deprecated))$/;"	f	class:tf::Matrix3x3
setEulerZYX	include/tf/LinearMath/Quaternion.h	/^  void setEulerZYX(const tfScalar& yaw, const tfScalar& pitch, const tfScalar& roll) __attribute__((deprecated))$/;"	f	class:tf::Quaternion
setExtension	include/pcl/io/ascii_io.h	/^      setExtension (const std::string &ext) { extension_ = ext; }$/;"	f	class:pcl::ASCIIReader
setFieldValue	include/pcl/point_traits.h	/^  setFieldValue (PointT &pt, size_t field_offset, const ValT &value)$/;"	f	namespace:pcl
setFootprint	src/layered_costmap.cpp	/^void LayeredCostmap::setFootprint(const std::vector<geometry_msgs::Point>& footprint_spec)$/;"	f	class:costmap_2d::LayeredCostmap
setFromOpenGLMatrix	include/tf/LinearMath/Transform.h	/^	void setFromOpenGLMatrix(const tfScalar *m)$/;"	f	class:tf::Transform
setFromOpenGLSubMatrix	include/tf/LinearMath/Matrix3x3.h	/^	void setFromOpenGLSubMatrix(const tfScalar *m)$/;"	f	class:tf::Matrix3x3
setGlobalFrame	src/observation_buffer.cpp	/^bool ObservationBuffer::setGlobalFrame(const std::string new_global_frame)$/;"	f	class:costmap_2d::ObservationBuffer
setIdentity	include/tf/LinearMath/Matrix3x3.h	/^	void setIdentity()$/;"	f	class:tf::Matrix3x3
setIdentity	include/tf/LinearMath/Transform.h	/^	void setIdentity()$/;"	f	class:tf::Transform
setImageOffsets	include/pcl/range_image/range_image.h	/^      setImageOffsets (int offset_x, int offset_y) { image_offset_x_=offset_x; image_offset_y_=offset_y;}$/;"	f	class:pcl::RangeImage
setIndices	include/pcl/common/pca.h	/^      setIndices (const IndicesConstPtr &indices)$/;"	f	class:pcl::PCA
setIndices	include/pcl/common/pca.h	/^      setIndices (const IndicesPtr &indices)$/;"	f	class:pcl::PCA
setIndices	include/pcl/common/pca.h	/^      setIndices (const PointIndicesConstPtr &indices)$/;"	f	class:pcl::PCA
setIndices	include/pcl/common/pca.h	/^      setIndices (size_t row_start, size_t col_start, size_t nb_rows, size_t nb_cols)$/;"	f	class:pcl::PCA
setIndices	include/pcl/impl/pcl_base.hpp	/^pcl::PCLBase<PointT>::setIndices (const IndicesConstPtr &indices)$/;"	f	class:pcl::PCLBase
setIndices	include/pcl/impl/pcl_base.hpp	/^pcl::PCLBase<PointT>::setIndices (const IndicesPtr &indices)$/;"	f	class:pcl::PCLBase
setIndices	include/pcl/impl/pcl_base.hpp	/^pcl::PCLBase<PointT>::setIndices (const PointIndicesConstPtr &indices)$/;"	f	class:pcl::PCLBase
setIndices	include/pcl/impl/pcl_base.hpp	/^pcl::PCLBase<PointT>::setIndices (size_t row_start, size_t col_start, size_t nb_rows, size_t nb_cols)$/;"	f	class:pcl::PCLBase
setInflationParameters	src/inflation_layer.cpp	/^void InflationLayer::setInflationParameters(double inflation_radius, double cost_scaling_factor)$/;"	f	class:costmap_2d::InflationLayer
setInputCloud	include/pcl/common/pca.h	/^      setInputCloud (const PointCloudConstPtr &cloud) $/;"	f	class:pcl::PCA
setInputCloud	include/pcl/impl/pcl_base.hpp	/^pcl::PCLBase<PointT>::setInputCloud (const PointCloudConstPtr &cloud)$/;"	f	class:pcl::PCLBase
setInputFields	include/pcl/io/ascii_io.h	/^      inline void setInputFields (const PointT p)$/;"	f	class:pcl::ASCIIReader
setInputFields	include/pcl/io/impl/ascii_io.hpp	/^pcl::ASCIIReader::setInputFields ()$/;"	f	class:pcl::ASCIIReader
setInterpolate3	include/tf/LinearMath/Vector3.h	/^	TFSIMD_FORCE_INLINE void setInterpolate3(const Vector3& v0, const Vector3& v1, tfScalar rt)$/;"	f	class:tf::Vector3
setMapSynchronization	include/pcl/io/pcd_io.h	/^      setMapSynchronization (bool sync)$/;"	f	class:pcl::PCDWriter
setMax	include/tf/LinearMath/Vector3.h	/^		TFSIMD_FORCE_INLINE void	setMax(const Vector3& other)$/;"	f	class:tf::Vector3
setMin	include/tf/LinearMath/Vector3.h	/^		TFSIMD_FORCE_INLINE void	setMin(const Vector3& other)$/;"	f	class:tf::Vector3
setOrigin	include/tf/LinearMath/Transform.h	/^	TFSIMD_FORCE_INLINE void setOrigin(const Vector3& origin) $/;"	f	class:tf::Transform
setPaintNaNsWithBlack	include/pcl/io/point_cloud_image_extractors.h	/^        setPaintNaNsWithBlack (bool flag)$/;"	f	class:pcl::io::PointCloudImageExtractor
setParameters	include/pcl/common/impl/generate.hpp	/^pcl::common::CloudGenerator<PointT, GeneratorT>::setParameters (const GeneratorParameters& params)$/;"	f	class:pcl::common::CloudGenerator
setParameters	include/pcl/common/impl/generate.hpp	/^pcl::common::CloudGenerator<pcl::PointXY, GeneratorT>::setParameters (const GeneratorParameters& params)$/;"	f	class:pcl::common::CloudGenerator
setParameters	include/pcl/common/impl/random.hpp	/^pcl::common::NormalGenerator<T>::setParameters (T mean, T sigma, pcl::uint32_t seed)$/;"	f	class:pcl::common::NormalGenerator
setParameters	include/pcl/common/impl/random.hpp	/^pcl::common::NormalGenerator<T>::setParameters (const Parameters& parameters)$/;"	f	class:pcl::common::NormalGenerator
setParameters	include/pcl/common/impl/random.hpp	/^pcl::common::UniformGenerator<T>::setParameters (T min, T max, pcl::uint32_t seed)$/;"	f	class:pcl::common::UniformGenerator
setParameters	include/pcl/common/impl/random.hpp	/^pcl::common::UniformGenerator<T>::setParameters (const Parameters& parameters)$/;"	f	class:pcl::common::UniformGenerator
setParameters	include/pcl/io/lzf_image_io.h	/^        setParameters (const CameraParameters &parameters)$/;"	f	class:pcl::io::LZFImageReader
setParametersForX	include/pcl/common/impl/generate.hpp	/^pcl::common::CloudGenerator<PointT, GeneratorT>::setParametersForX (const GeneratorParameters& x_params)$/;"	f	class:pcl::common::CloudGenerator
setParametersForX	include/pcl/common/impl/generate.hpp	/^pcl::common::CloudGenerator<pcl::PointXY, GeneratorT>::setParametersForX (const GeneratorParameters& x_params)$/;"	f	class:pcl::common::CloudGenerator
setParametersForY	include/pcl/common/impl/generate.hpp	/^pcl::common::CloudGenerator<PointT, GeneratorT>::setParametersForY (const GeneratorParameters& y_params)$/;"	f	class:pcl::common::CloudGenerator
setParametersForY	include/pcl/common/impl/generate.hpp	/^pcl::common::CloudGenerator<pcl::PointXY, GeneratorT>::setParametersForY (const GeneratorParameters& y_params)$/;"	f	class:pcl::common::CloudGenerator
setParametersForZ	include/pcl/common/impl/generate.hpp	/^pcl::common::CloudGenerator<PointT, GeneratorT>::setParametersForZ (const GeneratorParameters& z_params)$/;"	f	class:pcl::common::CloudGenerator
setRGBCameraIntrinsics	include/pcl/io/openni2_grabber.h	/^        setRGBCameraIntrinsics (const double rgb_focal_length_x,$/;"	f	class:pcl::io::OpenNI2Grabber
setRGBCameraIntrinsics	include/pcl/io/openni_grabber.h	/^      setRGBCameraIntrinsics (const double rgb_focal_length_x, $/;"	f	class:pcl::OpenNIGrabber
setRGBFocalLength	include/pcl/io/openni2_grabber.h	/^        setRGBFocalLength (const double rgb_focal_length)$/;"	f	class:pcl::io::OpenNI2Grabber
setRGBFocalLength	include/pcl/io/openni2_grabber.h	/^        setRGBFocalLength (const double rgb_focal_length_x, const double rgb_focal_length_y)$/;"	f	class:pcl::io::OpenNI2Grabber
setRGBFocalLength	include/pcl/io/openni_camera/openni_device.h	/^      setRGBFocalLength (float focal_length)$/;"	f	class:openni_wrapper::OpenNIDevice
setRGBFocalLength	include/pcl/io/openni_grabber.h	/^      setRGBFocalLength (const double rgb_focal_length)$/;"	f	class:pcl::OpenNIGrabber
setRGBFocalLength	include/pcl/io/openni_grabber.h	/^      setRGBFocalLength (const double rgb_focal_length_x, const double rgb_focal_length_y)$/;"	f	class:pcl::OpenNIGrabber
setRPY	include/tf/LinearMath/Matrix3x3.h	/^	void setRPY(tfScalar roll, tfScalar pitch,tfScalar yaw) { $/;"	f	class:tf::Matrix3x3
setRPY	include/tf/LinearMath/Quaternion.h	/^  void setRPY(const tfScalar& roll, const tfScalar& pitch, const tfScalar& yaw)$/;"	f	class:tf::Quaternion
setRescaleValues	include/pcl/point_representation.h	/^      setRescaleValues (const float *rescale_array)$/;"	f	class:pcl::PointRepresentation
setRotation	include/tf/LinearMath/Matrix3x3.h	/^	void setRotation(const Quaternion& q) $/;"	f	class:tf::Matrix3x3
setRotation	include/tf/LinearMath/Quaternion.h	/^	void setRotation(const Vector3& axis, const tfScalar& angle)$/;"	f	class:tf::Quaternion
setRotation	include/tf/LinearMath/Transform.h	/^	TFSIMD_FORCE_INLINE void setRotation(const Quaternion& q)$/;"	f	class:tf::Transform
setScalingFactor	include/pcl/io/point_cloud_image_extractors.h	/^        setScalingFactor (const float scaling_factor)$/;"	f	class:pcl::io::PointCloudImageExtractorWithScaling
setScalingMethod	include/pcl/io/point_cloud_image_extractors.h	/^        setScalingMethod (const ScalingMethod scaling_method)$/;"	f	class:pcl::io::PointCloudImageExtractorWithScaling
setSeed	include/pcl/common/impl/random.hpp	/^pcl::common::NormalGenerator<T>::setSeed (pcl::uint32_t seed)$/;"	f	class:pcl::common::NormalGenerator
setSeed	include/pcl/common/impl/random.hpp	/^pcl::common::UniformGenerator<T>::setSeed (pcl::uint32_t seed)$/;"	f	class:pcl::common::UniformGenerator
setTransformationToRangeImageSystem	include/pcl/range_image/impl/range_image.hpp	/^RangeImage::setTransformationToRangeImageSystem (const Eigen::Affine3f& to_range_image_system)$/;"	f	class:pcl::RangeImage
setUnpaddedRobotFootprint	src/costmap_2d_ros.cpp	/^void Costmap2DROS::setUnpaddedRobotFootprint(const std::vector<geometry_msgs::Point>& points)$/;"	f	class:costmap_2d::Costmap2DROS
setValue	include/tf/LinearMath/Matrix3x3.h	/^	void setValue(const tfScalar& xx, const tfScalar& xy, const tfScalar& xz, $/;"	f	class:tf::Matrix3x3
setValue	include/tf/LinearMath/Vector3.h	/^		TFSIMD_FORCE_INLINE void	setValue(const tfScalar& x, const tfScalar& y, const tfScalar& z,const tfScalar& w)$/;"	f	class:tf::tfVector4
setValue	include/tf/LinearMath/Vector3.h	/^		TFSIMD_FORCE_INLINE void 	setValue(const tfScalar& x, const tfScalar& y, const tfScalar& z)$/;"	f	class:tf::Vector3
setValues	include/costmap_2d/testing_helper.h	/^void setValues(costmap_2d::Costmap2D& costmap, const unsigned char* map)$/;"	f
setW	include/tf/LinearMath/Vector3.h	/^		TFSIMD_FORCE_INLINE void	setW(tfScalar w) { m_floats[3] = w;};$/;"	f	class:tf::Vector3
setX	include/tf/LinearMath/Vector3.h	/^		TFSIMD_FORCE_INLINE void	setX(tfScalar x) { m_floats[0] = x;};$/;"	f	class:tf::Vector3
setY	include/tf/LinearMath/Vector3.h	/^		TFSIMD_FORCE_INLINE void	setY(tfScalar y) { m_floats[1] = y;};$/;"	f	class:tf::Vector3
setZ	include/tf/LinearMath/Vector3.h	/^		TFSIMD_FORCE_INLINE void	setZ(tfScalar z) {m_floats[2] = z;};$/;"	f	class:tf::Vector3
setZero	include/tf/LinearMath/Vector3.h	/^		void	setZero()$/;"	f	class:tf::Vector3
setZeroValue	include/pcl/common/impl/polynomial_calculations.hpp	/^  pcl::PolynomialCalculationsT<real>::Parameters::setZeroValue (real new_zero_value)$/;"	f	class:pcl::PolynomialCalculationsT::Parameters
setZeroValue	include/pcl/common/polynomial_calculations.h	/^      setZeroValue (real new_zero_value) { parameters_.setZeroValue(new_zero_value); }$/;"	f	class:pcl::PolynomialCalculationsT
shadow_value_	include/pcl/io/image_depth.h	/^        pcl::uint64_t shadow_value_;$/;"	m	class:pcl::io::DepthImage
shadow_value_	include/pcl/io/openni2/openni2_device.h	/^          uint64_t shadow_value_;$/;"	m	class:pcl::io::openni2::OpenNI2Device
shadow_value_	include/pcl/io/openni_camera/openni_depth_image.h	/^      XnUInt64 shadow_value_;$/;"	m	class:openni_wrapper::DepthImage
shadow_value_	include/pcl/io/openni_camera/openni_device.h	/^      XnUInt64 shadow_value_;$/;"	m	class:openni_wrapper::OpenNIDevice
shared_connections_	include/pcl/io/grabber.h	/^      std::map<std::string, std::vector<boost::signals2::shared_connection_block> > shared_connections_;$/;"	m	class:pcl::Grabber
shiftToDepth	include/pcl/io/openni2/openni_shift_to_depth_conversion.h	/^      shiftToDepth (uint16_t shift_val)$/;"	f	class:openni_wrapper::ShiftToDepthConverter
shiftToDepth	include/pcl/io/openni_camera/openni_device.h	/^      shiftToDepth (pcl::uint16_t shift_value) const$/;"	f	class:openni_wrapper::OpenNIDevice
shiftToDepth	include/pcl/io/openni_camera/openni_shift_to_depth_conversion.h	/^      shiftToDepth (uint16_t shift_val)$/;"	f	class:openni_wrapper::ShiftToDepthConverter
shift_conversion_parameters_	include/pcl/io/openni_camera/openni_device.h	/^      } shift_conversion_parameters_;$/;"	m	class:openni_wrapper::OpenNIDevice	typeref:struct:openni_wrapper::OpenNIDevice::ShiftConversion
shift_scale_	include/pcl/io/openni_camera/openni_device.h	/^        XnUInt32 shift_scale_;$/;"	m	struct:openni_wrapper::OpenNIDevice::ShiftConversion
shift_to_depth_table_	include/pcl/io/openni_camera/openni_device.h	/^      std::vector<pcl::uint16_t> shift_to_depth_table_;$/;"	m	class:openni_wrapper::OpenNIDevice
shortestArcQuat	include/tf/LinearMath/Quaternion.h	/^shortestArcQuat(const Vector3& v0, const Vector3& v1) \/\/ Game Programming Gems 2.10. make sure v0,v1 are normalized$/;"	f	namespace:tf
shortestArcQuatNormalize2	include/tf/LinearMath/Quaternion.h	/^shortestArcQuatNormalize2(Vector3& v0,Vector3& v1)$/;"	f	namespace:tf
sig_cb_davidsdk_image	include/pcl/io/davidsdk_grabber.h	/^      (sig_cb_davidsdk_image) (const boost::shared_ptr<pcl::PCLImage> &);$/;"	t	class:pcl::DavidSDKGrabber
sig_cb_davidsdk_mesh	include/pcl/io/davidsdk_grabber.h	/^      (sig_cb_davidsdk_mesh) (const pcl::PolygonMesh::Ptr &);$/;"	t	class:pcl::DavidSDKGrabber
sig_cb_davidsdk_mesh_image	include/pcl/io/davidsdk_grabber.h	/^      (sig_cb_davidsdk_mesh_image) (const pcl::PolygonMesh::Ptr &,$/;"	t	class:pcl::DavidSDKGrabber
sig_cb_davidsdk_point_cloud	include/pcl/io/davidsdk_grabber.h	/^      (sig_cb_davidsdk_point_cloud) (const pcl::PointCloud<pcl::PointXYZ>::Ptr &);$/;"	t	class:pcl::DavidSDKGrabber
sig_cb_davidsdk_point_cloud_image	include/pcl/io/davidsdk_grabber.h	/^      (sig_cb_davidsdk_point_cloud_image) (const pcl::PointCloud<pcl::PointXYZ>::Ptr &,$/;"	t	class:pcl::DavidSDKGrabber
sig_cb_depth_sense_point_cloud	include/pcl/io/depth_sense/depth_sense_grabber_impl.h	/^        typedef DepthSenseGrabber::sig_cb_depth_sense_point_cloud sig_cb_depth_sense_point_cloud;$/;"	t	struct:pcl::io::depth_sense::DepthSenseGrabberImpl
sig_cb_depth_sense_point_cloud	include/pcl/io/depth_sense_grabber.h	/^        void (sig_cb_depth_sense_point_cloud)$/;"	t	class:pcl::DepthSenseGrabber
sig_cb_depth_sense_point_cloud_rgba	include/pcl/io/depth_sense/depth_sense_grabber_impl.h	/^        typedef DepthSenseGrabber::sig_cb_depth_sense_point_cloud_rgba sig_cb_depth_sense_point_cloud_rgba;$/;"	t	struct:pcl::io::depth_sense::DepthSenseGrabberImpl
sig_cb_depth_sense_point_cloud_rgba	include/pcl/io/depth_sense_grabber.h	/^        void (sig_cb_depth_sense_point_cloud_rgba)$/;"	t	class:pcl::DepthSenseGrabber
sig_cb_dinast_point_cloud	include/pcl/io/dinast_grabber.h	/^    typedef void (sig_cb_dinast_point_cloud) (const boost::shared_ptr<const pcl::PointCloud<pcl::PointXYZI> >&);$/;"	t	class:pcl::DinastGrabber
sig_cb_ensenso_images	include/pcl/io/ensenso_grabber.h	/^      (sig_cb_ensenso_images) (const boost::shared_ptr<PairOfImages> &);$/;"	t	class:pcl::EnsensoGrabber
sig_cb_ensenso_point_cloud	include/pcl/io/ensenso_grabber.h	/^      (sig_cb_ensenso_point_cloud) (const pcl::PointCloud<pcl::PointXYZ>::Ptr &);$/;"	t	class:pcl::EnsensoGrabber
sig_cb_ensenso_point_cloud_images	include/pcl/io/ensenso_grabber.h	/^      (sig_cb_ensenso_point_cloud_images) (const pcl::PointCloud<pcl::PointXYZ>::Ptr &,$/;"	t	class:pcl::EnsensoGrabber
sig_cb_fotonic_point_cloud	include/pcl/io/fotonic_grabber.h	/^      typedef void (sig_cb_fotonic_point_cloud) (const boost::shared_ptr<const pcl::PointCloud<pcl::PointXYZ> >&);$/;"	t	class:pcl::FotonicGrabber
sig_cb_fotonic_point_cloud_i	include/pcl/io/fotonic_grabber.h	/^      typedef void (sig_cb_fotonic_point_cloud_i) (const boost::shared_ptr<const pcl::PointCloud<pcl::PointXYZI> >&);$/;"	t	class:pcl::FotonicGrabber
sig_cb_fotonic_point_cloud_rgb	include/pcl/io/fotonic_grabber.h	/^      typedef void (sig_cb_fotonic_point_cloud_rgb) (const boost::shared_ptr<const pcl::PointCloud<pcl::PointXYZRGB> >&);$/;"	t	class:pcl::FotonicGrabber
sig_cb_fotonic_point_cloud_rgba	include/pcl/io/fotonic_grabber.h	/^      typedef void (sig_cb_fotonic_point_cloud_rgba) (const boost::shared_ptr<const pcl::PointCloud<pcl::PointXYZRGBA> >&);$/;"	t	class:pcl::FotonicGrabber
sig_cb_openni_depth_image	include/pcl/io/oni_grabber.h	/^      typedef void (sig_cb_openni_depth_image) (const boost::shared_ptr<openni_wrapper::DepthImage>&);$/;"	t	class:pcl::ONIGrabber
sig_cb_openni_depth_image	include/pcl/io/openni2_grabber.h	/^        typedef void (sig_cb_openni_depth_image) (const boost::shared_ptr<DepthImage>&);$/;"	t	class:pcl::io::OpenNI2Grabber
sig_cb_openni_depth_image	include/pcl/io/openni_grabber.h	/^      typedef void (sig_cb_openni_depth_image) (const boost::shared_ptr<openni_wrapper::DepthImage>&);$/;"	t	class:pcl::OpenNIGrabber
sig_cb_openni_image	include/pcl/io/oni_grabber.h	/^      typedef void (sig_cb_openni_image) (const boost::shared_ptr<openni_wrapper::Image>&);$/;"	t	class:pcl::ONIGrabber
sig_cb_openni_image	include/pcl/io/openni2_grabber.h	/^        typedef void (sig_cb_openni_image) (const boost::shared_ptr<Image>&);$/;"	t	class:pcl::io::OpenNI2Grabber
sig_cb_openni_image	include/pcl/io/openni_grabber.h	/^      typedef void (sig_cb_openni_image) (const boost::shared_ptr<openni_wrapper::Image>&);$/;"	t	class:pcl::OpenNIGrabber
sig_cb_openni_image_depth_image	include/pcl/io/oni_grabber.h	/^      typedef void (sig_cb_openni_image_depth_image) (const boost::shared_ptr<openni_wrapper::Image>&, const boost::shared_ptr<openni_wrapper::DepthImage>&, float constant) ;$/;"	t	class:pcl::ONIGrabber
sig_cb_openni_image_depth_image	include/pcl/io/openni2_grabber.h	/^        typedef void (sig_cb_openni_image_depth_image) (const boost::shared_ptr<Image>&, const boost::shared_ptr<DepthImage>&, float reciprocalFocalLength) ;$/;"	t	class:pcl::io::OpenNI2Grabber
sig_cb_openni_image_depth_image	include/pcl/io/openni_grabber.h	/^      typedef void (sig_cb_openni_image_depth_image) (const boost::shared_ptr<openni_wrapper::Image>&, const boost::shared_ptr<openni_wrapper::DepthImage>&, float constant) ;$/;"	t	class:pcl::OpenNIGrabber
sig_cb_openni_ir_depth_image	include/pcl/io/oni_grabber.h	/^      typedef void (sig_cb_openni_ir_depth_image) (const boost::shared_ptr<openni_wrapper::IRImage>&, const boost::shared_ptr<openni_wrapper::DepthImage>&, float constant) ;$/;"	t	class:pcl::ONIGrabber
sig_cb_openni_ir_depth_image	include/pcl/io/openni2_grabber.h	/^        typedef void (sig_cb_openni_ir_depth_image) (const boost::shared_ptr<IRImage>&, const boost::shared_ptr<DepthImage>&, float reciprocalFocalLength) ;$/;"	t	class:pcl::io::OpenNI2Grabber
sig_cb_openni_ir_depth_image	include/pcl/io/openni_grabber.h	/^      typedef void (sig_cb_openni_ir_depth_image) (const boost::shared_ptr<openni_wrapper::IRImage>&, const boost::shared_ptr<openni_wrapper::DepthImage>&, float constant) ;$/;"	t	class:pcl::OpenNIGrabber
sig_cb_openni_ir_image	include/pcl/io/oni_grabber.h	/^      typedef void (sig_cb_openni_ir_image) (const boost::shared_ptr<openni_wrapper::IRImage>&);$/;"	t	class:pcl::ONIGrabber
sig_cb_openni_ir_image	include/pcl/io/openni2_grabber.h	/^        typedef void (sig_cb_openni_ir_image) (const boost::shared_ptr<IRImage>&);$/;"	t	class:pcl::io::OpenNI2Grabber
sig_cb_openni_ir_image	include/pcl/io/openni_grabber.h	/^      typedef void (sig_cb_openni_ir_image) (const boost::shared_ptr<openni_wrapper::IRImage>&);$/;"	t	class:pcl::OpenNIGrabber
sig_cb_openni_point_cloud	include/pcl/io/oni_grabber.h	/^      typedef void (sig_cb_openni_point_cloud) (const boost::shared_ptr<const pcl::PointCloud<pcl::PointXYZ> >&);$/;"	t	class:pcl::ONIGrabber
sig_cb_openni_point_cloud	include/pcl/io/openni2_grabber.h	/^        typedef void (sig_cb_openni_point_cloud) (const boost::shared_ptr<const pcl::PointCloud<pcl::PointXYZ> >&);$/;"	t	class:pcl::io::OpenNI2Grabber
sig_cb_openni_point_cloud	include/pcl/io/openni_grabber.h	/^      typedef void (sig_cb_openni_point_cloud) (const boost::shared_ptr<const pcl::PointCloud<pcl::PointXYZ> >&);$/;"	t	class:pcl::OpenNIGrabber
sig_cb_openni_point_cloud_i	include/pcl/io/oni_grabber.h	/^      typedef void (sig_cb_openni_point_cloud_i) (const boost::shared_ptr<const pcl::PointCloud<pcl::PointXYZI> >&);$/;"	t	class:pcl::ONIGrabber
sig_cb_openni_point_cloud_i	include/pcl/io/openni2_grabber.h	/^        typedef void (sig_cb_openni_point_cloud_i) (const boost::shared_ptr<const pcl::PointCloud<pcl::PointXYZI> >&);$/;"	t	class:pcl::io::OpenNI2Grabber
sig_cb_openni_point_cloud_i	include/pcl/io/openni_grabber.h	/^      typedef void (sig_cb_openni_point_cloud_i) (const boost::shared_ptr<const pcl::PointCloud<pcl::PointXYZI> >&);$/;"	t	class:pcl::OpenNIGrabber
sig_cb_openni_point_cloud_rgb	include/pcl/io/oni_grabber.h	/^      typedef void (sig_cb_openni_point_cloud_rgb) (const boost::shared_ptr<const pcl::PointCloud<pcl::PointXYZRGB> >&);$/;"	t	class:pcl::ONIGrabber
sig_cb_openni_point_cloud_rgb	include/pcl/io/openni2_grabber.h	/^        typedef void (sig_cb_openni_point_cloud_rgb) (const boost::shared_ptr<const pcl::PointCloud<pcl::PointXYZRGB> >&);$/;"	t	class:pcl::io::OpenNI2Grabber
sig_cb_openni_point_cloud_rgb	include/pcl/io/openni_grabber.h	/^      typedef void (sig_cb_openni_point_cloud_rgb) (const boost::shared_ptr<const pcl::PointCloud<pcl::PointXYZRGB> >&);$/;"	t	class:pcl::OpenNIGrabber
sig_cb_openni_point_cloud_rgba	include/pcl/io/oni_grabber.h	/^      typedef void (sig_cb_openni_point_cloud_rgba) (const boost::shared_ptr<const pcl::PointCloud<pcl::PointXYZRGBA> >&);$/;"	t	class:pcl::ONIGrabber
sig_cb_openni_point_cloud_rgba	include/pcl/io/openni2_grabber.h	/^        typedef void (sig_cb_openni_point_cloud_rgba) (const boost::shared_ptr<const pcl::PointCloud<pcl::PointXYZRGBA> >&);$/;"	t	class:pcl::io::OpenNI2Grabber
sig_cb_openni_point_cloud_rgba	include/pcl/io/openni_grabber.h	/^      typedef void (sig_cb_openni_point_cloud_rgba) (const boost::shared_ptr<const pcl::PointCloud<pcl::PointXYZRGBA> >&);$/;"	t	class:pcl::OpenNIGrabber
sig_cb_real_sense_point_cloud	include/pcl/io/real_sense_grabber.h	/^        void (sig_cb_real_sense_point_cloud)$/;"	t	class:pcl::RealSenseGrabber
sig_cb_real_sense_point_cloud_rgba	include/pcl/io/real_sense_grabber.h	/^        void (sig_cb_real_sense_point_cloud_rgba)$/;"	t	class:pcl::RealSenseGrabber
sig_cb_robot_eye_point_cloud_xyzi	include/pcl/io/robot_eye_grabber.h	/^      typedef void (sig_cb_robot_eye_point_cloud_xyzi) ($/;"	t	class:pcl::RobotEyeGrabber
sig_cb_velodyne_hdl_scan_point_cloud_xyz	include/pcl/io/hdl_grabber.h	/^      (sig_cb_velodyne_hdl_scan_point_cloud_xyz) (const boost::shared_ptr<const pcl::PointCloud<pcl::PointXYZ> >&,$/;"	t	class:pcl::HDLGrabber
sig_cb_velodyne_hdl_scan_point_cloud_xyzi	include/pcl/io/hdl_grabber.h	/^      (sig_cb_velodyne_hdl_scan_point_cloud_xyzi) (const boost::shared_ptr<const pcl::PointCloud<pcl::PointXYZI> >&,$/;"	t	class:pcl::HDLGrabber
sig_cb_velodyne_hdl_scan_point_cloud_xyzrgb	include/pcl/io/hdl_grabber.h	/^      (sig_cb_velodyne_hdl_scan_point_cloud_xyzrgb) (const boost::shared_ptr<const pcl::PointCloud<pcl::PointXYZRGBA> >&,$/;"	t	class:pcl::HDLGrabber
sig_cb_velodyne_hdl_sweep_point_cloud_xyz	include/pcl/io/hdl_grabber.h	/^      (sig_cb_velodyne_hdl_sweep_point_cloud_xyz) (const boost::shared_ptr<const pcl::PointCloud<pcl::PointXYZ> >&);$/;"	t	class:pcl::HDLGrabber
sig_cb_velodyne_hdl_sweep_point_cloud_xyzi	include/pcl/io/hdl_grabber.h	/^      (sig_cb_velodyne_hdl_sweep_point_cloud_xyzi) (const boost::shared_ptr<const pcl::PointCloud<pcl::PointXYZI> >&);$/;"	t	class:pcl::HDLGrabber
sig_cb_velodyne_hdl_sweep_point_cloud_xyzrgb	include/pcl/io/hdl_grabber.h	/^      (sig_cb_velodyne_hdl_sweep_point_cloud_xyzrgb) (const boost::shared_ptr<const pcl::PointCloud<pcl::PointXYZRGBA> >&);$/;"	t	class:pcl::HDLGrabber
sigma	include/pcl/common/random.h	/^          T sigma;$/;"	m	struct:pcl::common::NormalGenerator::Parameters
sign	include/costmap_2d/costmap_2d.h	/^  inline int sign(int x)$/;"	f	class:costmap_2d::Costmap2D
sign	include/costmap_2d/costmap_math.h	/^inline double sign(double x)$/;"	f
sign0	include/costmap_2d/costmap_math.h	/^inline double sign0(double x)$/;"	f
signal_	include/pcl/io/image_grabber.h	/^    boost::signals2::signal<void (const boost::shared_ptr<const pcl::PointCloud<PointT> >&)>* signal_;$/;"	m	class:pcl::ImageGrabber
signal_	include/pcl/io/pcd_grabber.h	/^      boost::signals2::signal<void (const boost::shared_ptr<const pcl::PointCloud<PointT> >&)>* signal_;$/;"	m	class:pcl::PCDGrabber
signal_point_cloud_size_	include/pcl/io/robot_eye_grabber.h	/^      size_t signal_point_cloud_size_;$/;"	m	class:pcl::RobotEyeGrabber
signalsChanged	include/pcl/io/grabber.h	/^      signalsChanged () { }$/;"	f	class:pcl::Grabber
signals_	include/pcl/io/grabber.h	/^      std::map<std::string, boost::signals2::signal_base*> signals_;$/;"	m	class:pcl::Grabber
sinVertCorrection	include/pcl/io/hdl_grabber.h	/^          double sinVertCorrection;$/;"	m	struct:pcl::HDLGrabber::HDLLaserCorrection
sinVertOffsetCorrection	include/pcl/io/hdl_grabber.h	/^          double sinVertOffsetCorrection;$/;"	m	struct:pcl::HDLGrabber::HDLLaserCorrection
sin_lookup_table_	include/pcl/io/hdl_grabber.h	/^      static double *sin_lookup_table_;$/;"	m	class:pcl::HDLGrabber
size	include/pcl/impl/cloud_iterator.hpp	/^      size_t size () const$/;"	f	class:pcl::ConstCloudIterator::ConstIteratorIdx
size	include/pcl/impl/cloud_iterator.hpp	/^      size_t size () const$/;"	f	class:pcl::ConstCloudIterator::DefaultConstIterator
size	include/pcl/impl/cloud_iterator.hpp	/^      size_t size () const$/;"	f	class:pcl::DefaultIterator
size	include/pcl/impl/cloud_iterator.hpp	/^      size_t size () const$/;"	f	class:pcl::IteratorIdx
size	include/pcl/impl/cloud_iterator.hpp	/^pcl::CloudIterator<PointT>::size () const$/;"	f	class:pcl::CloudIterator
size	include/pcl/impl/cloud_iterator.hpp	/^pcl::ConstCloudIterator<PointT>::size () const$/;"	f	class:pcl::ConstCloudIterator
size	include/pcl/impl/point_types.hpp	/^      float size;$/;"	m	union:pcl::_PointWithScale::__anon43
size	include/pcl/io/buffers.h	/^        size () const$/;"	f	class:pcl::io::Buffer
size	include/pcl/io/image_grabber.h	/^  ImageGrabber<PointT>::size () const$/;"	f	class:pcl::ImageGrabber
size	include/pcl/io/impl/synchronized_queue.hpp	/^      size ()$/;"	f	class:pcl::SynchronizedQueue
size	include/pcl/io/pcd_grabber.h	/^  PCDGrabber<PointT>::size () const$/;"	f	class:pcl::PCDGrabber
size	include/pcl/point_cloud.h	/^      inline size_t size () const { return (points.size ()); }$/;"	f	class:pcl::PointCloud
size	include/pcl/point_cloud.h	/^      size_t size;$/;"	m	struct:pcl::detail::FieldMapping
size_	include/pcl/io/buffers.h	/^        const size_t size_;$/;"	m	class:pcl::io::Buffer
size_locked_	include/costmap_2d/layered_costmap.h	/^  bool size_locked_;$/;"	m	class:costmap_2d::LayeredCostmap
size_type	include/pcl/io/ply/ply_parser.h	/^                typedef typename T::first size_type;$/;"	t	struct:pcl::io::ply::ply_parser::list_property_definition_callbacks_type::callbacks_element
size_type	include/pcl/io/ply/ply_parser.h	/^            typedef SizeType size_type;$/;"	t	struct:pcl::io::ply::ply_parser::list_property
size_types	include/pcl/io/ply/ply_parser.h	/^          typedef boost::mpl::vector<uint8, uint16, uint32> size_types;$/;"	t	class:pcl::io::ply::ply_parser
size_x_	include/costmap_2d/costmap_2d.h	/^  unsigned int size_x_;$/;"	m	class:costmap_2d::Costmap2D
size_y_	include/costmap_2d/costmap_2d.h	/^  unsigned int size_y_;$/;"	m	class:costmap_2d::Costmap2D
slerp	include/tf/LinearMath/Quaternion.h	/^	Quaternion slerp(const Quaternion& q, const tfScalar& t) const$/;"	f	class:tf::Quaternion
slerp	include/tf/LinearMath/Quaternion.h	/^slerp(const Quaternion& q1, const Quaternion& q2, const tfScalar& t) $/;"	f	namespace:tf
smooth	include/pcl/common/gaussian.h	/^      smooth (const pcl::PointCloud<PointT> &input,$/;"	f	class:pcl::GaussianKernel
smooth	include/pcl/common/gaussian.h	/^      smooth (const pcl::PointCloud<float> &input,$/;"	f	class:pcl::GaussianKernel
smul	include/pcl/common/fft/_kiss_fft_guts.h	64;"	d
socket_	include/pcl/io/robot_eye_grabber.h	/^      boost::shared_ptr<boost::asio::ip::udp::socket> socket_;$/;"	m	class:pcl::RobotEyeGrabber
socket_thread_	include/pcl/io/robot_eye_grabber.h	/^      boost::shared_ptr<boost::thread> socket_thread_;$/;"	m	class:pcl::RobotEyeGrabber
solveCubicEquation	include/pcl/common/impl/polynomial_calculations.hpp	/^  pcl::PolynomialCalculationsT<real>::solveCubicEquation (real a, real b, real c, real d, std::vector<real>& roots) const$/;"	f	class:pcl::PolynomialCalculationsT
solveLinearEquation	include/pcl/common/impl/polynomial_calculations.hpp	/^  pcl::PolynomialCalculationsT<real>::solveLinearEquation (real a, real b, std::vector<real>& roots) const$/;"	f	class:pcl::PolynomialCalculationsT
solveQuadraticEquation	include/pcl/common/impl/polynomial_calculations.hpp	/^  pcl::PolynomialCalculationsT<real>::solveQuadraticEquation (real a, real b, real c, std::vector<real>& roots) const$/;"	f	class:pcl::PolynomialCalculationsT
solveQuarticEquation	include/pcl/common/impl/polynomial_calculations.hpp	/^  pcl::PolynomialCalculationsT<real>::solveQuarticEquation (real a, real b, real c, real d, real e,$/;"	f	class:pcl::PolynomialCalculationsT
source_address_filter_	include/pcl/io/hdl_grabber.h	/^      boost::asio::ip::address source_address_filter_;$/;"	m	class:pcl::HDLGrabber
source_port_filter_	include/pcl/io/hdl_grabber.h	/^      unsigned short source_port_filter_;$/;"	m	class:pcl::HDLGrabber
sqrPointToLineDistance	include/pcl/common/distances.h	/^  sqrPointToLineDistance (const Eigen::Vector4f &pt, const Eigen::Vector4f &line_pt, const Eigen::Vector4f &line_dir)$/;"	f	namespace:pcl
sqrPointToLineDistance	include/pcl/common/distances.h	/^  sqrPointToLineDistance (const Eigen::Vector4f &pt, const Eigen::Vector4f &line_pt, const Eigen::Vector4f &line_dir, const double sqr_length)$/;"	f	namespace:pcl
sqr_zero_value	include/pcl/common/polynomial_calculations.h	/^        real sqr_zero_value;   \/\/!< sqr of the above$/;"	m	struct:pcl::PolynomialCalculationsT::Parameters
sqrtIsNearlyZero	include/pcl/common/polynomial_calculations.h	/^      sqrtIsNearlyZero (real d) const $/;"	f	class:pcl::PolynomialCalculationsT
squaredDistance	include/pcl/common/geometry.h	/^    squaredDistance (const PointT& p1, const PointT& p2)$/;"	f	namespace:pcl::geometry
squaredEuclideanDistance	include/pcl/common/distances.h	/^  squaredEuclideanDistance (const PointType1& p1, const PointType2& p2)$/;"	f	namespace:pcl
squaredEuclideanDistance	include/pcl/common/distances.h	/^  squaredEuclideanDistance (const PointXY& p1, const PointXY& p2)$/;"	f	namespace:pcl
src_x_	include/costmap_2d/inflation_layer.h	/^  unsigned int src_x_, src_y_;$/;"	m	class:costmap_2d::CellData
src_y_	include/costmap_2d/inflation_layer.h	/^  unsigned int src_x_, src_y_;$/;"	m	class:costmap_2d::CellData
sround	include/pcl/common/fft/_kiss_fft_guts.h	65;"	d
sse_add	include/pcl/sse.h	/^RETf sse_add( const __m128 a, const __m128 b, const __m128 c, const __m128 &d ) {$/;"	f	namespace:pcl
sse_add	include/pcl/sse.h	/^RETf sse_add( const __m128 x, const __m128 y ) { return _mm_add_ps(x,y); }$/;"	f	namespace:pcl
sse_add	include/pcl/sse.h	/^RETf sse_add( const __m128 x, const __m128 y, const __m128 z ) {$/;"	f	namespace:pcl
sse_add	include/pcl/sse.h	/^RETi sse_add( const __m128i x, const __m128i y ) { return _mm_add_epi32(x,y); }$/;"	f	namespace:pcl
sse_and	include/pcl/sse.h	/^RETf sse_and( const __m128 x, const __m128 y ) { return _mm_and_ps(x,y); }$/;"	f	namespace:pcl
sse_and	include/pcl/sse.h	/^RETi sse_and( const __m128i x, const __m128i y ) { return _mm_and_si128(x,y); }$/;"	f	namespace:pcl
sse_andnot	include/pcl/sse.h	/^RETf sse_andnot( const __m128 x, const __m128 y ) { return _mm_andnot_ps(x,y); }$/;"	f	namespace:pcl
sse_cmpgt	include/pcl/sse.h	/^RETf sse_cmpgt( const __m128 x, const __m128 y ) { return _mm_cmpgt_ps(x,y); }$/;"	f	namespace:pcl
sse_cmpgt	include/pcl/sse.h	/^RETi sse_cmpgt( const __m128i x, const __m128i y ) { return _mm_cmpgt_epi32(x,y); }$/;"	f	namespace:pcl
sse_cvt	include/pcl/sse.h	/^RETf sse_cvt( const __m128i x ) { return _mm_cvtepi32_ps(x); }$/;"	f	namespace:pcl
sse_cvt	include/pcl/sse.h	/^RETi sse_cvt( const __m128 x ) { return _mm_cvttps_epi32(x); }$/;"	f	namespace:pcl
sse_dec	include/pcl/sse.h	/^RETf sse_dec( __m128 &x, const __m128 y ) { return x = sse_sub(x,y); }$/;"	f	namespace:pcl
sse_dec	include/pcl/sse.h	/^RETf sse_dec( float &x, const __m128 y ) { __m128 t=sse_sub(sse_ld(x),y); return sse_str(x,t); }$/;"	f	namespace:pcl
sse_inc	include/pcl/sse.h	/^RETf sse_inc( __m128 &x, const __m128 y ) { return x = sse_add(x,y); }$/;"	f	namespace:pcl
sse_inc	include/pcl/sse.h	/^RETf sse_inc( float &x, const __m128 y ) { __m128 t=sse_add(sse_ld(x),y); return sse_str(x,t); }$/;"	f	namespace:pcl
sse_ld	include/pcl/sse.h	/^RETf sse_ld( const float &x ) { return _mm_load_ps(&x); }$/;"	f	namespace:pcl
sse_ldu	include/pcl/sse.h	/^RETf sse_ldu( const float &x ) { return _mm_loadu_ps(&x); }$/;"	f	namespace:pcl
sse_min	include/pcl/sse.h	/^RETf sse_min( const __m128 x, const __m128 y ) { return _mm_min_ps(x,y); }$/;"	f	namespace:pcl
sse_mul	include/pcl/sse.h	/^RETf sse_mul( const __m128 x, const __m128 y ) { return _mm_mul_ps(x,y); }$/;"	f	namespace:pcl
sse_mul	include/pcl/sse.h	/^RETf sse_mul( const __m128 x, const float y ) { return sse_mul(x,sse_set(y)); }$/;"	f	namespace:pcl
sse_mul	include/pcl/sse.h	/^RETf sse_mul( const float x, const __m128 y ) { return sse_mul(sse_set(x),y); }$/;"	f	namespace:pcl
sse_or	include/pcl/sse.h	/^RETf sse_or( const __m128 x, const __m128 y ) { return _mm_or_ps(x,y); }$/;"	f	namespace:pcl
sse_rcp	include/pcl/sse.h	/^RETf sse_rcp( const __m128 x ) { return _mm_rcp_ps(x); }$/;"	f	namespace:pcl
sse_rcpsqrt	include/pcl/sse.h	/^RETf sse_rcpsqrt( const __m128 x ) { return _mm_rsqrt_ps(x); }$/;"	f	namespace:pcl
sse_set	include/pcl/sse.h	/^RETf sse_set( const float &x ) { return _mm_set1_ps(x); }$/;"	f	namespace:pcl
sse_set	include/pcl/sse.h	/^RETf sse_set( float x, float y, float z, float w ) { return _mm_set_ps(x,y,z,w); }$/;"	f	namespace:pcl
sse_set	include/pcl/sse.h	/^RETi sse_set( const int &x ) { return _mm_set1_epi32(x); }$/;"	f	namespace:pcl
sse_str	include/pcl/sse.h	/^RETf sse_str( float &x, const __m128 y ) { _mm_store_ps(&x,y); return y; }$/;"	f	namespace:pcl
sse_str	include/pcl/sse.h	/^RETf sse_str( float &x, const float y ) { return sse_str(x,sse_set(y)); }$/;"	f	namespace:pcl
sse_str1	include/pcl/sse.h	/^RETf sse_str1( float &x, const __m128 y ) { _mm_store_ss(&x,y); return y; }$/;"	f	namespace:pcl
sse_stru	include/pcl/sse.h	/^RETf sse_stru( float &x, const __m128 y ) { _mm_storeu_ps(&x,y); return y; }$/;"	f	namespace:pcl
sse_sub	include/pcl/sse.h	/^RETf sse_sub( const __m128 x, const __m128 y ) { return _mm_sub_ps(x,y); }$/;"	f	namespace:pcl
sse_xor	include/pcl/sse.h	/^RETf sse_xor( const __m128 x, const __m128 y ) { return _mm_xor_ps(x,y); }$/;"	f	namespace:pcl
stamp	include/pcl/PCLHeader.h	/^    pcl::uint64_t stamp;$/;"	m	struct:pcl::PCLHeader
start	src/costmap_2d_ros.cpp	/^void Costmap2DROS::start()$/;"	f	class:costmap_2d::Costmap2DROS
start_dim_	include/pcl/point_representation.h	/^      int start_dim_;$/;"	m	class:pcl::CustomPointRepresentation
start_time_	include/pcl/common/time.h	/^      boost::posix_time::ptime start_time_;$/;"	m	class:pcl::StopWatch
static_clearing_observations_	include/costmap_2d/obstacle_layer.h	/^  std::vector<costmap_2d::Observation> static_clearing_observations_, static_marking_observations_;$/;"	m	class:costmap_2d::ObstacleLayer
static_marking_observations_	include/costmap_2d/obstacle_layer.h	/^  std::vector<costmap_2d::Observation> static_clearing_observations_, static_marking_observations_;$/;"	m	class:costmap_2d::ObstacleLayer
static_value1	include/map_msgs/GetMapROIRequest.h	/^  static const uint64_t static_value1 = 0x43c2ff8f45af555cULL;$/;"	m	struct:ros::message_traits::MD5Sum
static_value1	include/map_msgs/GetMapROIResponse.h	/^  static const uint64_t static_value1 = 0x4d1986519c00d819ULL;$/;"	m	struct:ros::message_traits::MD5Sum
static_value1	include/map_msgs/GetPointMapROIRequest.h	/^  static const uint64_t static_value1 = 0x895f7e437a9a6dd2ULL;$/;"	m	struct:ros::message_traits::MD5Sum
static_value1	include/map_msgs/GetPointMapROIResponse.h	/^  static const uint64_t static_value1 = 0x313769f8b0e72452ULL;$/;"	m	struct:ros::message_traits::MD5Sum
static_value1	include/map_msgs/GetPointMapRequest.h	/^  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;$/;"	m	struct:ros::message_traits::MD5Sum
static_value1	include/map_msgs/GetPointMapResponse.h	/^  static const uint64_t static_value1 = 0xb84fbb39505086ebULL;$/;"	m	struct:ros::message_traits::MD5Sum
static_value1	include/map_msgs/OccupancyGridUpdate.h	/^  static const uint64_t static_value1 = 0xb295be292b335c34ULL;$/;"	m	struct:ros::message_traits::MD5Sum
static_value1	include/map_msgs/PointCloud2Update.h	/^  static const uint64_t static_value1 = 0x6c58e4f249ae9cd2ULL;$/;"	m	struct:ros::message_traits::MD5Sum
static_value1	include/map_msgs/ProjectedMap.h	/^  static const uint64_t static_value1 = 0x7bbe8f96e4508968ULL;$/;"	m	struct:ros::message_traits::MD5Sum
static_value1	include/map_msgs/ProjectedMapInfo.h	/^  static const uint64_t static_value1 = 0x2dc10595ae94de23ULL;$/;"	m	struct:ros::message_traits::MD5Sum
static_value1	include/map_msgs/ProjectedMapsInfoRequest.h	/^  static const uint64_t static_value1 = 0xd7980a33202421c8ULL;$/;"	m	struct:ros::message_traits::MD5Sum
static_value1	include/map_msgs/ProjectedMapsInfoResponse.h	/^  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;$/;"	m	struct:ros::message_traits::MD5Sum
static_value1	include/map_msgs/SaveMapRequest.h	/^  static const uint64_t static_value1 = 0x716e25f9d9dc76ceULL;$/;"	m	struct:ros::message_traits::MD5Sum
static_value1	include/map_msgs/SaveMapResponse.h	/^  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;$/;"	m	struct:ros::message_traits::MD5Sum
static_value1	include/map_msgs/SetMapProjectionsRequest.h	/^  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;$/;"	m	struct:ros::message_traits::MD5Sum
static_value1	include/map_msgs/SetMapProjectionsResponse.h	/^  static const uint64_t static_value1 = 0xd7980a33202421c8ULL;$/;"	m	struct:ros::message_traits::MD5Sum
static_value2	include/map_msgs/GetMapROIRequest.h	/^  static const uint64_t static_value2 = 0x0eaf070c401e9a47ULL;$/;"	m	struct:ros::message_traits::MD5Sum
static_value2	include/map_msgs/GetMapROIResponse.h	/^  static const uint64_t static_value2 = 0x67d2891a606b234cULL;$/;"	m	struct:ros::message_traits::MD5Sum
static_value2	include/map_msgs/GetPointMapROIRequest.h	/^  static const uint64_t static_value2 = 0x25316872b187a303ULL;$/;"	m	struct:ros::message_traits::MD5Sum
static_value2	include/map_msgs/GetPointMapROIResponse.h	/^  static const uint64_t static_value2 = 0x5c6463336cbccd63ULL;$/;"	m	struct:ros::message_traits::MD5Sum
static_value2	include/map_msgs/GetPointMapRequest.h	/^  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;$/;"	m	struct:ros::message_traits::MD5Sum
static_value2	include/map_msgs/GetPointMapResponse.h	/^  static const uint64_t static_value2 = 0x6a62d933c75cb7b4ULL;$/;"	m	struct:ros::message_traits::MD5Sum
static_value2	include/map_msgs/OccupancyGridUpdate.h	/^  static const uint64_t static_value2 = 0x718bd939deebe1c9ULL;$/;"	m	struct:ros::message_traits::MD5Sum
static_value2	include/map_msgs/PointCloud2Update.h	/^  static const uint64_t static_value2 = 0xb24fb1ee0f99195eULL;$/;"	m	struct:ros::message_traits::MD5Sum
static_value2	include/map_msgs/ProjectedMap.h	/^  static const uint64_t static_value2 = 0x1dc1ea7d023cbfcaULL;$/;"	m	struct:ros::message_traits::MD5Sum
static_value2	include/map_msgs/ProjectedMapInfo.h	/^  static const uint64_t static_value2 = 0xf22f8a6d2a0eef7aULL;$/;"	m	struct:ros::message_traits::MD5Sum
static_value2	include/map_msgs/ProjectedMapsInfoRequest.h	/^  static const uint64_t static_value2 = 0xcd74565e57a4d229ULL;$/;"	m	struct:ros::message_traits::MD5Sum
static_value2	include/map_msgs/ProjectedMapsInfoResponse.h	/^  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;$/;"	m	struct:ros::message_traits::MD5Sum
static_value2	include/map_msgs/SaveMapRequest.h	/^  static const uint64_t static_value2 = 0xba197f93cbf05dc7ULL;$/;"	m	struct:ros::message_traits::MD5Sum
static_value2	include/map_msgs/SaveMapResponse.h	/^  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;$/;"	m	struct:ros::message_traits::MD5Sum
static_value2	include/map_msgs/SetMapProjectionsRequest.h	/^  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;$/;"	m	struct:ros::message_traits::MD5Sum
static_value2	include/map_msgs/SetMapProjectionsResponse.h	/^  static const uint64_t static_value2 = 0xcd74565e57a4d229ULL;$/;"	m	struct:ros::message_traits::MD5Sum
step	include/pcl/PCLImage.h	/^    pcl::uint32_t step;$/;"	m	struct:pcl::PCLImage
step_	include/pcl/common/feature_histogram.h	/^      float step_;$/;"	m	class:pcl::FeatureHistogram
stop	src/costmap_2d_ros.cpp	/^void Costmap2DROS::stop()$/;"	f	class:costmap_2d::Costmap2DROS
stopQueue	include/pcl/io/impl/synchronized_queue.hpp	/^      stopQueue ()$/;"	f	class:pcl::SynchronizedQueue
stop_updates_	include/costmap_2d/costmap_2d_ros.h	/^  bool stop_updates_, initialized_, stopped_, robot_stopped_;$/;"	m	class:costmap_2d::Costmap2DROS
stop_watch_	include/pcl/common/time.h	/^      pcl::StopWatch stop_watch_;$/;"	m	class:pcl::EventFrequency
stopped_	include/costmap_2d/costmap_2d_ros.h	/^  bool stop_updates_, initialized_, stopped_, robot_stopped_;$/;"	m	class:costmap_2d::Costmap2DROS
stream	include/map_msgs/GetMapROIRequest.h	/^  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::map_msgs::GetMapROIRequest_<ContainerAllocator>& v)$/;"	f	struct:ros::message_operations::Printer
stream	include/map_msgs/GetMapROIResponse.h	/^  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::map_msgs::GetMapROIResponse_<ContainerAllocator>& v)$/;"	f	struct:ros::message_operations::Printer
stream	include/map_msgs/GetPointMapROIRequest.h	/^  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::map_msgs::GetPointMapROIRequest_<ContainerAllocator>& v)$/;"	f	struct:ros::message_operations::Printer
stream	include/map_msgs/GetPointMapROIResponse.h	/^  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::map_msgs::GetPointMapROIResponse_<ContainerAllocator>& v)$/;"	f	struct:ros::message_operations::Printer
stream	include/map_msgs/GetPointMapRequest.h	/^  template<typename Stream> static void stream(Stream&, const std::string&, const ::map_msgs::GetPointMapRequest_<ContainerAllocator>&)$/;"	f	struct:ros::message_operations::Printer
stream	include/map_msgs/GetPointMapResponse.h	/^  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::map_msgs::GetPointMapResponse_<ContainerAllocator>& v)$/;"	f	struct:ros::message_operations::Printer
stream	include/map_msgs/OccupancyGridUpdate.h	/^  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::map_msgs::OccupancyGridUpdate_<ContainerAllocator>& v)$/;"	f	struct:ros::message_operations::Printer
stream	include/map_msgs/PointCloud2Update.h	/^  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::map_msgs::PointCloud2Update_<ContainerAllocator>& v)$/;"	f	struct:ros::message_operations::Printer
stream	include/map_msgs/ProjectedMap.h	/^  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::map_msgs::ProjectedMap_<ContainerAllocator>& v)$/;"	f	struct:ros::message_operations::Printer
stream	include/map_msgs/ProjectedMapInfo.h	/^  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::map_msgs::ProjectedMapInfo_<ContainerAllocator>& v)$/;"	f	struct:ros::message_operations::Printer
stream	include/map_msgs/ProjectedMapsInfoRequest.h	/^  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::map_msgs::ProjectedMapsInfoRequest_<ContainerAllocator>& v)$/;"	f	struct:ros::message_operations::Printer
stream	include/map_msgs/ProjectedMapsInfoResponse.h	/^  template<typename Stream> static void stream(Stream&, const std::string&, const ::map_msgs::ProjectedMapsInfoResponse_<ContainerAllocator>&)$/;"	f	struct:ros::message_operations::Printer
stream	include/map_msgs/SaveMapRequest.h	/^  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::map_msgs::SaveMapRequest_<ContainerAllocator>& v)$/;"	f	struct:ros::message_operations::Printer
stream	include/map_msgs/SaveMapResponse.h	/^  template<typename Stream> static void stream(Stream&, const std::string&, const ::map_msgs::SaveMapResponse_<ContainerAllocator>&)$/;"	f	struct:ros::message_operations::Printer
stream	include/map_msgs/SetMapProjectionsRequest.h	/^  template<typename Stream> static void stream(Stream&, const std::string&, const ::map_msgs::SetMapProjectionsRequest_<ContainerAllocator>&)$/;"	f	struct:ros::message_operations::Printer
stream	include/map_msgs/SetMapProjectionsResponse.h	/^  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::map_msgs::SetMapProjectionsResponse_<ContainerAllocator>& v)$/;"	f	struct:ros::message_operations::Printer
streaming_	include/pcl/io/openni_camera/openni_device_oni.h	/^    bool streaming_;$/;"	m	class:openni_wrapper::DeviceONI
strength	include/pcl/impl/point_types.hpp	/^        float strength;$/;"	m	struct:pcl::InterestPoint::__anon21::__anon22
strict_	include/pcl/io/real_sense_grabber.h	/^      bool strict_;$/;"	m	class:pcl::RealSenseGrabber
struct_offset	include/pcl/point_cloud.h	/^      size_t struct_offset;$/;"	m	struct:pcl::detail::FieldMapping
sub_map	include/map_msgs/GetMapROIResponse.h	/^  _sub_map_type sub_map;$/;"	m	struct:map_msgs::GetMapROIResponse_
sub_map	include/map_msgs/GetPointMapROIResponse.h	/^  _sub_map_type sub_map;$/;"	m	struct:map_msgs::GetPointMapROIResponse_
subscribe_to_updates_	include/costmap_2d/static_layer.h	/^  bool subscribe_to_updates_;$/;"	m	class:costmap_2d::StaticLayer
swap	include/pcl/point_cloud.h	/^      swap (PointCloud<PointT> &rhs)$/;"	f	class:pcl::PointCloud
swapByte	include/pcl/common/io.h	/^    swapByte (T& value)$/;"	f	namespace:pcl::io
swapByte	include/pcl/common/io.h	/^    swapByte<1> (char* bytes) { bytes[0] = bytes[0]; }$/;"	f	namespace:pcl::io
swapByte	include/pcl/common/io.h	/^    swapByte<2> (char* bytes) { std::swap (bytes[0], bytes[1]); }$/;"	f	namespace:pcl::io
swapByte	include/pcl/common/io.h	/^    swapByte<4> (char* bytes)$/;"	f	namespace:pcl::io
swapByte	include/pcl/common/io.h	/^    swapByte<8> (char* bytes)$/;"	f	namespace:pcl::io
swap_byte_order	include/pcl/io/ply/byte_order.h	/^        inline void swap_byte_order<4> (char* bytes)$/;"	f	namespace:pcl::io::ply
swap_byte_order	include/pcl/io/ply/byte_order.h	/^        inline void swap_byte_order<8> (char* bytes)$/;"	f	namespace:pcl::io::ply
swap_byte_order	include/pcl/io/ply/byte_order.h	/^      inline void swap_byte_order<1> (char*) {}$/;"	f	namespace:pcl::io::ply
swap_byte_order	include/pcl/io/ply/byte_order.h	/^      inline void swap_byte_order<2> (char* bytes)$/;"	f	namespace:pcl::io::ply
swap_byte_order	include/pcl/io/ply/byte_order.h	/^      void swap_byte_order (T& value)$/;"	f	namespace:pcl::io::ply
sweep_xyz_signal_	include/pcl/io/hdl_grabber.h	/^      boost::signals2::signal<sig_cb_velodyne_hdl_sweep_point_cloud_xyz>* sweep_xyz_signal_;$/;"	m	class:pcl::HDLGrabber
sweep_xyzi_signal_	include/pcl/io/hdl_grabber.h	/^      boost::signals2::signal<sig_cb_velodyne_hdl_sweep_point_cloud_xyzi>* sweep_xyzi_signal_;$/;"	m	class:pcl::HDLGrabber
sweep_xyzrgb_signal_	include/pcl/io/hdl_grabber.h	/^      boost::signals2::signal<sig_cb_velodyne_hdl_sweep_point_cloud_xyzrgb>* sweep_xyzrgb_signal_;$/;"	m	class:pcl::HDLGrabber
sync_packet_size_	include/pcl/io/dinast_grabber.h	/^      int sync_packet_size_;$/;"	m	class:pcl::DinastGrabber
sync_required_	include/pcl/io/openni2_grabber.h	/^        bool sync_required_;$/;"	m	class:pcl::io::OpenNI2Grabber
sync_required_	include/pcl/io/openni_grabber.h	/^      bool sync_required_;$/;"	m	class:pcl::OpenNIGrabber
tcp_open_	include/pcl/io/ensenso_grabber.h	/^      bool tcp_open_;$/;"	m	class:pcl::EnsensoGrabber
tdotx	include/tf/LinearMath/Matrix3x3.h	/^	TFSIMD_FORCE_INLINE tfScalar tdotx(const Vector3& v) const $/;"	f	class:tf::Matrix3x3
tdoty	include/tf/LinearMath/Matrix3x3.h	/^	TFSIMD_FORCE_INLINE tfScalar tdoty(const Vector3& v) const $/;"	f	class:tf::Matrix3x3
tdotz	include/tf/LinearMath/Matrix3x3.h	/^	TFSIMD_FORCE_INLINE tfScalar tdotz(const Vector3& v) const $/;"	f	class:tf::Matrix3x3
temporal_filtering_type_	include/pcl/io/depth_sense/depth_sense_grabber_impl.h	/^        DepthSenseGrabber::TemporalFilteringType temporal_filtering_type_;$/;"	m	struct:pcl::io::depth_sense::DepthSenseGrabberImpl
temporal_filtering_type_	include/pcl/io/real_sense_grabber.h	/^      TemporalFilteringType temporal_filtering_type_;$/;"	m	class:pcl::RealSenseGrabber
temporal_filtering_window_size_	include/pcl/io/real_sense_grabber.h	/^      size_t temporal_filtering_window_size_;$/;"	m	class:pcl::RealSenseGrabber
terminate_read_packet_thread_	include/pcl/io/hdl_grabber.h	/^      bool terminate_read_packet_thread_;$/;"	m	class:pcl::HDLGrabber
terminate_thread_	include/pcl/io/robot_eye_grabber.h	/^      bool terminate_thread_;$/;"	m	class:pcl::RobotEyeGrabber
test	include/pcl/pcl_tests.h	/^  namespace test$/;"	n	namespace:pcl
tex_Ka	include/pcl/TextureMesh.h	/^    RGB         tex_Ka;$/;"	m	struct:pcl::TexMaterial
tex_Kd	include/pcl/TextureMesh.h	/^    RGB         tex_Kd;$/;"	m	struct:pcl::TexMaterial
tex_Ks	include/pcl/TextureMesh.h	/^    RGB         tex_Ks;$/;"	m	struct:pcl::TexMaterial
tex_Ns	include/pcl/TextureMesh.h	/^    float       tex_Ns;$/;"	m	struct:pcl::TexMaterial
tex_coordinates	include/pcl/TextureMesh.h	/^    std::vector<std::vector<Eigen::Vector2f, Eigen::aligned_allocator<Eigen::Vector2f> > > tex_coordinates;  \/\/ UV coordinates$/;"	m	struct:pcl::TextureMesh
tex_d	include/pcl/TextureMesh.h	/^    float       tex_d;$/;"	m	struct:pcl::TexMaterial
tex_file	include/pcl/TextureMesh.h	/^    std::string tex_file;$/;"	m	struct:pcl::TexMaterial
tex_illum	include/pcl/TextureMesh.h	/^    int         tex_illum;$/;"	m	struct:pcl::TexMaterial
tex_materials	include/pcl/TextureMesh.h	/^    std::vector<pcl::TexMaterial>               tex_materials;    \/\/ define texture material$/;"	m	struct:pcl::TextureMesh
tex_name	include/pcl/TextureMesh.h	/^    std::string tex_name;$/;"	m	struct:pcl::TexMaterial
tex_polygons	include/pcl/TextureMesh.h	/^    std::vector<std::vector<pcl::Vertices> >    tex_polygons;     \/\/ polygon which is mapped with specific texture defined in TexMaterial$/;"	m	struct:pcl::TextureMesh
tf	include/tf/LinearMath/Matrix3x3.h	/^namespace tf$/;"	n
tf	include/tf/LinearMath/QuadWord.h	/^namespace tf$/;"	n
tf	include/tf/LinearMath/Quaternion.h	/^namespace tf$/;"	n
tf	include/tf/LinearMath/Transform.h	/^namespace tf$/;"	n
tf	include/tf/LinearMath/Vector3.h	/^namespace tf{$/;"	n
tfAcos	include/tf/LinearMath/Scalar.h	/^TFSIMD_FORCE_INLINE tfScalar tfAcos(tfScalar x) { if (x<tfScalar(-1))	x=tfScalar(-1); if (x>tfScalar(1))	x=tfScalar(1); return acos(x); }$/;"	f
tfAngle	include/tf/LinearMath/Vector3.h	/^tfAngle(const Vector3& v1, const Vector3& v2) $/;"	f	namespace:tf
tfAsin	include/tf/LinearMath/Scalar.h	/^TFSIMD_FORCE_INLINE tfScalar tfAsin(tfScalar x) { if (x<tfScalar(-1))	x=tfScalar(-1); if (x>tfScalar(1))	x=tfScalar(1); return asin(x); }$/;"	f
tfAssert	include/tf/LinearMath/Scalar.h	114;"	d
tfAssert	include/tf/LinearMath/Scalar.h	116;"	d
tfAssert	include/tf/LinearMath/Scalar.h	143;"	d
tfAssert	include/tf/LinearMath/Scalar.h	145;"	d
tfAssert	include/tf/LinearMath/Scalar.h	71;"	d
tfAssert	include/tf/LinearMath/Scalar.h	73;"	d
tfAssert	include/tf/LinearMath/Scalar.h	92;"	d
tfAssert	include/tf/LinearMath/Scalar.h	94;"	d
tfAtan	include/tf/LinearMath/Scalar.h	/^TFSIMD_FORCE_INLINE tfScalar tfAtan(tfScalar x) { return atan(x); }$/;"	f
tfAtan2	include/tf/LinearMath/Scalar.h	/^TFSIMD_FORCE_INLINE tfScalar tfAtan2(tfScalar x, tfScalar y) { return atan2(x, y); }$/;"	f
tfAtan2Fast	include/tf/LinearMath/Scalar.h	/^TFSIMD_FORCE_INLINE tfScalar tfAtan2Fast(tfScalar y, tfScalar x) $/;"	f
tfCos	include/tf/LinearMath/Scalar.h	/^TFSIMD_FORCE_INLINE tfScalar tfCos(tfScalar x) { return cos(x); }$/;"	f
tfCross	include/tf/LinearMath/Vector3.h	/^tfCross(const Vector3& v1, const Vector3& v2) $/;"	f	namespace:tf
tfDegrees	include/tf/LinearMath/Scalar.h	/^TFSIMD_FORCE_INLINE tfScalar tfDegrees(tfScalar x) { return x * TFSIMD_DEGS_PER_RAD; }$/;"	f
tfDistance	include/tf/LinearMath/Vector3.h	/^tfDistance(const Vector3& v1, const Vector3& v2) $/;"	f	namespace:tf
tfDistance2	include/tf/LinearMath/Vector3.h	/^tfDistance2(const Vector3& v1, const Vector3& v2) $/;"	f	namespace:tf
tfDot	include/tf/LinearMath/Vector3.h	/^tfDot(const Vector3& v1, const Vector3& v2) $/;"	f	namespace:tf
tfEqual	include/tf/LinearMath/Scalar.h	/^TFSIMD_FORCE_INLINE bool	tfEqual(tfScalar a, tfScalar eps) {$/;"	f
tfExp	include/tf/LinearMath/Scalar.h	/^TFSIMD_FORCE_INLINE tfScalar tfExp(tfScalar x) { return exp(x); }$/;"	f
tfFabs	include/tf/LinearMath/Scalar.h	/^TFSIMD_FORCE_INLINE tfScalar tfFabs(tfScalar x) { return fabs(x); }$/;"	f
tfFmod	include/tf/LinearMath/Scalar.h	/^TFSIMD_FORCE_INLINE tfScalar tfFmod(tfScalar x,tfScalar y) { return fmod(x,y); }$/;"	f
tfFsel	include/tf/LinearMath/Scalar.h	/^TFSIMD_FORCE_INLINE tfScalar tfFsel(tfScalar a, tfScalar b, tfScalar c)$/;"	f
tfFsel	include/tf/LinearMath/Scalar.h	61;"	d
tfFsels	include/tf/LinearMath/Scalar.h	248;"	d
tfFullAssert	include/tf/LinearMath/Scalar.h	119;"	d
tfFullAssert	include/tf/LinearMath/Scalar.h	149;"	d
tfFullAssert	include/tf/LinearMath/Scalar.h	76;"	d
tfFullAssert	include/tf/LinearMath/Scalar.h	97;"	d
tfFuzzyZero	include/tf/LinearMath/Scalar.h	/^TFSIMD_FORCE_INLINE bool      tfFuzzyZero(tfScalar x) { return tfFabs(x) < TFSIMD_EPSILON; }$/;"	f
tfGreaterEqual	include/tf/LinearMath/Scalar.h	/^TFSIMD_FORCE_INLINE bool	tfGreaterEqual (tfScalar a, tfScalar eps) {$/;"	f
tfIsNegative	include/tf/LinearMath/Scalar.h	/^TFSIMD_FORCE_INLINE int       tfIsNegative(tfScalar x) {$/;"	f
tfLikely	include/tf/LinearMath/Scalar.h	122;"	d
tfLikely	include/tf/LinearMath/Scalar.h	150;"	d
tfLikely	include/tf/LinearMath/Scalar.h	78;"	d
tfLikely	include/tf/LinearMath/Scalar.h	99;"	d
tfLog	include/tf/LinearMath/Scalar.h	/^TFSIMD_FORCE_INLINE tfScalar tfLog(tfScalar x) { return log(x); }$/;"	f
tfMachineIsLittleEndian	include/tf/LinearMath/Scalar.h	/^TFSIMD_FORCE_INLINE bool tfMachineIsLittleEndian()$/;"	f
tfMax	include/tf/LinearMath/MinMax.h	/^TFSIMD_FORCE_INLINE const T& tfMax(const T& a, const T& b) $/;"	f
tfMin	include/tf/LinearMath/MinMax.h	/^TFSIMD_FORCE_INLINE const T& tfMin(const T& a, const T& b) $/;"	f
tfNormalizeAngle	include/tf/LinearMath/Scalar.h	/^TFSIMD_FORCE_INLINE tfScalar tfNormalizeAngle(tfScalar angleInRadians) $/;"	f
tfPlaneSpace1	include/tf/LinearMath/Vector3.h	/^TFSIMD_FORCE_INLINE void tfPlaneSpace1 (const Vector3& n, Vector3& p, Vector3& q)$/;"	f	namespace:tf
tfPow	include/tf/LinearMath/Scalar.h	/^TFSIMD_FORCE_INLINE tfScalar tfPow(tfScalar x,tfScalar y) { return pow(x,y); }$/;"	f
tfRadians	include/tf/LinearMath/Scalar.h	/^TFSIMD_FORCE_INLINE tfScalar tfRadians(tfScalar x) { return x * TFSIMD_RADS_PER_DEG; }$/;"	f
tfRecipSqrt	include/tf/LinearMath/Scalar.h	201;"	d
tfScalar	include/tf/LinearMath/Scalar.h	/^typedef double tfScalar;$/;"	t
tfSelect	include/tf/LinearMath/Scalar.h	/^TFSIMD_FORCE_INLINE float tfSelect(unsigned condition, float valueIfConditionNonZero, float valueIfConditionZero)$/;"	f
tfSelect	include/tf/LinearMath/Scalar.h	/^TFSIMD_FORCE_INLINE int tfSelect(unsigned condition, int valueIfConditionNonZero, int valueIfConditionZero)$/;"	f
tfSelect	include/tf/LinearMath/Scalar.h	/^TFSIMD_FORCE_INLINE unsigned tfSelect(unsigned condition, unsigned valueIfConditionNonZero, unsigned valueIfConditionZero) $/;"	f
tfSetMax	include/tf/LinearMath/MinMax.h	/^TFSIMD_FORCE_INLINE void tfSetMax(T& a, const T& b) $/;"	f
tfSetMin	include/tf/LinearMath/MinMax.h	/^TFSIMD_FORCE_INLINE void tfSetMin(T& a, const T& b) $/;"	f
tfSin	include/tf/LinearMath/Scalar.h	/^TFSIMD_FORCE_INLINE tfScalar tfSin(tfScalar x) { return sin(x); }$/;"	f
tfSqrt	include/tf/LinearMath/Scalar.h	/^TFSIMD_FORCE_INLINE tfScalar tfSqrt(tfScalar x) { return sqrt(x); }$/;"	f
tfSwap	include/tf/LinearMath/Scalar.h	/^template<typename T> TFSIMD_FORCE_INLINE void tfSwap(T& a, T& b)$/;"	f
tfSwapEndian	include/tf/LinearMath/Scalar.h	/^TFSIMD_FORCE_INLINE unsigned short tfSwapEndian(short val)$/;"	f
tfSwapEndian	include/tf/LinearMath/Scalar.h	/^TFSIMD_FORCE_INLINE unsigned short tfSwapEndian(unsigned short val)$/;"	f
tfSwapEndian	include/tf/LinearMath/Scalar.h	/^TFSIMD_FORCE_INLINE unsigned tfSwapEndian(int val)$/;"	f
tfSwapEndian	include/tf/LinearMath/Scalar.h	/^TFSIMD_FORCE_INLINE unsigned tfSwapEndian(unsigned val)$/;"	f
tfSwapEndianDouble	include/tf/LinearMath/Scalar.h	/^TFSIMD_FORCE_INLINE void  tfSwapEndianDouble(double d, unsigned char* dst)$/;"	f
tfSwapEndianFloat	include/tf/LinearMath/Scalar.h	/^TFSIMD_FORCE_INLINE unsigned int  tfSwapEndianFloat(float d)$/;"	f
tfSwapScalarEndian	include/tf/LinearMath/Vector3.h	/^TFSIMD_FORCE_INLINE void	tfSwapScalarEndian(const tfScalar& sourceVal, tfScalar& destVal)$/;"	f	namespace:tf
tfSwapVector3Endian	include/tf/LinearMath/Vector3.h	/^TFSIMD_FORCE_INLINE void	tfSwapVector3Endian(const Vector3& sourceVec, Vector3& destVec)$/;"	f	namespace:tf
tfTan	include/tf/LinearMath/Scalar.h	/^TFSIMD_FORCE_INLINE tfScalar tfTan(tfScalar x) { return tan(x); }$/;"	f
tfTransform_H	include/tf/LinearMath/Transform.h	18;"	d
tfTriple	include/tf/LinearMath/Vector3.h	/^tfTriple(const Vector3& v1, const Vector3& v2, const Vector3& v3)$/;"	f	namespace:tf
tfTypedObject	include/tf/LinearMath/Scalar.h	/^	tfTypedObject(int objectType)$/;"	f	struct:tfTypedObject
tfTypedObject	include/tf/LinearMath/Scalar.h	/^struct tfTypedObject$/;"	s
tfUnSwapVector3Endian	include/tf/LinearMath/Vector3.h	/^TFSIMD_FORCE_INLINE void	tfUnSwapVector3Endian(Vector3& vector)$/;"	f	namespace:tf
tfUnlikely	include/tf/LinearMath/Scalar.h	100;"	d
tfUnlikely	include/tf/LinearMath/Scalar.h	123;"	d
tfUnlikely	include/tf/LinearMath/Scalar.h	151;"	d
tfUnlikely	include/tf/LinearMath/Scalar.h	79;"	d
tfUnswapEndianDouble	include/tf/LinearMath/Scalar.h	/^TFSIMD_FORCE_INLINE double tfUnswapEndianDouble(const unsigned char *src) $/;"	f
tfUnswapEndianFloat	include/tf/LinearMath/Scalar.h	/^TFSIMD_FORCE_INLINE float tfUnswapEndianFloat(unsigned int a) $/;"	f
tfVector4	include/tf/LinearMath/Vector3.h	/^	TFSIMD_FORCE_INLINE tfVector4() {}$/;"	f	class:tf::tfVector4
tfVector4	include/tf/LinearMath/Vector3.h	/^	TFSIMD_FORCE_INLINE tfVector4(const tfScalar& x, const tfScalar& y, const tfScalar& z,const tfScalar& w) $/;"	f	class:tf::tfVector4
tfVector4	include/tf/LinearMath/Vector3.h	/^class tfVector4 : public Vector3$/;"	c	namespace:tf
tf_tolerance_	include/costmap_2d/observation_buffer.h	/^  double tf_tolerance_;$/;"	m	class:costmap_2d::ObservationBuffer
thread_	include/pcl/io/real_sense_grabber.h	/^      boost::thread thread_;$/;"	m	class:pcl::RealSenseGrabber
threePlanesIntersection	include/pcl/common/impl/intersections.hpp	/^pcl::threePlanesIntersection (const Eigen::Matrix<Scalar, 4, 1> &plane_a, $/;"	f	class:pcl
threePlanesIntersection	include/pcl/common/intersections.h	/^  threePlanesIntersection (const Eigen::Vector4d &plane_a,$/;"	f	namespace:pcl
threePlanesIntersection	include/pcl/common/intersections.h	/^  threePlanesIntersection (const Eigen::Vector4f &plane_a,$/;"	f	namespace:pcl
threshold_max_	include/pcl/common/feature_histogram.h	/^      float threshold_max_;$/;"	m	class:pcl::FeatureHistogram
threshold_min_	include/pcl/common/feature_histogram.h	/^      float threshold_min_;$/;"	m	class:pcl::FeatureHistogram
throwIOException	include/pcl/io/io_exception.h	/^    throwIOException (const char* function, const char* file, unsigned line, const char* format, ...)$/;"	f	namespace:pcl::io
throwOpenNIException	include/pcl/io/openni_camera/openni_exception.h	/^  throwOpenNIException (const char* function_name, const char* file_name, unsigned line_number, const char* format, ...)$/;"	f	namespace:openni_wrapper
tic	include/pcl/console/time.h	/^        tic ()$/;"	f	class:pcl::console::TicToc
tictic	include/pcl/console/time.h	/^        boost::posix_time::ptime tictic;$/;"	m	class:pcl::console::TicToc
timer_thread_	include/pcl/common/time_trigger.h	/^      boost::thread timer_thread_;$/;"	m	class:pcl::TimeTrigger
timesTranspose	include/tf/LinearMath/Matrix3x3.h	/^Matrix3x3::timesTranspose(const Matrix3x3& m) const$/;"	f	class:tf::Matrix3x3
timestamp_	include/pcl/io/image.h	/^        Timestamp timestamp_;$/;"	m	class:pcl::io::Image
timestamp_	include/pcl/io/image_depth.h	/^        Timestamp timestamp_;$/;"	m	class:pcl::io::DepthImage
timestamp_	include/pcl/io/image_ir.h	/^        Timestamp timestamp_;$/;"	m	class:pcl::io::IRImage
title_	include/pcl/common/time.h	/^      std::string title_;$/;"	m	class:pcl::ScopeTime
toPCLPointCloud2	include/pcl/conversions.h	/^  toPCLPointCloud2 (const CloudT& cloud, pcl::PCLImage& msg)$/;"	f	namespace:pcl
toPCLPointCloud2	include/pcl/conversions.h	/^  toPCLPointCloud2 (const pcl::PCLPointCloud2& cloud, pcl::PCLImage& msg)$/;"	f	namespace:pcl
toPCLPointCloud2	include/pcl/conversions.h	/^  toPCLPointCloud2 (const pcl::PointCloud<PointT>& cloud, pcl::PCLPointCloud2& msg)$/;"	f	namespace:pcl
toPoint	src/footprint.cpp	/^geometry_msgs::Point toPoint(geometry_msgs::Point32 pt)$/;"	f	namespace:costmap_2d
toPoint32	src/footprint.cpp	/^geometry_msgs::Point32 toPoint32(geometry_msgs::Point pt)$/;"	f	namespace:costmap_2d
toPointVector	src/footprint.cpp	/^std::vector<geometry_msgs::Point> toPointVector(geometry_msgs::Polygon polygon)$/;"	f	namespace:costmap_2d
toPolygon	src/footprint.cpp	/^geometry_msgs::Polygon toPolygon(std::vector<geometry_msgs::Point> pts)$/;"	f	namespace:costmap_2d
toROSMsg	include/pcl/ros/conversions.h	/^  toROSMsg (const CloudT& cloud, pcl::PCLImage& msg)$/;"	f	namespace:pcl
toROSMsg	include/pcl/ros/conversions.h	/^  toROSMsg (const pcl::PCLPointCloud2& cloud, pcl::PCLImage& msg)$/;"	f	namespace:pcl
toROSMsg	include/pcl/ros/conversions.h	/^  toROSMsg (const pcl::PointCloud<PointT>& cloud, pcl::PCLPointCloud2& msg)$/;"	f	namespace:pcl
to_range_image_system_	include/pcl/range_image/range_image.h	/^      Eigen::Affine3f to_range_image_system_;  \/**< Inverse of to_world_system_ *\/$/;"	m	class:pcl::RangeImage
to_world_system_	include/pcl/range_image/range_image.h	/^      Eigen::Affine3f to_world_system_;        \/**< Inverse of to_range_image_system_ *\/$/;"	m	class:pcl::RangeImage
toc	include/pcl/console/time.h	/^        toc ()$/;"	f	class:pcl::console::TicToc
toc_print	include/pcl/console/time.h	/^        toc_print ()$/;"	f	class:pcl::console::TicToc
toctoc	include/pcl/console/time.h	/^        boost::posix_time::ptime toctoc;$/;"	m	class:pcl::console::TicToc
topic_name_	include/costmap_2d/observation_buffer.h	/^  std::string topic_name_;$/;"	m	class:costmap_2d::ObservationBuffer
touch	src/costmap_layer.cpp	/^void CostmapLayer::touch(double x, double y, double* min_x, double* min_y, double* max_x, double* max_y)$/;"	f	class:costmap_2d::CostmapLayer
track_unknown_space_	include/costmap_2d/static_layer.h	/^  bool track_unknown_space_;$/;"	m	class:costmap_2d::StaticLayer
traits	include/pcl/impl/point_types.hpp	/^    BorderTraits traits;$/;"	m	struct:pcl::BorderDescription
traits	include/pcl/point_traits.h	/^  namespace traits$/;"	n	namespace:pcl
traits	include/pcl/point_types.h	/^  namespace traits$/;"	n	namespace:pcl
traits	include/pcl/register_point_struct.h	/^  namespace traits$/;"	n	namespace:pcl
transformBetween2CoordinateSystems	include/pcl/common/eigen.h	/^  transformBetween2CoordinateSystems (const Eigen::Matrix<double, Eigen::Dynamic, 1> from_line_x,$/;"	f	namespace:pcl
transformBetween2CoordinateSystems	include/pcl/common/eigen.h	/^  transformBetween2CoordinateSystems (const Eigen::Matrix<float, Eigen::Dynamic, 1> from_line_x,$/;"	f	namespace:pcl
transformBetween2CoordinateSystems	include/pcl/common/impl/eigen.hpp	/^pcl::transformBetween2CoordinateSystems (const Eigen::Matrix<Scalar, Eigen::Dynamic, 1> from_line_x,$/;"	f	class:pcl
transformFootprint	src/footprint.cpp	/^void transformFootprint(double x, double y, double theta, const std::vector<geometry_msgs::Point>& footprint_spec,$/;"	f	namespace:costmap_2d
transformLine	include/pcl/common/eigen.h	/^  transformLine (const Eigen::VectorXd &line_in,$/;"	f	namespace:pcl
transformLine	include/pcl/common/eigen.h	/^  transformLine (const Eigen::VectorXf &line_in,$/;"	f	namespace:pcl
transformLine	include/pcl/common/impl/eigen.hpp	/^pcl::transformLine (const Eigen::Matrix<Scalar, Eigen::Dynamic, 1> &line_in,$/;"	f	class:pcl
transformPlane	include/pcl/common/eigen.h	/^  transformPlane (const Eigen::Matrix<double, 4, 1> &plane_in,$/;"	f	namespace:pcl
transformPlane	include/pcl/common/eigen.h	/^  transformPlane (const Eigen::Matrix<float, 4, 1> &plane_in,$/;"	f	namespace:pcl
transformPlane	include/pcl/common/eigen.h	/^  transformPlane (const pcl::ModelCoefficients::Ptr plane_in,$/;"	f	namespace:pcl
transformPlane	include/pcl/common/impl/eigen.hpp	/^pcl::transformPlane (const Eigen::Matrix<Scalar, 4, 1> &plane_in,$/;"	f	class:pcl
transformPlane	include/pcl/common/impl/eigen.hpp	/^pcl::transformPlane (const pcl::ModelCoefficients::Ptr plane_in,$/;"	f	class:pcl
transformPoint	include/pcl/common/eigen.h	/^  transformPoint (const Eigen::Matrix<Scalar, 3, 1> &point_in,$/;"	f	namespace:pcl
transformPoint	include/pcl/common/eigen.h	/^  transformPoint (const Eigen::Vector3d &point_in,$/;"	f	namespace:pcl
transformPoint	include/pcl/common/eigen.h	/^  transformPoint (const Eigen::Vector3f &point_in,$/;"	f	namespace:pcl
transformPoint	include/pcl/common/impl/transforms.hpp	/^pcl::transformPoint (const PointT &point, $/;"	f	class:pcl
transformPoint	include/pcl/common/transforms.h	/^  transformPoint (const PointT &point, $/;"	f	namespace:pcl
transformPointCloud	include/pcl/common/impl/transforms.hpp	/^pcl::transformPointCloud (const pcl::PointCloud<PointT> &cloud_in, $/;"	f	class:pcl
transformPointCloud	include/pcl/common/transforms.h	/^  transformPointCloud (const pcl::PointCloud<PointT> &cloud_in, $/;"	f	namespace:pcl
transformPointCloudWithNormals	include/pcl/common/impl/transforms.hpp	/^pcl::transformPointCloudWithNormals (const pcl::PointCloud<PointT> &cloud_in, $/;"	f	class:pcl
transformPointCloudWithNormals	include/pcl/common/transforms.h	/^  transformPointCloudWithNormals (const pcl::PointCloud<PointT> &cloud_in, $/;"	f	namespace:pcl
transformPointWithNormal	include/pcl/common/impl/transforms.hpp	/^pcl::transformPointWithNormal (const PointT &point, $/;"	f	class:pcl
transformPointWithNormal	include/pcl/common/transforms.h	/^  transformPointWithNormal (const PointT &point, $/;"	f	namespace:pcl
transformVector	include/pcl/common/eigen.h	/^  transformVector (const Eigen::Matrix<Scalar, 3, 1> &vector_in,$/;"	f	namespace:pcl
transformVector	include/pcl/common/eigen.h	/^  transformVector (const Eigen::Vector3d &vector_in,$/;"	f	namespace:pcl
transformVector	include/pcl/common/eigen.h	/^  transformVector (const Eigen::Vector3f &vector_in,$/;"	f	namespace:pcl
transform_tolerance_	include/costmap_2d/costmap_2d_ros.h	/^  double transform_tolerance_;  \/\/\/< timeout before transform errors$/;"	m	class:costmap_2d::Costmap2DROS
transformation	include/pcl/common/poses_from_matches.h	/^        Eigen::Affine3f transformation;   \/\/!< The estimated transformation between the two coordinate systems$/;"	m	struct:pcl::PosesFromMatches::PoseEstimate
transformation	include/pcl/correspondence.h	/^    Eigen::Affine3f transformation;  \/\/!< The transformation to go from the coordinate system$/;"	m	struct:pcl::PointCorrespondence6D
transformed_footprint_	include/costmap_2d/obstacle_layer.h	/^  std::vector<geometry_msgs::Point> transformed_footprint_;$/;"	m	class:costmap_2d::ObstacleLayer
transpose	include/tf/LinearMath/Matrix3x3.h	/^Matrix3x3::transpose() const $/;"	f	class:tf::Matrix3x3
transposeTimes	include/tf/LinearMath/Matrix3x3.h	/^Matrix3x3::transposeTimes(const Matrix3x3& m) const$/;"	f	class:tf::Matrix3x3
trinary_costmap_	include/costmap_2d/static_layer.h	/^  bool trinary_costmap_;$/;"	m	class:costmap_2d::StaticLayer
triple	include/tf/LinearMath/Vector3.h	/^	TFSIMD_FORCE_INLINE tfScalar triple(const Vector3& v1, const Vector3& v2) const$/;"	f	class:tf::Vector3
trivial_	include/pcl/point_representation.h	/^      bool trivial_;$/;"	m	class:pcl::PointRepresentation
twiddles	include/pcl/common/fft/_kiss_fft_guts.h	/^    kiss_fft_cpx twiddles[1];$/;"	m	struct:kiss_fft_state
type	include/map_msgs/PointCloud2Update.h	/^  _type_type type;$/;"	m	struct:map_msgs::PointCloud2Update_
type	include/pcl/common/impl/accumulators.hpp	/^      type;$/;"	t	struct:pcl::detail::Accumulators
type	include/pcl/common/random.h	/^      typedef boost::normal_distribution<T> type;$/;"	t	struct:pcl::common::normal_distribution
type	include/pcl/common/random.h	/^      typedef boost::uniform_int<int> type;$/;"	t	struct:pcl::common::uniform_distribution
type	include/pcl/common/random.h	/^      typedef boost::uniform_real<float> type;$/;"	t	struct:pcl::common::uniform_distribution
type	include/pcl/for_each_type.h	/^    typedef typename boost::mpl::remove_if<Sequence1, boost::mpl::not_<boost::mpl::contains<Sequence2, boost::mpl::_1> > >::type type; $/;"	t	struct:pcl::intersect
type	include/pcl/io/ply/ply_parser.h	/^              > (const std::string&, const std::string&)> type;$/;"	t	struct:pcl::io::ply::ply_parser::list_property_definition_callback_type
type	include/pcl/io/ply/ply_parser.h	/^            typedef boost::function<scalar_property_callback_type (const std::string&, const std::string&)> type;$/;"	t	struct:pcl::io::ply::ply_parser::scalar_property_definition_callback_type
type	include/pcl/io/ply/ply_parser.h	/^            typedef boost::function<void ()> type;$/;"	t	struct:pcl::io::ply::ply_parser::list_property_end_callback_type
type	include/pcl/io/ply/ply_parser.h	/^            typedef boost::function<void (ScalarType)> type;$/;"	t	struct:pcl::io::ply::ply_parser::list_property_element_callback_type
type	include/pcl/io/ply/ply_parser.h	/^            typedef boost::function<void (ScalarType)> type;$/;"	t	struct:pcl::io::ply::ply_parser::scalar_property_callback_type
type	include/pcl/io/ply/ply_parser.h	/^            typedef boost::function<void (SizeType)> type;$/;"	t	struct:pcl::io::ply::ply_parser::list_property_begin_callback_type
type	include/pcl/point_traits.h	/^      typedef PointT type;$/;"	t	struct:pcl::traits::POD
type	include/pcl/point_traits.h	/^      typedef typename boost::remove_all_extents<T>::type type;$/;"	t	struct:pcl::traits::decomposeArray
type	include/pcl/point_traits.h	/^    template<> struct asType<pcl::PCLPointField::FLOAT32> { typedef float    type; };$/;"	t	struct:pcl::traits::asType
type	include/pcl/point_traits.h	/^    template<> struct asType<pcl::PCLPointField::FLOAT64> { typedef double   type; };$/;"	t	struct:pcl::traits::asType
type	include/pcl/point_traits.h	/^    template<> struct asType<pcl::PCLPointField::INT16>   { typedef int16_t  type; };$/;"	t	struct:pcl::traits::asType
type	include/pcl/point_traits.h	/^    template<> struct asType<pcl::PCLPointField::INT32>   { typedef int32_t  type; };$/;"	t	struct:pcl::traits::asType
type	include/pcl/point_traits.h	/^    template<> struct asType<pcl::PCLPointField::INT8>    { typedef int8_t   type; };$/;"	t	struct:pcl::traits::asType
type	include/pcl/point_traits.h	/^    template<> struct asType<pcl::PCLPointField::UINT16>  { typedef uint16_t type; };$/;"	t	struct:pcl::traits::asType
type	include/pcl/point_traits.h	/^    template<> struct asType<pcl::PCLPointField::UINT32>  { typedef uint32_t type; };$/;"	t	struct:pcl::traits::asType
type	include/pcl/point_traits.h	/^    template<> struct asType<pcl::PCLPointField::UINT8>   { typedef uint8_t  type; };$/;"	t	struct:pcl::traits::asType
u	include/pcl/impl/point_types.hpp	/^    float u;$/;"	m	struct:pcl::PointUV
udp_listener_endpoint_	include/pcl/io/hdl_grabber.h	/^      boost::asio::ip::udp::endpoint udp_listener_endpoint_;$/;"	m	class:pcl::HDLGrabber
uid	include/pcl/io/tar.h	/^      char uid[8];$/;"	m	struct:pcl::io::TARHeader
uint16	include/pcl/io/ply/ply.h	/^      typedef boost::uint16_t uint16;$/;"	t	namespace:pcl::io::ply
uint32	include/pcl/io/ply/ply.h	/^      typedef boost::uint32_t uint32;         $/;"	t	namespace:pcl::io::ply
uint8	include/pcl/io/ply/ply.h	/^      typedef boost::uint8_t uint8;$/;"	t	namespace:pcl::io::ply
umeyama	include/pcl/common/impl/eigen.hpp	/^pcl::umeyama (const Eigen::MatrixBase<Derived>& src, const Eigen::MatrixBase<OtherDerived>& dst, bool with_scaling)$/;"	f	class:pcl
uname	include/pcl/io/tar.h	/^      char uname[32];$/;"	m	struct:pcl::io::TARHeader
unblock_signal	include/pcl/io/grabber.h	/^  Grabber::unblock_signal ()$/;"	f	class:pcl::Grabber
unblock_signals	include/pcl/io/grabber.h	/^  Grabber::unblock_signals ()$/;"	f	class:pcl::Grabber
uniform_distribution	include/pcl/common/random.h	/^    struct uniform_distribution<float> $/;"	s	namespace:pcl::common
uniform_distribution	include/pcl/common/random.h	/^    struct uniform_distribution<int> $/;"	s	namespace:pcl::common
unknown	include/pcl/io/ply/ply.h	/^      enum format { ascii_format, binary_little_endian_format, binary_big_endian_format, unknown };  $/;"	e	enum:pcl::io::ply::format
unknown_cost_value_	include/costmap_2d/static_layer.h	/^  unsigned char lethal_threshold_, unknown_cost_value_;$/;"	m	class:costmap_2d::StaticLayer
unlock	include/costmap_2d/observation_buffer.h	/^  inline void unlock()$/;"	f	class:costmap_2d::ObservationBuffer
unobserved_point	include/pcl/range_image/range_image.h	/^      PointWithRange unobserved_point;         \/**< This point is used to be able to return$/;"	m	class:pcl::RangeImage
unobserved_point_	include/pcl/range_image/bearing_angle_image.h	/^      PointXYZRGBA unobserved_point_;$/;"	m	class:pcl::BearingAngleImage
unpadded_footprint_	include/costmap_2d/costmap_2d_ros.h	/^  std::vector<geometry_msgs::Point> unpadded_footprint_;$/;"	m	class:costmap_2d::Costmap2DROS
update	include/pcl/common/impl/pca.hpp	/^pcl::PCA<PointT>::update (const PointT& input_point, FLAG flag) $/;"	f	class:pcl::PCA
updateBounds	include/costmap_2d/layer.h	/^  virtual void updateBounds(double robot_x, double robot_y, double robot_yaw, double* min_x, double* min_y,$/;"	f	class:costmap_2d::Layer
updateBounds	src/inflation_layer.cpp	/^void InflationLayer::updateBounds(double robot_x, double robot_y, double robot_yaw, double* min_x,$/;"	f	class:costmap_2d::InflationLayer
updateBounds	src/obstacle_layer.cpp	/^void ObstacleLayer::updateBounds(double robot_x, double robot_y, double robot_yaw, double* min_x,$/;"	f	class:costmap_2d::ObstacleLayer
updateBounds	src/static_layer.cpp	/^void StaticLayer::updateBounds(double robot_x, double robot_y, double robot_yaw, double* min_x, double* min_y,$/;"	f	class:costmap_2d::StaticLayer
updateCosts	include/costmap_2d/layer.h	/^  virtual void updateCosts(Costmap2D& master_grid, int min_i, int min_j, int max_i, int max_j) {}$/;"	f	class:costmap_2d::Layer
updateCosts	src/inflation_layer.cpp	/^void InflationLayer::updateCosts(costmap_2d::Costmap2D& master_grid, int min_i, int min_j, int max_i,$/;"	f	class:costmap_2d::InflationLayer
updateCosts	src/obstacle_layer.cpp	/^void ObstacleLayer::updateCosts(costmap_2d::Costmap2D& master_grid, int min_i, int min_j, int max_i, int max_j)$/;"	f	class:costmap_2d::ObstacleLayer
updateCosts	src/static_layer.cpp	/^void StaticLayer::updateCosts(costmap_2d::Costmap2D& master_grid, int min_i, int min_j, int max_i, int max_j)$/;"	f	class:costmap_2d::StaticLayer
updateFootprint	src/obstacle_layer.cpp	/^void ObstacleLayer::updateFootprint(double robot_x, double robot_y, double robot_yaw, double* min_x, double* min_y,$/;"	f	class:costmap_2d::ObstacleLayer
updateMap	src/costmap_2d_ros.cpp	/^void Costmap2DROS::updateMap()$/;"	f	class:costmap_2d::Costmap2DROS
updateMap	src/layered_costmap.cpp	/^void LayeredCostmap::updateMap(double robot_x, double robot_y, double robot_yaw)$/;"	f	class:costmap_2d::LayeredCostmap
updateOrigin	src/costmap_2d.cpp	/^void Costmap2D::updateOrigin(double new_origin_x, double new_origin_y)$/;"	f	class:costmap_2d::Costmap2D
updateRaytraceBounds	src/obstacle_layer.cpp	/^void ObstacleLayer::updateRaytraceBounds(double ox, double oy, double wx, double wy, double range,$/;"	f	class:costmap_2d::ObstacleLayer
updateWithAddition	src/costmap_layer.cpp	/^void CostmapLayer::updateWithAddition(costmap_2d::Costmap2D& master_grid, int min_i, int min_j, int max_i, int max_j)$/;"	f	class:costmap_2d::CostmapLayer
updateWithMax	src/costmap_layer.cpp	/^void CostmapLayer::updateWithMax(costmap_2d::Costmap2D& master_grid, int min_i, int min_j, int max_i, int max_j)$/;"	f	class:costmap_2d::CostmapLayer
updateWithOverwrite	src/costmap_layer.cpp	/^void CostmapLayer::updateWithOverwrite(costmap_2d::Costmap2D& master_grid, int min_i, int min_j, int max_i, int max_j)$/;"	f	class:costmap_2d::CostmapLayer
updateWithTrueOverwrite	src/costmap_layer.cpp	/^void CostmapLayer::updateWithTrueOverwrite(costmap_2d::Costmap2D& master_grid, int min_i, int min_j,$/;"	f	class:costmap_2d::CostmapLayer
uri_	include/pcl/io/openni2/openni2_device_info.h	/^        std::string uri_;$/;"	m	struct:pcl::io::openni2::OpenNI2DeviceInfo
useExtraBounds	src/costmap_layer.cpp	/^void CostmapLayer::useExtraBounds(double* min_x, double* min_y, double* max_x, double* max_y)$/;"	f	class:costmap_2d::CostmapLayer
use_indices_	include/pcl/pcl_base.h	/^      bool use_indices_;$/;"	m	class:pcl::PCLBase
use_maximum_	include/costmap_2d/static_layer.h	/^  bool use_maximum_;$/;"	m	class:costmap_2d::StaticLayer
ustar	include/pcl/io/tar.h	/^      char ustar[6];$/;"	m	struct:pcl::io::TARHeader
ustar_version	include/pcl/io/tar.h	/^      char ustar_version[2];$/;"	m	struct:pcl::io::TARHeader
utils	include/pcl/common/utils.h	/^  namespace utils$/;"	n	namespace:pcl
v	include/pcl/impl/point_types.hpp	/^        float v;$/;"	m	struct:pcl::_PointXYZHSV::__anon19::__anon20
v	include/pcl/impl/point_types.hpp	/^    float v;$/;"	m	struct:pcl::PointUV
value	include/map_msgs/GetMapROI.h	/^  static const char* value()$/;"	f	struct:ros::service_traits::DataType
value	include/map_msgs/GetMapROI.h	/^  static const char* value()$/;"	f	struct:ros::service_traits::MD5Sum
value	include/map_msgs/GetMapROI.h	/^  static const char* value(const ::map_msgs::GetMapROI&) { return value(); }$/;"	f	struct:ros::service_traits::DataType
value	include/map_msgs/GetMapROI.h	/^  static const char* value(const ::map_msgs::GetMapROI&) { return value(); }$/;"	f	struct:ros::service_traits::MD5Sum
value	include/map_msgs/GetMapROI.h	/^  static const char* value(const ::map_msgs::GetMapROIRequest&)$/;"	f	struct:ros::service_traits::DataType
value	include/map_msgs/GetMapROI.h	/^  static const char* value(const ::map_msgs::GetMapROIRequest&)$/;"	f	struct:ros::service_traits::MD5Sum
value	include/map_msgs/GetMapROI.h	/^  static const char* value(const ::map_msgs::GetMapROIResponse&)$/;"	f	struct:ros::service_traits::DataType
value	include/map_msgs/GetMapROI.h	/^  static const char* value(const ::map_msgs::GetMapROIResponse&)$/;"	f	struct:ros::service_traits::MD5Sum
value	include/map_msgs/GetMapROIRequest.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::DataType
value	include/map_msgs/GetMapROIRequest.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::Definition
value	include/map_msgs/GetMapROIRequest.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::MD5Sum
value	include/map_msgs/GetMapROIRequest.h	/^  static const char* value(const ::map_msgs::GetMapROIRequest_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::DataType
value	include/map_msgs/GetMapROIRequest.h	/^  static const char* value(const ::map_msgs::GetMapROIRequest_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::Definition
value	include/map_msgs/GetMapROIRequest.h	/^  static const char* value(const ::map_msgs::GetMapROIRequest_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::MD5Sum
value	include/map_msgs/GetMapROIResponse.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::DataType
value	include/map_msgs/GetMapROIResponse.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::Definition
value	include/map_msgs/GetMapROIResponse.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::MD5Sum
value	include/map_msgs/GetMapROIResponse.h	/^  static const char* value(const ::map_msgs::GetMapROIResponse_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::DataType
value	include/map_msgs/GetMapROIResponse.h	/^  static const char* value(const ::map_msgs::GetMapROIResponse_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::Definition
value	include/map_msgs/GetMapROIResponse.h	/^  static const char* value(const ::map_msgs::GetMapROIResponse_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::MD5Sum
value	include/map_msgs/GetPointMap.h	/^  static const char* value()$/;"	f	struct:ros::service_traits::DataType
value	include/map_msgs/GetPointMap.h	/^  static const char* value()$/;"	f	struct:ros::service_traits::MD5Sum
value	include/map_msgs/GetPointMap.h	/^  static const char* value(const ::map_msgs::GetPointMap&) { return value(); }$/;"	f	struct:ros::service_traits::DataType
value	include/map_msgs/GetPointMap.h	/^  static const char* value(const ::map_msgs::GetPointMap&) { return value(); }$/;"	f	struct:ros::service_traits::MD5Sum
value	include/map_msgs/GetPointMap.h	/^  static const char* value(const ::map_msgs::GetPointMapRequest&)$/;"	f	struct:ros::service_traits::DataType
value	include/map_msgs/GetPointMap.h	/^  static const char* value(const ::map_msgs::GetPointMapRequest&)$/;"	f	struct:ros::service_traits::MD5Sum
value	include/map_msgs/GetPointMap.h	/^  static const char* value(const ::map_msgs::GetPointMapResponse&)$/;"	f	struct:ros::service_traits::DataType
value	include/map_msgs/GetPointMap.h	/^  static const char* value(const ::map_msgs::GetPointMapResponse&)$/;"	f	struct:ros::service_traits::MD5Sum
value	include/map_msgs/GetPointMapROI.h	/^  static const char* value()$/;"	f	struct:ros::service_traits::DataType
value	include/map_msgs/GetPointMapROI.h	/^  static const char* value()$/;"	f	struct:ros::service_traits::MD5Sum
value	include/map_msgs/GetPointMapROI.h	/^  static const char* value(const ::map_msgs::GetPointMapROI&) { return value(); }$/;"	f	struct:ros::service_traits::DataType
value	include/map_msgs/GetPointMapROI.h	/^  static const char* value(const ::map_msgs::GetPointMapROI&) { return value(); }$/;"	f	struct:ros::service_traits::MD5Sum
value	include/map_msgs/GetPointMapROI.h	/^  static const char* value(const ::map_msgs::GetPointMapROIRequest&)$/;"	f	struct:ros::service_traits::DataType
value	include/map_msgs/GetPointMapROI.h	/^  static const char* value(const ::map_msgs::GetPointMapROIRequest&)$/;"	f	struct:ros::service_traits::MD5Sum
value	include/map_msgs/GetPointMapROI.h	/^  static const char* value(const ::map_msgs::GetPointMapROIResponse&)$/;"	f	struct:ros::service_traits::DataType
value	include/map_msgs/GetPointMapROI.h	/^  static const char* value(const ::map_msgs::GetPointMapROIResponse&)$/;"	f	struct:ros::service_traits::MD5Sum
value	include/map_msgs/GetPointMapROIRequest.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::DataType
value	include/map_msgs/GetPointMapROIRequest.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::Definition
value	include/map_msgs/GetPointMapROIRequest.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::MD5Sum
value	include/map_msgs/GetPointMapROIRequest.h	/^  static const char* value(const ::map_msgs::GetPointMapROIRequest_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::DataType
value	include/map_msgs/GetPointMapROIRequest.h	/^  static const char* value(const ::map_msgs::GetPointMapROIRequest_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::Definition
value	include/map_msgs/GetPointMapROIRequest.h	/^  static const char* value(const ::map_msgs::GetPointMapROIRequest_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::MD5Sum
value	include/map_msgs/GetPointMapROIResponse.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::DataType
value	include/map_msgs/GetPointMapROIResponse.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::Definition
value	include/map_msgs/GetPointMapROIResponse.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::MD5Sum
value	include/map_msgs/GetPointMapROIResponse.h	/^  static const char* value(const ::map_msgs::GetPointMapROIResponse_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::DataType
value	include/map_msgs/GetPointMapROIResponse.h	/^  static const char* value(const ::map_msgs::GetPointMapROIResponse_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::Definition
value	include/map_msgs/GetPointMapROIResponse.h	/^  static const char* value(const ::map_msgs::GetPointMapROIResponse_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::MD5Sum
value	include/map_msgs/GetPointMapRequest.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::DataType
value	include/map_msgs/GetPointMapRequest.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::Definition
value	include/map_msgs/GetPointMapRequest.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::MD5Sum
value	include/map_msgs/GetPointMapRequest.h	/^  static const char* value(const ::map_msgs::GetPointMapRequest_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::DataType
value	include/map_msgs/GetPointMapRequest.h	/^  static const char* value(const ::map_msgs::GetPointMapRequest_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::Definition
value	include/map_msgs/GetPointMapRequest.h	/^  static const char* value(const ::map_msgs::GetPointMapRequest_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::MD5Sum
value	include/map_msgs/GetPointMapResponse.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::DataType
value	include/map_msgs/GetPointMapResponse.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::Definition
value	include/map_msgs/GetPointMapResponse.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::MD5Sum
value	include/map_msgs/GetPointMapResponse.h	/^  static const char* value(const ::map_msgs::GetPointMapResponse_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::DataType
value	include/map_msgs/GetPointMapResponse.h	/^  static const char* value(const ::map_msgs::GetPointMapResponse_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::Definition
value	include/map_msgs/GetPointMapResponse.h	/^  static const char* value(const ::map_msgs::GetPointMapResponse_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::MD5Sum
value	include/map_msgs/OccupancyGridUpdate.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::DataType
value	include/map_msgs/OccupancyGridUpdate.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::Definition
value	include/map_msgs/OccupancyGridUpdate.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::MD5Sum
value	include/map_msgs/OccupancyGridUpdate.h	/^  static const char* value(const ::map_msgs::OccupancyGridUpdate_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::DataType
value	include/map_msgs/OccupancyGridUpdate.h	/^  static const char* value(const ::map_msgs::OccupancyGridUpdate_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::Definition
value	include/map_msgs/OccupancyGridUpdate.h	/^  static const char* value(const ::map_msgs::OccupancyGridUpdate_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::MD5Sum
value	include/map_msgs/PointCloud2Update.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::DataType
value	include/map_msgs/PointCloud2Update.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::Definition
value	include/map_msgs/PointCloud2Update.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::MD5Sum
value	include/map_msgs/PointCloud2Update.h	/^  static const char* value(const ::map_msgs::PointCloud2Update_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::DataType
value	include/map_msgs/PointCloud2Update.h	/^  static const char* value(const ::map_msgs::PointCloud2Update_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::Definition
value	include/map_msgs/PointCloud2Update.h	/^  static const char* value(const ::map_msgs::PointCloud2Update_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::MD5Sum
value	include/map_msgs/ProjectedMap.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::DataType
value	include/map_msgs/ProjectedMap.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::Definition
value	include/map_msgs/ProjectedMap.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::MD5Sum
value	include/map_msgs/ProjectedMap.h	/^  static const char* value(const ::map_msgs::ProjectedMap_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::DataType
value	include/map_msgs/ProjectedMap.h	/^  static const char* value(const ::map_msgs::ProjectedMap_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::Definition
value	include/map_msgs/ProjectedMap.h	/^  static const char* value(const ::map_msgs::ProjectedMap_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::MD5Sum
value	include/map_msgs/ProjectedMapInfo.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::DataType
value	include/map_msgs/ProjectedMapInfo.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::Definition
value	include/map_msgs/ProjectedMapInfo.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::MD5Sum
value	include/map_msgs/ProjectedMapInfo.h	/^  static const char* value(const ::map_msgs::ProjectedMapInfo_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::DataType
value	include/map_msgs/ProjectedMapInfo.h	/^  static const char* value(const ::map_msgs::ProjectedMapInfo_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::Definition
value	include/map_msgs/ProjectedMapInfo.h	/^  static const char* value(const ::map_msgs::ProjectedMapInfo_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::MD5Sum
value	include/map_msgs/ProjectedMapsInfo.h	/^  static const char* value()$/;"	f	struct:ros::service_traits::DataType
value	include/map_msgs/ProjectedMapsInfo.h	/^  static const char* value()$/;"	f	struct:ros::service_traits::MD5Sum
value	include/map_msgs/ProjectedMapsInfo.h	/^  static const char* value(const ::map_msgs::ProjectedMapsInfo&) { return value(); }$/;"	f	struct:ros::service_traits::DataType
value	include/map_msgs/ProjectedMapsInfo.h	/^  static const char* value(const ::map_msgs::ProjectedMapsInfo&) { return value(); }$/;"	f	struct:ros::service_traits::MD5Sum
value	include/map_msgs/ProjectedMapsInfo.h	/^  static const char* value(const ::map_msgs::ProjectedMapsInfoRequest&)$/;"	f	struct:ros::service_traits::DataType
value	include/map_msgs/ProjectedMapsInfo.h	/^  static const char* value(const ::map_msgs::ProjectedMapsInfoRequest&)$/;"	f	struct:ros::service_traits::MD5Sum
value	include/map_msgs/ProjectedMapsInfo.h	/^  static const char* value(const ::map_msgs::ProjectedMapsInfoResponse&)$/;"	f	struct:ros::service_traits::DataType
value	include/map_msgs/ProjectedMapsInfo.h	/^  static const char* value(const ::map_msgs::ProjectedMapsInfoResponse&)$/;"	f	struct:ros::service_traits::MD5Sum
value	include/map_msgs/ProjectedMapsInfoRequest.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::DataType
value	include/map_msgs/ProjectedMapsInfoRequest.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::Definition
value	include/map_msgs/ProjectedMapsInfoRequest.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::MD5Sum
value	include/map_msgs/ProjectedMapsInfoRequest.h	/^  static const char* value(const ::map_msgs::ProjectedMapsInfoRequest_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::DataType
value	include/map_msgs/ProjectedMapsInfoRequest.h	/^  static const char* value(const ::map_msgs::ProjectedMapsInfoRequest_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::Definition
value	include/map_msgs/ProjectedMapsInfoRequest.h	/^  static const char* value(const ::map_msgs::ProjectedMapsInfoRequest_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::MD5Sum
value	include/map_msgs/ProjectedMapsInfoResponse.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::DataType
value	include/map_msgs/ProjectedMapsInfoResponse.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::Definition
value	include/map_msgs/ProjectedMapsInfoResponse.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::MD5Sum
value	include/map_msgs/ProjectedMapsInfoResponse.h	/^  static const char* value(const ::map_msgs::ProjectedMapsInfoResponse_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::DataType
value	include/map_msgs/ProjectedMapsInfoResponse.h	/^  static const char* value(const ::map_msgs::ProjectedMapsInfoResponse_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::Definition
value	include/map_msgs/ProjectedMapsInfoResponse.h	/^  static const char* value(const ::map_msgs::ProjectedMapsInfoResponse_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::MD5Sum
value	include/map_msgs/SaveMap.h	/^  static const char* value()$/;"	f	struct:ros::service_traits::DataType
value	include/map_msgs/SaveMap.h	/^  static const char* value()$/;"	f	struct:ros::service_traits::MD5Sum
value	include/map_msgs/SaveMap.h	/^  static const char* value(const ::map_msgs::SaveMap&) { return value(); }$/;"	f	struct:ros::service_traits::DataType
value	include/map_msgs/SaveMap.h	/^  static const char* value(const ::map_msgs::SaveMap&) { return value(); }$/;"	f	struct:ros::service_traits::MD5Sum
value	include/map_msgs/SaveMap.h	/^  static const char* value(const ::map_msgs::SaveMapRequest&)$/;"	f	struct:ros::service_traits::DataType
value	include/map_msgs/SaveMap.h	/^  static const char* value(const ::map_msgs::SaveMapRequest&)$/;"	f	struct:ros::service_traits::MD5Sum
value	include/map_msgs/SaveMap.h	/^  static const char* value(const ::map_msgs::SaveMapResponse&)$/;"	f	struct:ros::service_traits::DataType
value	include/map_msgs/SaveMap.h	/^  static const char* value(const ::map_msgs::SaveMapResponse&)$/;"	f	struct:ros::service_traits::MD5Sum
value	include/map_msgs/SaveMapRequest.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::DataType
value	include/map_msgs/SaveMapRequest.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::Definition
value	include/map_msgs/SaveMapRequest.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::MD5Sum
value	include/map_msgs/SaveMapRequest.h	/^  static const char* value(const ::map_msgs::SaveMapRequest_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::DataType
value	include/map_msgs/SaveMapRequest.h	/^  static const char* value(const ::map_msgs::SaveMapRequest_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::Definition
value	include/map_msgs/SaveMapRequest.h	/^  static const char* value(const ::map_msgs::SaveMapRequest_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::MD5Sum
value	include/map_msgs/SaveMapResponse.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::DataType
value	include/map_msgs/SaveMapResponse.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::Definition
value	include/map_msgs/SaveMapResponse.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::MD5Sum
value	include/map_msgs/SaveMapResponse.h	/^  static const char* value(const ::map_msgs::SaveMapResponse_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::DataType
value	include/map_msgs/SaveMapResponse.h	/^  static const char* value(const ::map_msgs::SaveMapResponse_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::Definition
value	include/map_msgs/SaveMapResponse.h	/^  static const char* value(const ::map_msgs::SaveMapResponse_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::MD5Sum
value	include/map_msgs/SetMapProjections.h	/^  static const char* value()$/;"	f	struct:ros::service_traits::DataType
value	include/map_msgs/SetMapProjections.h	/^  static const char* value()$/;"	f	struct:ros::service_traits::MD5Sum
value	include/map_msgs/SetMapProjections.h	/^  static const char* value(const ::map_msgs::SetMapProjections&) { return value(); }$/;"	f	struct:ros::service_traits::DataType
value	include/map_msgs/SetMapProjections.h	/^  static const char* value(const ::map_msgs::SetMapProjections&) { return value(); }$/;"	f	struct:ros::service_traits::MD5Sum
value	include/map_msgs/SetMapProjections.h	/^  static const char* value(const ::map_msgs::SetMapProjectionsRequest&)$/;"	f	struct:ros::service_traits::DataType
value	include/map_msgs/SetMapProjections.h	/^  static const char* value(const ::map_msgs::SetMapProjectionsRequest&)$/;"	f	struct:ros::service_traits::MD5Sum
value	include/map_msgs/SetMapProjections.h	/^  static const char* value(const ::map_msgs::SetMapProjectionsResponse&)$/;"	f	struct:ros::service_traits::DataType
value	include/map_msgs/SetMapProjections.h	/^  static const char* value(const ::map_msgs::SetMapProjectionsResponse&)$/;"	f	struct:ros::service_traits::MD5Sum
value	include/map_msgs/SetMapProjectionsRequest.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::DataType
value	include/map_msgs/SetMapProjectionsRequest.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::Definition
value	include/map_msgs/SetMapProjectionsRequest.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::MD5Sum
value	include/map_msgs/SetMapProjectionsRequest.h	/^  static const char* value(const ::map_msgs::SetMapProjectionsRequest_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::DataType
value	include/map_msgs/SetMapProjectionsRequest.h	/^  static const char* value(const ::map_msgs::SetMapProjectionsRequest_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::Definition
value	include/map_msgs/SetMapProjectionsRequest.h	/^  static const char* value(const ::map_msgs::SetMapProjectionsRequest_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::MD5Sum
value	include/map_msgs/SetMapProjectionsResponse.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::DataType
value	include/map_msgs/SetMapProjectionsResponse.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::Definition
value	include/map_msgs/SetMapProjectionsResponse.h	/^  static const char* value()$/;"	f	struct:ros::message_traits::MD5Sum
value	include/map_msgs/SetMapProjectionsResponse.h	/^  static const char* value(const ::map_msgs::SetMapProjectionsResponse_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::DataType
value	include/map_msgs/SetMapProjectionsResponse.h	/^  static const char* value(const ::map_msgs::SetMapProjectionsResponse_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::Definition
value	include/map_msgs/SetMapProjectionsResponse.h	/^  static const char* value(const ::map_msgs::SetMapProjectionsResponse_<ContainerAllocator>&) { return value(); }$/;"	f	struct:ros::message_traits::MD5Sum
value	include/pcl/point_traits.h	/^      static const uint32_t value = sizeof (T) \/ sizeof (type);$/;"	m	struct:pcl::traits::decomposeArray
value	include/pcl/point_traits.h	/^    template<> struct asEnum<double>   { static const uint8_t value = pcl::PCLPointField::FLOAT64; };$/;"	m	struct:pcl::traits::asEnum
value	include/pcl/point_traits.h	/^    template<> struct asEnum<float>    { static const uint8_t value = pcl::PCLPointField::FLOAT32; };$/;"	m	struct:pcl::traits::asEnum
value	include/pcl/point_traits.h	/^    template<> struct asEnum<int16_t>  { static const uint8_t value = pcl::PCLPointField::INT16;   };$/;"	m	struct:pcl::traits::asEnum
value	include/pcl/point_traits.h	/^    template<> struct asEnum<int32_t>  { static const uint8_t value = pcl::PCLPointField::INT32;   };$/;"	m	struct:pcl::traits::asEnum
value	include/pcl/point_traits.h	/^    template<> struct asEnum<int8_t>   { static const uint8_t value = pcl::PCLPointField::INT8;    };$/;"	m	struct:pcl::traits::asEnum
value	include/pcl/point_traits.h	/^    template<> struct asEnum<uint16_t> { static const uint8_t value = pcl::PCLPointField::UINT16;  };$/;"	m	struct:pcl::traits::asEnum
value	include/pcl/point_traits.h	/^    template<> struct asEnum<uint32_t> { static const uint8_t value = pcl::PCLPointField::UINT32;  };$/;"	m	struct:pcl::traits::asEnum
value	include/pcl/point_traits.h	/^    template<> struct asEnum<uint8_t>  { static const uint8_t value = pcl::PCLPointField::UINT8;   };$/;"	m	struct:pcl::traits::asEnum
value_	include/costmap_2d/costmap_2d.h	/^    unsigned char value_;$/;"	m	class:costmap_2d::Costmap2D::MarkCell
value_	include/pcl/point_traits.h	/^      OutT &value_;$/;"	m	struct:pcl::CopyIfFieldExists
value_	include/pcl/point_traits.h	/^      const InT &value_;$/;"	m	struct:pcl::SetIfFieldExists
value_type	include/pcl/io/buffers.h	/^        typedef T value_type;$/;"	t	class:pcl::io::Buffer
values	include/pcl/ModelCoefficients.h	/^    std::vector<float> values;$/;"	m	struct:pcl::ModelCoefficients
values	include/pcl/impl/point_types.hpp	/^    float values[12];$/;"	m	struct:pcl::NormalBasedSignature12
vectorize	include/pcl/point_representation.h	/^      vectorize (const PointT &p, OutputType &out) const$/;"	f	class:pcl::PointRepresentation
vendor_	include/pcl/io/openni2/openni2_device_info.h	/^        std::string vendor_;$/;"	m	struct:pcl::io::openni2::OpenNI2DeviceInfo
vendor_id_	include/pcl/io/openni2/openni2_device_info.h	/^        uint16_t vendor_id_;$/;"	m	struct:pcl::io::openni2::OpenNI2DeviceInfo
vertex_count_	include/pcl/io/ply_io.h	/^      size_t vertex_count_;$/;"	m	class:pcl::PLYReader
vertex_offset_before_	include/pcl/io/ply_io.h	/^      int vertex_offset_before_;$/;"	m	class:pcl::PLYReader
verticalCorrection	include/pcl/io/hdl_grabber.h	/^          double verticalCorrection;$/;"	m	struct:pcl::HDLGrabber::HDLLaserCorrection
verticalOffsetCorrection	include/pcl/io/hdl_grabber.h	/^          double verticalOffsetCorrection;$/;"	m	struct:pcl::HDLGrabber::HDLLaserCorrection
vertices	include/pcl/Vertices.h	/^    std::vector<uint32_t> vertices;$/;"	m	struct:pcl::Vertices
vp_x	include/pcl/impl/point_types.hpp	/^        float vp_x;$/;"	m	struct:pcl::_PointWithViewpoint::__anon35::__anon36
vp_y	include/pcl/impl/point_types.hpp	/^        float vp_y;$/;"	m	struct:pcl::_PointWithViewpoint::__anon35::__anon36
vp_z	include/pcl/impl/point_types.hpp	/^        float vp_z;$/;"	m	struct:pcl::_PointWithViewpoint::__anon35::__anon36
vtkPolyDataToPointCloud	include/pcl/io/impl/vtk_lib_io.hpp	/^pcl::io::vtkPolyDataToPointCloud (vtkPolyData* const polydata, pcl::PointCloud<PointT>& cloud)$/;"	f	class:pcl::io
vtkStructuredGridToPointCloud	include/pcl/io/impl/vtk_lib_io.hpp	/^pcl::io::vtkStructuredGridToPointCloud (vtkStructuredGrid* const structured_grid, pcl::PointCloud<PointT>& cloud)$/;"	f	class:pcl::io
w	include/tf/LinearMath/Vector3.h	/^		TFSIMD_FORCE_INLINE const tfScalar& w() const { return m_floats[3]; }$/;"	f	class:tf::Vector3
warningCallback	include/pcl/io/ply_io.h	/^      warningCallback (const std::string& filename, std::size_t line_number, const std::string& message)$/;"	f	class:pcl::PLYReader
warning_callback	include/pcl/io/ply/ply_parser.h	/^inline void pcl::io::ply::ply_parser::warning_callback (const warning_callback_type& warning_callback)$/;"	f	class:pcl::io::ply::ply_parser
warning_callback_	include/pcl/io/ply/ply_parser.h	/^          warning_callback_type warning_callback_;$/;"	m	class:pcl::io::ply::ply_parser
warning_callback_type	include/pcl/io/ply/ply_parser.h	/^          typedef boost::function<void (std::size_t, const std::string&)> warning_callback_type;$/;"	t	class:pcl::io::ply::ply_parser
weight	include/pcl/correspondence.h	/^      float weight;$/;"	m	union:pcl::Correspondence::__anon1
weight_	include/costmap_2d/inflation_layer.h	/^  double inflation_radius_, inscribed_radius_, weight_;$/;"	m	class:costmap_2d::InflationLayer
width	include/map_msgs/OccupancyGridUpdate.h	/^  _width_type width;$/;"	m	struct:map_msgs::OccupancyGridUpdate_
width	include/map_msgs/ProjectedMapInfo.h	/^  _width_type width;$/;"	m	struct:map_msgs::ProjectedMapInfo_
width	include/pcl/PCLImage.h	/^    pcl::uint32_t width;$/;"	m	struct:pcl::PCLImage
width	include/pcl/PCLPointCloud2.h	/^    pcl::uint32_t width;$/;"	m	struct:pcl::PCLPointCloud2
width	include/pcl/point_cloud.h	/^      uint32_t width;$/;"	m	class:pcl::PointCloud
width_	include/costmap_2d/static_layer.h	/^  unsigned int x_, y_, width_, height_;$/;"	m	class:costmap_2d::StaticLayer
width_	include/pcl/io/lzf_image_io.h	/^        uint32_t width_;$/;"	m	class:pcl::io::LZFImageReader
window_size_	include/pcl/common/time.h	/^      const size_t window_size_;$/;"	m	class:pcl::EventFrequency
window_size_	include/pcl/io/buffers.h	/^        const unsigned char window_size_;$/;"	m	class:pcl::io::AverageBuffer
window_size_	include/pcl/io/buffers.h	/^        const unsigned char window_size_;$/;"	m	class:pcl::io::MedianBuffer
worldToMap	src/costmap_2d.cpp	/^bool Costmap2D::worldToMap(double wx, double wy, unsigned int& mx, unsigned int& my) const$/;"	f	class:costmap_2d::Costmap2D
worldToMapEnforceBounds	src/costmap_2d.cpp	/^void Costmap2D::worldToMapEnforceBounds(double wx, double wy, int& mx, int& my) const$/;"	f	class:costmap_2d::Costmap2D
worldToMapNoBounds	src/costmap_2d.cpp	/^void Costmap2D::worldToMapNoBounds(double wx, double wy, int& mx, int& my) const$/;"	f	class:costmap_2d::Costmap2D
wrapper_	include/pcl/io/image.h	/^        FrameWrapper::Ptr wrapper_;$/;"	m	class:pcl::io::Image
wrapper_	include/pcl/io/image_depth.h	/^        pcl::io::FrameWrapper::Ptr wrapper_;$/;"	m	class:pcl::io::DepthImage
wrapper_	include/pcl/io/image_ir.h	/^        FrameWrapper::Ptr wrapper_;$/;"	m	class:pcl::io::IRImage
write	include/pcl/io/file_io.h	/^      write (const std::string &file_name, $/;"	f	class:pcl::FileWriter
write	include/pcl/io/file_io.h	/^      write (const std::string &file_name, const pcl::PCLPointCloud2::ConstPtr &cloud,$/;"	f	class:pcl::FileWriter
write	include/pcl/io/ifs_io.h	/^      write (const std::string &file_name, const pcl::PointCloud<PointT> &cloud,$/;"	f	class:pcl::IFSWriter
write	include/pcl/io/lzf_image_io.h	/^        write (const char* data,$/;"	f	class:pcl::io::LZFImageWriter
write	include/pcl/io/pcd_io.h	/^      write (const std::string &file_name, $/;"	f	class:pcl::PCDWriter
write	include/pcl/io/pcd_io.h	/^      write (const std::string &file_name, const pcl::PCLPointCloud2 &cloud,$/;"	f	class:pcl::PCDWriter
write	include/pcl/io/pcd_io.h	/^      write (const std::string &file_name, const pcl::PCLPointCloud2::ConstPtr &cloud,$/;"	f	class:pcl::PCDWriter
write	include/pcl/io/ply_io.h	/^      write (const std::string &file_name, $/;"	f	class:pcl::PLYWriter
write	include/pcl/io/ply_io.h	/^      write (const std::string &file_name, const pcl::PCLPointCloud2 &cloud,$/;"	f	class:pcl::PLYWriter
write	include/pcl/io/ply_io.h	/^      write (const std::string &file_name, const pcl::PCLPointCloud2::ConstPtr &cloud,$/;"	f	class:pcl::PLYWriter
writeASCII	include/pcl/io/impl/pcd_io.hpp	/^pcl::PCDWriter::writeASCII (const std::string &file_name, $/;"	f	class:pcl::PCDWriter
writeASCII	include/pcl/io/impl/pcd_io.hpp	/^pcl::PCDWriter::writeASCII (const std::string &file_name, const pcl::PointCloud<PointT> &cloud, $/;"	f	class:pcl::PCDWriter
writeBinary	include/pcl/common/impl/bivariate_polynomial.hpp	/^pcl::BivariatePolynomialT<real>::writeBinary (const char* filename) const$/;"	f	class:pcl::BivariatePolynomialT
writeBinary	include/pcl/common/impl/bivariate_polynomial.hpp	/^pcl::BivariatePolynomialT<real>::writeBinary (std::ostream& os) const$/;"	f	class:pcl::BivariatePolynomialT
writeBinary	include/pcl/io/impl/pcd_io.hpp	/^pcl::PCDWriter::writeBinary (const std::string &file_name, $/;"	f	class:pcl::PCDWriter
writeBinaryCompressed	include/pcl/io/impl/pcd_io.hpp	/^pcl::PCDWriter::writeBinaryCompressed (const std::string &file_name, $/;"	f	class:pcl::PCDWriter
x	include/costmap_2d/costmap_2d.h	/^  unsigned int x;$/;"	m	struct:costmap_2d::MapLocation
x	include/map_msgs/GetMapROIRequest.h	/^  _x_type x;$/;"	m	struct:map_msgs::GetMapROIRequest_
x	include/map_msgs/GetPointMapROIRequest.h	/^  _x_type x;$/;"	m	struct:map_msgs::GetPointMapROIRequest_
x	include/map_msgs/OccupancyGridUpdate.h	/^  _x_type x;$/;"	m	struct:map_msgs::OccupancyGridUpdate_
x	include/map_msgs/ProjectedMapInfo.h	/^  _x_type x;$/;"	m	struct:map_msgs::ProjectedMapInfo_
x	include/pcl/impl/point_types.hpp	/^    float x, y, z, roll, pitch, yaw;$/;"	m	struct:pcl::Narf36
x	include/pcl/impl/point_types.hpp	/^    float x;$/;"	m	struct:pcl::PointXY
x	include/pcl/impl/point_types.hpp	/^    int x, y;$/;"	m	struct:pcl::BorderDescription
x	include/tf/LinearMath/Vector3.h	/^		TFSIMD_FORCE_INLINE const tfScalar& x() const { return m_floats[0]; }$/;"	f	class:tf::Vector3
x_	include/costmap_2d/inflation_layer.h	/^  unsigned int x_, y_;$/;"	m	class:costmap_2d::CellData
x_	include/costmap_2d/static_layer.h	/^  unsigned int x_, y_, width_, height_;$/;"	m	class:costmap_2d::StaticLayer
x_axis	include/pcl/impl/point_types.hpp	/^        float x_axis[3];$/;"	m	struct:pcl::_ReferenceFrame::__anon39::__anon40
x_field_name_	include/pcl/pcl_base.h	/^      std::string x_field_name_, y_field_name_, z_field_name_;$/;"	m	class:pcl::PCLBase
x_generator_	include/pcl/common/generate.h	/^        GeneratorT x_generator_, y_generator_, z_generator_;$/;"	m	class:pcl::common::CloudGenerator
x_generator_	include/pcl/common/generate.h	/^        GeneratorT x_generator_;$/;"	m	class:pcl::common::CloudGenerator
x_idx_	include/pcl/pcl_base.h	/^      int x_idx_, y_idx_, z_idx_;$/;"	m	class:pcl::PCLBase
x_resolution_	include/pcl/io/openni2/openni2_video_mode.h	/^        int x_resolution_;$/;"	m	struct:pcl::io::openni2::OpenNI2VideoMode
xyz	include/pcl/common/impl/accumulators.hpp	/^      Eigen::Vector3f xyz;$/;"	m	struct:pcl::detail::AccumulatorXYZ
xyz_to_rgb_matrix_	include/pcl/io/obj_io.h	/^      Eigen::Matrix3f xyz_to_rgb_matrix_;$/;"	m	class:pcl::MTLReader
y	include/costmap_2d/costmap_2d.h	/^  unsigned int y;$/;"	m	struct:costmap_2d::MapLocation
y	include/map_msgs/GetMapROIRequest.h	/^  _y_type y;$/;"	m	struct:map_msgs::GetMapROIRequest_
y	include/map_msgs/GetPointMapROIRequest.h	/^  _y_type y;$/;"	m	struct:map_msgs::GetPointMapROIRequest_
y	include/map_msgs/OccupancyGridUpdate.h	/^  _y_type y;$/;"	m	struct:map_msgs::OccupancyGridUpdate_
y	include/map_msgs/ProjectedMapInfo.h	/^  _y_type y;$/;"	m	struct:map_msgs::ProjectedMapInfo_
y	include/pcl/impl/point_types.hpp	/^    float x, y, z, roll, pitch, yaw;$/;"	m	struct:pcl::Narf36
y	include/pcl/impl/point_types.hpp	/^    float y;$/;"	m	struct:pcl::PointXY
y	include/pcl/impl/point_types.hpp	/^    int x, y;$/;"	m	struct:pcl::BorderDescription
y	include/tf/LinearMath/Vector3.h	/^		TFSIMD_FORCE_INLINE const tfScalar& y() const { return m_floats[1]; }$/;"	f	class:tf::Vector3
y_	include/costmap_2d/inflation_layer.h	/^  unsigned int x_, y_;$/;"	m	class:costmap_2d::CellData
y_	include/costmap_2d/static_layer.h	/^  unsigned int x_, y_, width_, height_;$/;"	m	class:costmap_2d::StaticLayer
y_axis	include/pcl/impl/point_types.hpp	/^        float y_axis[3];$/;"	m	struct:pcl::_ReferenceFrame::__anon39::__anon40
y_field_name_	include/pcl/pcl_base.h	/^      std::string x_field_name_, y_field_name_, z_field_name_;$/;"	m	class:pcl::PCLBase
y_generator_	include/pcl/common/generate.h	/^        GeneratorT x_generator_, y_generator_, z_generator_;$/;"	m	class:pcl::common::CloudGenerator
y_generator_	include/pcl/common/generate.h	/^        GeneratorT y_generator_;$/;"	m	class:pcl::common::CloudGenerator
y_idx_	include/pcl/pcl_base.h	/^      int x_idx_, y_idx_, z_idx_;$/;"	m	class:pcl::PCLBase
y_resolution_	include/pcl/io/openni2/openni2_video_mode.h	/^        int y_resolution_;$/;"	m	struct:pcl::io::openni2::OpenNI2VideoMode
yaw	include/pcl/impl/point_types.hpp	/^    float x, y, z, roll, pitch, yaw;$/;"	m	struct:pcl::Narf36
z	include/map_msgs/GetPointMapROIRequest.h	/^  _z_type z;$/;"	m	struct:map_msgs::GetPointMapROIRequest_
z	include/pcl/impl/point_types.hpp	/^    float x, y, z, roll, pitch, yaw;$/;"	m	struct:pcl::Narf36
z	include/tf/LinearMath/Vector3.h	/^		TFSIMD_FORCE_INLINE const tfScalar& z() const { return m_floats[2]; }$/;"	f	class:tf::Vector3
z_axis	include/pcl/impl/point_types.hpp	/^        float z_axis[3];$/;"	m	struct:pcl::_ReferenceFrame::__anon39::__anon40
z_field_name_	include/pcl/pcl_base.h	/^      std::string x_field_name_, y_field_name_, z_field_name_;$/;"	m	class:pcl::PCLBase
z_generator_	include/pcl/common/generate.h	/^        GeneratorT x_generator_, y_generator_, z_generator_;$/;"	m	class:pcl::common::CloudGenerator
z_idx_	include/pcl/pcl_base.h	/^      int x_idx_, y_idx_, z_idx_;$/;"	m	class:pcl::PCLBase
z_multiplication_factor_	include/pcl/io/lzf_image_io.h	/^        double z_multiplication_factor_;$/;"	m	class:pcl::io::LZFDepth16ImageReader
z_multiplication_factor_	include/pcl/io/lzf_image_io.h	/^        double z_multiplication_factor_;$/;"	m	class:pcl::io::LZFDepth16ImageWriter
zero_plane_distance_	include/pcl/io/openni_camera/openni_device.h	/^        XnUInt16 zero_plane_distance_;$/;"	m	struct:openni_wrapper::OpenNIDevice::ShiftConversion
zero_plane_pixel_size_	include/pcl/io/openni_camera/openni_device.h	/^        XnFloat zero_plane_pixel_size_;$/;"	m	struct:openni_wrapper::OpenNIDevice::ShiftConversion
zero_value	include/pcl/common/polynomial_calculations.h	/^        real zero_value;       \/\/!< Every value below this is considered to be zero$/;"	m	struct:pcl::PolynomialCalculationsT::Parameters
~AverageBuffer	include/pcl/io/impl/buffers.hpp	/^pcl::io::AverageBuffer<T>::~AverageBuffer ()$/;"	f	class:pcl::io::AverageBuffer
~BivariatePolynomialT	include/pcl/common/impl/bivariate_polynomial.hpp	/^pcl::BivariatePolynomialT<real>::~BivariatePolynomialT ()$/;"	f	class:pcl::BivariatePolynomialT
~Buffer	include/pcl/io/impl/buffers.hpp	/^pcl::io::Buffer<T>::~Buffer ()$/;"	f	class:pcl::io::Buffer
~CloudIterator	include/pcl/impl/cloud_iterator.hpp	/^pcl::CloudIterator<PointT>::~CloudIterator ()$/;"	f	class:pcl::CloudIterator
~ConstCloudIterator	include/pcl/impl/cloud_iterator.hpp	/^pcl::ConstCloudIterator<PointT>::~ConstCloudIterator ()$/;"	f	class:pcl::ConstCloudIterator
~ConstIteratorIdx	include/pcl/impl/cloud_iterator.hpp	/^      virtual ~ConstIteratorIdx () {}$/;"	f	class:pcl::ConstCloudIterator::ConstIteratorIdx
~Correspondence	include/pcl/correspondence.h	/^    virtual ~Correspondence () {}$/;"	f	struct:pcl::Correspondence
~Costmap2D	src/costmap_2d.cpp	/^Costmap2D::~Costmap2D()$/;"	f	class:costmap_2d::Costmap2D
~Costmap2DROS	src/costmap_2d_ros.cpp	/^Costmap2DROS::~Costmap2DROS()$/;"	f	class:costmap_2d::Costmap2DROS
~DefaultConstIterator	include/pcl/impl/cloud_iterator.hpp	/^      ~DefaultConstIterator ()$/;"	f	class:pcl::ConstCloudIterator::DefaultConstIterator
~DefaultIterator	include/pcl/impl/cloud_iterator.hpp	/^      ~DefaultIterator ()$/;"	f	class:pcl::DefaultIterator
~DefaultPointRepresentation	include/pcl/point_representation.h	/^      virtual ~DefaultPointRepresentation () {}$/;"	f	class:pcl::DefaultPointRepresentation
~DepthImage	include/pcl/io/openni_camera/openni_depth_image.h	/^  DepthImage::~DepthImage () throw () { }$/;"	f	class:openni_wrapper::DepthImage
~FileGrabber	include/pcl/io/file_grabber.h	/^    virtual ~FileGrabber () {}$/;"	f	class:pcl::FileGrabber
~FileReader	include/pcl/io/file_io.h	/^      virtual ~FileReader() {}$/;"	f	class:pcl::FileReader
~FileWriter	include/pcl/io/file_io.h	/^      virtual ~FileWriter () {}$/;"	f	class:pcl::FileWriter
~Grabber	include/pcl/io/grabber.h	/^  Grabber::~Grabber () throw ()$/;"	f	class:pcl::Grabber
~IFSReader	include/pcl/io/ifs_io.h	/^      ~IFSReader () {}$/;"	f	class:pcl::IFSReader
~IFSWriter	include/pcl/io/ifs_io.h	/^      ~IFSWriter() {}$/;"	f	class:pcl::IFSWriter
~IRImage	include/pcl/io/image_ir.h	/^        ~IRImage () throw ()$/;"	f	class:pcl::io::IRImage
~IRImage	include/pcl/io/openni_camera/openni_ir_image.h	/^IRImage::~IRImage () throw ()$/;"	f	class:openni_wrapper::IRImage
~Image	include/pcl/io/image.h	/^        inline virtual ~Image ()$/;"	f	class:pcl::io::Image
~Image	include/pcl/io/openni_camera/openni_image.h	/^  Image::~Image () throw () { }$/;"	f	class:openni_wrapper::Image
~ImageGrabber	include/pcl/io/image_grabber.h	/^    virtual ~ImageGrabber () throw () {}$/;"	f	class:pcl::ImageGrabber
~InflationLayer	include/costmap_2d/inflation_layer.h	/^  virtual ~InflationLayer()$/;"	f	class:costmap_2d::InflationLayer
~Iterator	include/pcl/cloud_iterator.h	/^          virtual ~Iterator ()  {}$/;"	f	class:pcl::CloudIterator::Iterator
~Iterator	include/pcl/cloud_iterator.h	/^          virtual ~Iterator ()  {}$/;"	f	class:pcl::ConstCloudIterator::Iterator
~IteratorIdx	include/pcl/impl/cloud_iterator.hpp	/^      virtual ~IteratorIdx () {}$/;"	f	class:pcl::IteratorIdx
~LZFBayer8ImageReader	include/pcl/io/lzf_image_io.h	/^        ~LZFBayer8ImageReader () {}$/;"	f	class:pcl::io::LZFBayer8ImageReader
~LZFBayer8ImageWriter	include/pcl/io/lzf_image_io.h	/^        virtual ~LZFBayer8ImageWriter () {}$/;"	f	class:pcl::io::LZFBayer8ImageWriter
~LZFDepth16ImageReader	include/pcl/io/lzf_image_io.h	/^        virtual ~LZFDepth16ImageReader () {}$/;"	f	class:pcl::io::LZFDepth16ImageReader
~LZFDepth16ImageWriter	include/pcl/io/lzf_image_io.h	/^        virtual ~LZFDepth16ImageWriter () {}$/;"	f	class:pcl::io::LZFDepth16ImageWriter
~LZFImageReader	include/pcl/io/lzf_image_io.h	/^        virtual ~LZFImageReader () {}$/;"	f	class:pcl::io::LZFImageReader
~LZFImageWriter	include/pcl/io/lzf_image_io.h	/^        virtual ~LZFImageWriter () {}$/;"	f	class:pcl::io::LZFImageWriter
~LZFRGB24ImageReader	include/pcl/io/lzf_image_io.h	/^        virtual ~LZFRGB24ImageReader () {}$/;"	f	class:pcl::io::LZFRGB24ImageReader
~LZFRGB24ImageWriter	include/pcl/io/lzf_image_io.h	/^        virtual ~LZFRGB24ImageWriter () {}$/;"	f	class:pcl::io::LZFRGB24ImageWriter
~LZFYUV422ImageReader	include/pcl/io/lzf_image_io.h	/^        ~LZFYUV422ImageReader () {}$/;"	f	class:pcl::io::LZFYUV422ImageReader
~LZFYUV422ImageWriter	include/pcl/io/lzf_image_io.h	/^        virtual ~LZFYUV422ImageWriter () {}$/;"	f	class:pcl::io::LZFYUV422ImageWriter
~Layer	include/costmap_2d/layer.h	/^  virtual ~Layer() {}$/;"	f	class:costmap_2d::Layer
~LayeredCostmap	src/layered_costmap.cpp	/^LayeredCostmap::~LayeredCostmap()$/;"	f	class:costmap_2d::LayeredCostmap
~MTLReader	include/pcl/io/obj_io.h	/^      virtual ~MTLReader() {}$/;"	f	class:pcl::MTLReader
~MedianBuffer	include/pcl/io/impl/buffers.hpp	/^pcl::io::MedianBuffer<T>::~MedianBuffer ()$/;"	f	class:pcl::io::MedianBuffer
~OBJReader	include/pcl/io/obj_io.h	/^      virtual ~OBJReader() {}$/;"	f	class:pcl::OBJReader
~Observation	include/costmap_2d/observation.h	/^  virtual ~Observation()$/;"	f	class:costmap_2d::Observation
~ObservationBuffer	src/observation_buffer.cpp	/^ObservationBuffer::~ObservationBuffer()$/;"	f	class:costmap_2d::ObservationBuffer
~ObstacleLayer	src/obstacle_layer.cpp	/^ObstacleLayer::~ObstacleLayer()$/;"	f	class:costmap_2d::ObstacleLayer
~OpenNI2FrameListener	include/pcl/io/openni2/openni2_frame_listener.h	/^          virtual ~OpenNI2FrameListener ()$/;"	f	class:pcl::io::openni2::OpenNI2FrameListener
~PCDGrabber	include/pcl/io/pcd_grabber.h	/^      virtual ~PCDGrabber () throw ()$/;"	f	class:pcl::PCDGrabber
~PCDReader	include/pcl/io/pcd_io.h	/^      ~PCDReader () {}$/;"	f	class:pcl::PCDReader
~PCDWriter	include/pcl/io/pcd_io.h	/^      ~PCDWriter() {}$/;"	f	class:pcl::PCDWriter
~PCLBase	include/pcl/pcl_base.h	/^      virtual ~PCLBase ()$/;"	f	class:pcl::PCLBase
~PCLBase	include/pcl/pcl_base.h	/^      virtual ~PCLBase()$/;"	f	class:pcl::PCLBase
~PLYReader	include/pcl/io/ply_io.h	/^      ~PLYReader () { delete range_grid_; }$/;"	f	class:pcl::PLYReader
~PLYWriter	include/pcl/io/ply_io.h	/^      ~PLYWriter () {};$/;"	f	class:pcl::PLYWriter
~PointCloud	include/pcl/point_cloud.h	/^      virtual ~PointCloud () {}$/;"	f	class:pcl::PointCloud
~PointCloudImageExtractor	include/pcl/io/point_cloud_image_extractors.h	/^        virtual ~PointCloudImageExtractor () {}$/;"	f	class:pcl::io::PointCloudImageExtractor
~PointCloudImageExtractorFromCurvatureField	include/pcl/io/point_cloud_image_extractors.h	/^        virtual ~PointCloudImageExtractorFromCurvatureField () {}$/;"	f	class:pcl::io::PointCloudImageExtractorFromCurvatureField
~PointCloudImageExtractorFromIntensityField	include/pcl/io/point_cloud_image_extractors.h	/^        virtual ~PointCloudImageExtractorFromIntensityField () {}$/;"	f	class:pcl::io::PointCloudImageExtractorFromIntensityField
~PointCloudImageExtractorFromLabelField	include/pcl/io/point_cloud_image_extractors.h	/^        virtual ~PointCloudImageExtractorFromLabelField () {}$/;"	f	class:pcl::io::PointCloudImageExtractorFromLabelField
~PointCloudImageExtractorFromNormalField	include/pcl/io/point_cloud_image_extractors.h	/^        virtual ~PointCloudImageExtractorFromNormalField () {}$/;"	f	class:pcl::io::PointCloudImageExtractorFromNormalField
~PointCloudImageExtractorFromRGBField	include/pcl/io/point_cloud_image_extractors.h	/^        virtual ~PointCloudImageExtractorFromRGBField () {}$/;"	f	class:pcl::io::PointCloudImageExtractorFromRGBField
~PointCloudImageExtractorFromZField	include/pcl/io/point_cloud_image_extractors.h	/^        virtual ~PointCloudImageExtractorFromZField () {}$/;"	f	class:pcl::io::PointCloudImageExtractorFromZField
~PointCloudImageExtractorWithScaling	include/pcl/io/point_cloud_image_extractors.h	/^        virtual ~PointCloudImageExtractorWithScaling () {}$/;"	f	class:pcl::io::PointCloudImageExtractorWithScaling
~PointCorrespondence3D	include/pcl/correspondence.h	/^    virtual ~PointCorrespondence3D () {}$/;"	f	struct:pcl::PointCorrespondence3D
~PointCorrespondence6D	include/pcl/correspondence.h	/^    virtual ~PointCorrespondence6D () {}$/;"	f	struct:pcl::PointCorrespondence6D
~PointRepresentation	include/pcl/point_representation.h	/^      virtual ~PointRepresentation () {}$/;"	f	class:pcl::PointRepresentation
~PolynomialCalculationsT	include/pcl/common/impl/polynomial_calculations.hpp	/^pcl::PolynomialCalculationsT<real>:: ~PolynomialCalculationsT ()$/;"	f	class:pcl::PolynomialCalculationsT
~RangeImageSpherical	include/pcl/range_image/range_image_spherical.h	/^      PCL_EXPORTS virtual ~RangeImageSpherical () {}$/;"	f	class:pcl::RangeImageSpherical
~ScopeTime	include/pcl/common/time.h	/^      inline ~ScopeTime ()$/;"	f	class:pcl::ScopeTime
~ShiftToDepthConverter	include/pcl/io/openni2/openni_shift_to_depth_conversion.h	/^      virtual ~ShiftToDepthConverter () {};$/;"	f	class:openni_wrapper::ShiftToDepthConverter
~ShiftToDepthConverter	include/pcl/io/openni_camera/openni_shift_to_depth_conversion.h	/^      virtual ~ShiftToDepthConverter () {};$/;"	f	class:openni_wrapper::ShiftToDepthConverter
~SingleBuffer	include/pcl/io/impl/buffers.hpp	/^pcl::io::SingleBuffer<T>::~SingleBuffer ()$/;"	f	class:pcl::io::SingleBuffer
~StaticLayer	src/static_layer.cpp	/^StaticLayer::~StaticLayer()$/;"	f	class:costmap_2d::StaticLayer
~StopWatch	include/pcl/common/time.h	/^      virtual ~StopWatch () {}$/;"	f	class:pcl::StopWatch
~TransformationFromCorrespondences	include/pcl/common/transformation_from_correspondences.h	/^        ~TransformationFromCorrespondences () { };$/;"	f	class:pcl::TransformationFromCorrespondences
~VectorAverage	include/pcl/common/vector_average.h	/^        ~VectorAverage () {}$/;"	f	class:pcl::VectorAverage
~property	include/pcl/io/ply/ply_parser.h	/^            virtual ~property () {}$/;"	f	struct:pcl::io::ply::ply_parser::property
